<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 블로그 테마 추가</title>
      <link href="/2022/11/03/blog-hexoTheme/"/>
      <url>/2022/11/03/blog-hexoTheme/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Blog-테마-설치"><a href="#Hexo-Blog-테마-설치" class="headerlink" title="Hexo Blog 테마 설치"></a>Hexo Blog 테마 설치</h1><p>저의 경우 butterfly theme을 사용하고 있어, butterfly theme 기준으로 설명하겠습니다</p><ul><li>command 창에 아래 명령어를 입력해 테마를 github에서 다운로드 받아옵니다</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><ul><li>root 폴더의 config.yml로 이동하여 테마를 butterfly로 변경합니다</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><ul><li><p>이제 <code>hexo clean &amp;&amp; hexo server</code>로 local에서 테마가 바뀌었는지 테스트 합니다</p><ul><li>만약 바뀌지 않았다면?<ul><li>themes 폴더에 들어가서 butterfly를 제외하고 모두 삭제</li><li>브라우저에서 캐시 모두 삭제</li><li><code>hexo deploy -g</code> 실행</li></ul></li></ul></li><li><p>테마 별로 지원하는 기능이 다르니 기존의 설정도 다시 해봅니다</p><ul><li><code>google-analystics</code>를 themes-config.yml에서 다시 설정할 수 있습니다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 블로그 구글 애널리스틱스 등록</title>
      <link href="/2022/10/31/blog-googleAnalistic/"/>
      <url>/2022/10/31/blog-googleAnalistic/</url>
      
        <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>멘토링 중 hexo blog를 구글 서치 콘솔에 등록하려던 중 문제 발생<br>일반적인 html 삽입 방식 말고 깔끔한 방법이 있었던걸로 기억해서 기억 복구 겸 재정리합니다</p><h1 id="Google-Analistics"><a href="#Google-Analistics" class="headerlink" title="Google Analistics"></a>Google Analistics</h1><ul><li>구글 애널리스틱스는 웹,앱 등의 메타데이터 관리 지원해주는 구글 서비스입니다</li></ul><h2 id="Google-Analistics-등록"><a href="#Google-Analistics-등록" class="headerlink" title="Google Analistics 등록"></a>Google Analistics 등록</h2><ul><li><a href="https://analytics.google.com/">구글 애널리스틱스 홈페이지</a>에 접속합니다</li><li>설정 - 관리에서 속성을 생성합니다<ul><li>속성 생성시 이름은 <code>Github Pages</code>로 생성합니다</li><li>데이터 스트림 - 웹 - 본인의 블로그 url을 등록합니다</li></ul></li><li>url 등록까지 마치면 코드가 발급 됨을 확인할 수 있습니다</li></ul><h2 id="Hexo-등록"><a href="#Hexo-등록" class="headerlink" title="Hexo 등록"></a>Hexo 등록</h2><ul><li>본인의 theme 하위의 config.yml에 들어가 생성된 코드를 아래 형식으로 입력<ul><li><code>google_analytics: G-C17******</code></li></ul></li><li><code>hexo deploy -g</code>후 구글 서치 콘솔 등록시 구글 애널리스틱스로 등록하시면 됩니다</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo blog SEO와 Sitemap setting</title>
      <link href="/2022/10/14/blog-sitemap-seo/"/>
      <url>/2022/10/14/blog-sitemap-seo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-SEO와-sitemap-xml"><a href="#Hexo-SEO와-sitemap-xml" class="headerlink" title="Hexo SEO와 sitemap.xml"></a>Hexo SEO와 sitemap.xml</h1><ul><li>아래 커맨드를 터미널(git bash 등)에 실행해주세요</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>블로그 폴더의  <code>_config.yml</code>에 아래 복사 붙여 넣기 합니다</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span> <span class="comment"># atom or rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">50</span> <span class="comment"># 공개할 rss feed 수</span></span><br><span class="line">  <span class="comment"># 기본적으로 여기까지만 쓴다. 아래는 옵션</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span> <span class="comment"># 요약 글자수</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="comment"># sitemap auto generator</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span> <span class="comment"># 사이트맵에 태그 주소 포함 여부</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span> <span class="comment"># 사이트맵에 카테고리 주소 포함 여부</span></span><br></pre></td></tr></table></figure><ul><li><p>터미널에 <code>hexo deploy -g</code> 를 입력합니다</p></li><li><p><a href="https://search.google.com/search-console?hl=ko&resource_id=https://goberomsu.github.io/">구글 서치 콘솔</a>에 들어갑니다.</p><ul><li>처음 들어가면 속성 유형을 선택하라 뜰텐데, URL 접두어에 자신의 블로그 주소를 입력합니다<ul><li><img src="https://user-images.githubusercontent.com/37897508/195773123-a1485b63-d557-4220-89de-c319c13322c8.png" alt="image"></li><li>저의 경우 <a href="https://goberomsu.github.io/">https://goberomsu.github.io/</a>를 입력해야겠죠!?</li></ul></li><li>다음은 sitemaps에 들어가 sitemap.xml을 입력하고 제출합니다<ul><li><img src="https://user-images.githubusercontent.com/37897508/195773825-1a7d6a14-af84-443b-972c-7b6d441bdead.png" alt="image"></li><li>왼쪽 Tab을 보면 있습니다</li></ul></li></ul></li><li><p>sitemap이 바로 뜨지 않기도 하는데 그럴 땐 조금 기다려주세요</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kurento 시그널링 서버 feat STUN/TURN</title>
      <link href="/2022/08/15/kurento-signaling/"/>
      <url>/2022/08/15/kurento-signaling/</url>
      
        <content type="html"><![CDATA[<h2 id="시그널링-서버-왜-필요한가"><a href="#시그널링-서버-왜-필요한가" class="headerlink" title="시그널링 서버 왜 필요한가?"></a>시그널링 서버 왜 필요한가?</h2><p>시그널링이 필요한 이유를 꼽으라면, WebRTC를 이용한 P2P 통신을 하기 전 세팅을 하기 위함이다.<br>제 3자 소프트웨어 설치 없이 종단 간 데이터 공유화 화상 회를</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://gh402.tistory.com/47">[WebRTC] WebRTC를 공부하며 스트리밍 과정 익히기</a></p><p><a href="https://medium.com/monday-9-pm/%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90-webrtc-%EC%8B%9C%EB%8F%99%EA%B1%B8%EA%B8%B0-ebefe6feadf7">초보 개발자 WebRTC 시동걸기</a></p><p><a href="https://medium.com/monday-9-pm/%EC%B4%88%EB%B3%B4%EA%B0%9C%EB%B0%9C%EC%9E%90-webrtc-%EC%8B%9C%EA%B7%B8%EB%84%90%EB%A7%81%EC%84%9C%EB%B2%84-%EB%A7%8C%EB%93%A4%EA%B8%B0-caf8cf9adc9a">초보개발자 WebRTC 시그널링서버 만들기</a></p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 사용법</title>
      <link href="/2022/08/14/howToUseDocker/"/>
      <url>/2022/08/14/howToUseDocker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-사용법"><a href="#Docker-사용법" class="headerlink" title="Docker 사용법"></a>Docker 사용법</h1><ul><li>모든 이미지 제거</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><ul><li>이미지 직접 접근</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [container_id] bash</span><br></pre></td></tr></table></figure><ul><li>이미지 조회</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -a</span><br></pre></td></tr></table></figure><h2 id="Docker-설치"><a href="#Docker-설치" class="headerlink" title="Docker 설치"></a>Docker 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// apt 인덱스 업데이트</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"></span><br><span class="line">// repository over HTTPS를 사용하기 위한 패키지 설치</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span></span><br><span class="line"></span><br><span class="line">// GPG Key를 추가하고 확인</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-key fingerprint 0EBFCD88</span></span><br><span class="line"></span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br><span class="line"></span><br><span class="line">// 저장소 추가하고 apt 인덱스 업데이트</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"></span><br><span class="line">// Docker 설치</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line">// Docker 서비스 시작</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>socket 파일이 없는 경우</p><ul><li>Docker를 설치하고 재부팅하면 된다!</li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 사용 방법</title>
      <link href="/2022/08/10/howToUseGit/"/>
      <url>/2022/08/10/howToUseGit/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-사용법"><a href="#Git-사용법" class="headerlink" title="Git 사용법"></a>Git 사용법</h1><ul><li>원격 저장소 갱신</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote update </span><br></pre></td></tr></table></figure><ul><li>원격 저장소 branch 확인</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><ul><li>원격 저장소 가져오기<ul><li>branch 이름 형식은 origin&#x2F;dev 이렇게 적어야합니다.</li><li>git branch -r로 출력된 이름을 입력하면 되요</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -t [branch 이름]</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://yztech.tistory.com/32">git 브랜치: 가져오기, 합치기, 삭제하기</a></p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear Regression(회귀) - ML</title>
      <link href="/2022/07/31/ai-LinearRegression/"/>
      <url>/2022/07/31/ai-LinearRegression/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-Regression-회귀-ML"><a href="#Linear-Regression-회귀-ML" class="headerlink" title="Linear Regression(회귀) - ML"></a>Linear Regression(회귀) - ML</h1><p>선형 예측 함수를 사용해 회귀식을 모델링하여 알려지지 않은 파라미터는 데이터부터 추정한다<br>현실 세계의 많은 데이터들은 선형 그래프를 그리고, 선형 그래프는 직관적이다.<br>늦게 잘수록 피곤하다. 많이 먹을수록 배부르다 등 대부분의 데이터가 근사하게 선을 그리게 된다</p><p>이러한 회귀 모델은 일반적으로 최소 제곱법을 사용해 선형 회귀 모델을 만든다<br>    - 최소 제곱법을 사용하면 일단 값이 모두 양수가 나오고, 선형 함수 - 실제 값에 가중치를 주는 것을 의미한다</p><h2 id="Linear-Hypothesis"><a href="#Linear-Hypothesis" class="headerlink" title="Linear Hypothesis"></a>Linear Hypothesis</h2><p>선형한 그래프를 예측한다는 것은 어떤 데이터 값의 집합에서 Linear한 선을 찾는다 생각할 수 있다<br>이 때  Linear Regression Model이 학습 하는 것은 해당 데이터를 가장 잘 표현하는 선형 그래프를 찾는 것이다.</p><p>또한 축이 2개이고, 일반적으로 변수가 2개이므로, H(x) &#x3D; Wx+b의 그래프를 가진다<br>H(x)는 가설이며, Hypothesis를 세우는 것이 선형 회귀의 시작이다.</p><h2 id="Cost-오차-x2F-손실"><a href="#Cost-오차-x2F-손실" class="headerlink" title="Cost (오차&#x2F;손실)"></a>Cost (오차&#x2F;손실)</h2><p>데이터 분석에서 중요한 것은 오차를 파악하는 것이다.<br>실제 데이터와 모델의 값 차이를 오차라고 한다. 이 값 차이가 작을수록 당연히 정밀하다</p><p>오차를 Cost라하며 오차를 최소화하는 것이 모델링의 주요한 요점이다.<br>그렇다면 이 Cost를 표현해야할텐데 표현하는 방식은 다양하다.<br>이러한 방법들을 Cost(Loss) Function이라하며, Cost를 최소화하는 함수를 minimize Cost Function이라고 한다.</p><h3 id="Gradient-descent-algorithm"><a href="#Gradient-descent-algorithm" class="headerlink" title="Gradient descent algorithm"></a>Gradient descent algorithm</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://ko.wikipedia.org/wiki/%EC%84%A0%ED%98%95_%ED%9A%8C%EA%B7%80">선형 회귀</a><br><a href="https://ko.wikipedia.org/wiki/%EC%84%A0%ED%98%95_%ED%9A%8C%EA%B7%80">선형 회귀 쉽게 이해하기</a></p>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kurento Docker로 설치하는 방법 feat Window</title>
      <link href="/2022/07/28/kurentoSetUp/"/>
      <url>/2022/07/28/kurentoSetUp/</url>
      
        <content type="html"><![CDATA[<h2 id="현재-상황"><a href="#현재-상황" class="headerlink" title="현재 상황"></a>현재 상황</h2><ul><li>Window Docker Client가 있긴 하지만, 프로젝트 초기기도 하구 이참에 그냥 WSL에서 쓰는게 더 편할거라 생각했다</li></ul><h2 id="준비-사항"><a href="#준비-사항" class="headerlink" title="준비 사항"></a>준비 사항</h2><ul><li>WSL2</li><li><del>Kali Linux</del><ul><li>Kali도 데비안 계열이라 상관 없을거라 생각했는데 패키지 저장소 관련 에러가 막 터져서 우분투로 갔다</li><li>22.07.30 기준 Ubuntu가 정신 건강에 매우 좋다</li></ul></li><li>Ubuntu 18.0.5</li><li>Docker</li></ul><h2 id="WSL2에-Docker-설치"><a href="#WSL2에-Docker-설치" class="headerlink" title="WSL2에 Docker 설치"></a>WSL2에 Docker 설치</h2><ol><li><p>Docker 설치</p><ul><li><p><a href="https://www.docker.com/products/docker-desktop/">Docker 홈페이지</a>에 들어가서 윈도우용 클라이언트를 설치한다<br><img src="https://user-images.githubusercontent.com/37897508/182014118-39e55cfe-7778-4fa1-a510-0e9d83d8ab68.png" alt="image"></p></li><li><p>설치가 완료되면 Docker를 열어서 Setting - Resource에서 WSL2와 연동 시키고, Restart 하면 된다.</p></li><li><p>이제 docker images 커맨드를 입력하면 아래와 같이 실행되는 것을 알 수 있다</p></li></ul><p> <img src="https://user-images.githubusercontent.com/37897508/181415322-cf5ce763-e6c7-49e8-a5bb-513a47c93c6e.png" alt="Docker 설치 완료!"></p></li><li><p>Docker 저장소에서 Kurento Server 가져오자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kurento/kurento-media-server:latest</span><br></pre></td></tr></table></figure></li><li><p>Kurento Media Server 실행</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kms --network host \kurento/kurento-media-server:latest</span><br></pre></td></tr></table></figure><ul><li><p>Docker 옵션의 의미는 아래와 같다</p><ul><li>-d : 백그라운드 실행을 하겠다</li><li>–name : 현재 실행 시킬 이미지의 이름(별칭)을 정한다</li><li>–network: 컨테이너의 네트워크 설정<ul><li>host : 컨테이너를 호스트 컴퓨터와 동일한 네트워크에서 돌리겠다는 의미이다.</li></ul></li></ul></li><li><p>host 적고 한 칸 띄고 \kurento&#x2F;kurento-media-server:latest로 적어야한다</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \-p 8888:8888/tcp \-p 5000-5050:5000-5050/udp \-e KMS_MIN_PORT=5000 \-e KMS_MAX_PORT=5050 \kurento/kurento-media-server:latest</span><br></pre></td></tr></table></figure></li><li><p>마지막으로 실행 중인 미디어 서버의 포트 설정을 해준다</p></li></ul><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><h3 id="Hardware-assisted-virtualization-and-data-execution-protection-must-be-enabled-in-the-BIOS"><a href="#Hardware-assisted-virtualization-and-data-execution-protection-must-be-enabled-in-the-BIOS" class="headerlink" title="Hardware assisted virtualization and data execution protection must be enabled in the BIOS"></a>Hardware assisted virtualization and data execution protection must be enabled in the BIOS</h3><ul><li>제어판 설정에서 Hypervisor, 가상 머신이 켜져 있었고 혹시 몰라 컨테이너도 켰음에도 에러가 발생하였다. 보통 나의 경우에는 윈도우에서 Docker의 경우 Hypervisor를 거쳐서 실행되는데 자동 실행 등을 꺼놓아서 에러를 겪었다</li></ul><ol><li>Hyper-v 재활성화</li></ol><p>Powershell을 관리자 권한으로 실행 한다. 아래 커맨드를 입력 후 재부팅한다</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Hyper-V</span> <span class="literal">-All</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Hyper-v 자동실행 설정</li></ol><p>Powershell을 관리자 권한으로 실행 후 아래 명령어 입력하고 재부팅한다.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><h3 id="gnupg-gnupg2-and-gnupg1-do-not-seem-to-be-installed-but-one-of-them-is-required-for-this-operation"><a href="#gnupg-gnupg2-and-gnupg1-do-not-seem-to-be-installed-but-one-of-them-is-required-for-this-operation" class="headerlink" title="gnupg, gnupg2 and gnupg1 do not seem to be installed, but one of them is required for this operation"></a>gnupg, gnupg2 and gnupg1 do not seem to be installed, but one of them is required for this operation</h3><ul><li><p>apt-key adv –keyserver keyserver.ubuntu.com:80 –recv-keys 5AFA7A83 커맨드 입력시 에러 발생</p><ul><li>쿠렌토 저장소를 추가하려는 상황이었다</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install gnupg</span><br></pre></td></tr></table></figure></li></ul><h3 id="The-following-signatures-couldn’t-be-verified-because-the-public-key-is-not-available-NO-PUBKEY-7EA0A9C3F273FCD8"><a href="#The-following-signatures-couldn’t-be-verified-because-the-public-key-is-not-available-NO-PUBKEY-7EA0A9C3F273FCD8" class="headerlink" title="The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY 7EA0A9C3F273FCD8"></a>The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY 7EA0A9C3F273FCD8</h3><ul><li><p>패키지를 다운로드 받으려는데 공개키가 없다고 하는 상황이다</p></li><li><p>그냥 없는 공키를 아래 커맨드에 넣어 추가하면 된다</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys &lt;PUBKEY&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="The-repository-‘https-download-docker-com-linux-ubuntu-kali-rolling-Release’-does-not-have-a-Release-file"><a href="#The-repository-‘https-download-docker-com-linux-ubuntu-kali-rolling-Release’-does-not-have-a-Release-file" class="headerlink" title="The repository ‘https://download.docker.com/linux/ubuntu kali-rolling Release’ does not have a Release file"></a>The repository ‘<a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> kali-rolling Release’ does not have a Release file</h3><ul><li><p>칼리 리눅스와 우분투에서 별 차이 없이 Set up이 될 줄 알았는데 아니다</p><ul><li>데비안 계열 커맨드를 사용해서 저장소를 다시 설정해 주어야한다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%s\n&quot; &quot;deb [arch=amd64] https://download.docker.com/linux/debian buster stable&quot; |\</span><br><span class="line">sudo tee /etc/apt/sources.list.d/docker-ce.list</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://gh402.tistory.com/44?category=935378">쿠렌토 서버 Docker로 실행시켜보기</a><br><a href="https://unix.stackexchange.com/questions/630643/how-to-install-docker-ce-in-kali-linux">칼리 리눅스에 도커설치하는 방법</a></p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kurento </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kurento로 N:N Group Call 하는 방법</title>
      <link href="/2022/07/27/kurentoGroupCall/"/>
      <url>/2022/07/27/kurentoGroupCall/</url>
      
        <content type="html"><![CDATA[<h1 id="Group-Call-wtih-Kurento-Java"><a href="#Group-Call-wtih-Kurento-Java" class="headerlink" title="Group Call wtih Kurento- Java"></a>Group Call wtih Kurento- Java</h1><p>Node.js로 어플리케이션을 개발하는 중인데 Webrtc를 사용하는 것이 처음이다보니, Docs에 있는 예제를 읽고 먼저 이해하는 것이 먼저란 생각이 들어서 해당 글을 쓰게 되었다. 개념도 부족하고 이해도 부족하기에 일단 블로그 포스팅하고 점점 채워 나가야겠다</p><h2 id="선행-개념"><a href="#선행-개념" class="headerlink" title="선행 개념"></a>선행 개념</h2><ul><li><p>방이란?</p><ul><li>각 방은 다른 방과 격리된 자체 파이프라인을 생성한다</li><li>특정 방에 접속한 클라이언트는 같은 방에 있는 클라이언트와만 미디어 교환이 가능하다</li></ul></li><li><p>클라이언트</p><ul><li>각 클라이언트는 자체 미디어를 보내고 차례로 다른 모든 참가자로부터 미디어를 받는다.</li><li>이는 각 방의 총 n*n 개의 WebRTC End Point가 있음을 의미한다.</li><li>n은 클라이언트의 수이다.</li></ul></li><li><p>새 클라이언트가 방에 들어오면 새 webrtc가 생성되고 서버에서 미디어를 수신하도록 협상한다</p><ul><li>방에 원래 있던 사용자들에게는 새 사용자가 연결되었음을 알린다</li><li>모든 참가자는 서버에 새 참가자의 미디어를 수신하도록 요청한다</li><li>새로 들어온 사람은 차례로 연결된 모든 참가자의 목록을 가져온다<ul><li>이를 위해 서버에 방에 있는 모든 현재 클라이언트로부터 미디어를 수신하도록 요청한다.</li></ul></li></ul></li><li><p>클라이언트가 방을 나가는 상황</p><ul><li>클라이언트가 방을 나갈 때 서버에게 이 사실을 알린다.</li><li>방을 나가는 클라이언트 측에서 서버에 남는 클라이언트과 관련된 모든 미디어 요소를 취소하도록 요청한다.</li></ul></li><li><p>통신을 위해서는 2 개의 Web Socket이 필요하다</p><ol><li>클라이언트와 응용 프로그램 서버 사이의 Web Socket이 생성된다<ul><li>사용자 지정 신호 프로토콜을 구현하기 위해 만들어진다.</li></ul></li><li>Kurento Client와 Kurento Media Server 간의 통신을 위한 Web Socket이 생성된다.<ul><li>통신은 Kurento 프로토콜을 사용하여 이루어진다.</li></ul></li></ol></li></ul><h2 id="Application-Server-Logic"><a href="#Application-Server-Logic" class="headerlink" title="Application Server Logic"></a>Application Server Logic</h2><p>서버 로직의 핵심은 GroupCallApp 클래스이다. KurentoClient는 해당 클래스에서 Spring Bean으로 인스턴스화 된다.<br>해당  Bean은 애플리케이션에 미디어 기능을 추가하는데 사용되는 Kurento 미디어 파이프라인을 만드는데 사용된다.</p><p>Kurento 클라이언트가 인스턴스화 되면 Kurento 미디어 서버와 통신하고 멀티 미디어 기능을 제어할 준비가 된 것이다.</p><ul><li>Web Socket의 용도<ul><li>요청 및 응답을 통해 클라이언트와 애플리케이션 서버 간의 통신에 사용된다</li><li>해당 클래스에서는 Websocket 요청을 처리하기 위해 WebSocketConfigurer를 WebSocketHnadler에 등록한다<ul><li>WebSocket의 요청을 처리하기 위해 Group Call 경로가 필요하다</li></ul></li></ul></li><li>Call Handler 클래스의 용도<ul><li>TextWebSocket Handler로 WebSocket 요청을 처리하기 위해 구현된다.</li><li>해당 클래스의 핵심은 handleTextMesage이다.<ul><li>요청에 대한 작업을 구현하고 Web Socket을 통해 응답을 반환한다.</li><li>즉 이전 시퀀스 다이어그램에서 설명한 시그널링 프로토콜의 서버 부분을 구현하다</li></ul></li><li>Text로 들어오는 메시지들을 확인해서 switch 절에서 명령을 정리한다.</li></ul></li></ul><h2 id="Client-Logic"><a href="#Client-Logic" class="headerlink" title="Client Logic"></a>Client Logic</h2><ul><li>서버에 생성된 WebSocket 서비스를 호출하기 위해 Javascript가 사용되었다</li><li>Kurento-util.js는 Kurento Javascript 라이브러리를 사용하여 WebRTC와 서버 간의 상호 작용을 단순화한다.<ul><li>브라우저의 차이를 위해 사용되는 adapter.js에 의존한다</li></ul></li><li>클라이언트 측에서는 json 신호 프로토콜을 이용해 메세지를 생성한다.<ul><li>Kurento-utils.js가 이 때에 사용된다.</li></ul></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://doc-kurento.readthedocs.io/en/6.16.0/tutorials/java/tutorial-groupcall.html">Kurento Group Call - Java</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kurento </tag>
            
            <tag> Webrtc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow intro - Hello Tensor Flow</title>
      <link href="/2022/07/27/ai-hello/"/>
      <url>/2022/07/27/ai-hello/</url>
      
        <content type="html"><![CDATA[<h1 id="TensorFlow-입문"><a href="#TensorFlow-입문" class="headerlink" title="TensorFlow 입문"></a>TensorFlow 입문</h1><p>TensorFlow는 graph로 연산을 나타내는 프로그래밍 시스템이다.<br>그래서 당연히 노드 단위로 일을 하고 graph에 있는 노드는 op(작업)(operation)이라고 부른다.<br>보통 op는 0 이상의 Tensor를 가질 수 있다. Tensor는 정형화된 다차원 배열이다</p><p>TensorFlow에서 Graph는 연산을 표현해 놓은 것이라서 연산을 하려면 graph가 session 상에 실행되어야 한다. Session은 graph의 작업을 CPU&#x2F;GPU 같은 Device에 배정하고 실행을 위한 메서들을 제공한다.<br>이러한 메서드들이 작업을 실행해서 Tensor를 만들어 낸다.(Tensorflow 2.x.x 이상 부터는 Session을 만드는 과정이 사라졌다)</p><p>보통 Tensro는 파이썬에서 numpy ndarry 형식으로 출력된다ㅓ.</p><h2 id="설치-방법"><a href="#설치-방법" class="headerlink" title="설치 방법"></a>설치 방법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu</span><br></pre></td></tr></table></figure><h2 id="Error-amp-amp-Tip"><a href="#Error-amp-amp-Tip" class="headerlink" title="Error &amp;&amp; Tip"></a>Error &amp;&amp; Tip</h2><h3 id="코드-실행-시-Warning-뜨지-않게-하는-방법"><a href="#코드-실행-시-Warning-뜨지-않게-하는-방법" class="headerlink" title="코드 실행 시 Warning 뜨지 않게 하는 방법"></a>코드 실행 시 Warning 뜨지 않게 하는 방법</h3><ul><li>아래 코드를 입력하면된다</li><li>코드 내용은 메세지 코드 중 Warning을 뜨지 않게 하겠다란 의미이다<ul><li>2 번이 Warning이다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Could-not-load-dynamic-library-‘cudart64-110-dll’"><a href="#Could-not-load-dynamic-library-‘cudart64-110-dll’" class="headerlink" title="Could not load dynamic library ‘cudart64_110.dll’"></a>Could not load dynamic library ‘cudart64_110.dll’</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022-07-27 15:00:14.017560: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library <span class="string">&#x27;cudart64_110.dll&#x27;</span>; dlerror: cudart64_110.dll not found</span><br><span class="line">2022-07-27 15:00:14.026248: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror <span class="keyword">if</span> you <span class="keyword">do</span> not have a GPU <span class="built_in">set</span> up on your machine.</span><br></pre></td></tr></table></figure><p>CUDA는 GPU에서 수행하는 병렬처리 알고리즘을 프로그래밍언어로 사용가능하게 하는 기술이다.<br>NVIDIA에서 개발한 GPU 개발 툴인데 딥러닝에 사용할 수 있도록 오픈 되었다<br>AI, 채굴, 딥러닝 분야에서 많은 양의 연산을 동시처리하는 것이 목표이다보니 자연스레 사용하게 된다</p><p>보통은 CPU로 프로그램을 돌리니까 설치가 안되었거나 버전 낮은 경우가 있는데 나도 그런 케이스라 다시 설치하게 되었다</p><ul><li>CUDA 64bit 11 Version을 재설치 후 재부팅하면 된다</li></ul><h3 id="AttributeError-module-‘tensorflow’-has-no-attribute-‘Session’"><a href="#AttributeError-module-‘tensorflow’-has-no-attribute-‘Session’" class="headerlink" title="AttributeError: module ‘tensorflow’ has no attribute ‘Session’"></a>AttributeError: module ‘tensorflow’ has no attribute ‘Session’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">hello = tf.constant(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line">sess =tf.Session()</span><br><span class="line"><span class="built_in">print</span>(sess.run(hello))</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><ul><li>Session을 사용하는 경우는 텐서플로우 1.x.x 버전 식 표현이다.</li><li>텐서플로우 2.0 버전부터는 session을 정의하고 run 해주는 과정이 생략 된다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">hello = tf.constant(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(hello)</span><br></pre></td></tr></table></figure><ul><li>새로운 version은 위와 같이 간단하게 쓰면 된다!</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://tensorflowkorea.gitbooks.io/tensorflow-kr/content/g3doc/get_started/basic_usage.html">TensorFlow 문서 번역</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ai </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 1439 뒤집기</title>
      <link href="/2022/07/27/algorithm-boj1439/"/>
      <url>/2022/07/27/algorithm-boj1439/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">st = sys.stdin.readline().rstrip()</span><br><span class="line">stl=[]</span><br><span class="line">temp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">flag=st[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> st:</span><br><span class="line">    <span class="keyword">if</span> flag!=s:</span><br><span class="line">        stl.append(temp)</span><br><span class="line">        temp=s</span><br><span class="line">        flag=s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp+=s</span><br><span class="line">stl.append(temp)</span><br><span class="line"></span><br><span class="line">zcount=<span class="number">0</span></span><br><span class="line">ocount = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> st <span class="keyword">in</span> stl:</span><br><span class="line">    <span class="keyword">if</span> st[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        zcount+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ocount+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(zcount,ocount))</span><br></pre></td></tr></table></figure><ul><li>뒤집는 횟수는 결국은 1과 0 뭉텅이 중 뭐가 제일 많이 나왔느냐라 생각했다</li><li>처음엔 횟수로 나눴는데 생각을 잘못해서 오류가 떴었다. 그렇게 푸는게 시간이 덜 들어갈 듯하다</li></ul><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>solved.ac 기준 silver 3이상으로 풀자<ul><li>일단은 조곰 생각하면 풀어버린다</li><li>티어가 안올라가니까 추가적인 동기부여가 없는 듯</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 1417 국회의원 선거</title>
      <link href="/2022/07/27/algorithm-boj1417/"/>
      <url>/2022/07/27/algorithm-boj1417/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">heap = []</span><br><span class="line">ds = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    nm = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        ds=nm</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappush(heap, -nm)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> heap:</span><br><span class="line">    <span class="built_in">max</span> = -heapq.heappop(heap)</span><br><span class="line">    <span class="keyword">if</span> ds&gt;<span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    ds+=<span class="number">1</span></span><br><span class="line">    heapq.heappush(heap,-<span class="built_in">max</span>+<span class="number">1</span>)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><ul><li>우선순위를 부여해서 값을 구하면 될거라 생각했다<ul><li>이런 정렬 자료구조에서 보통은 오름차순 정렬이 되서 값이 나오는데 이름 내림차순으로 바꿀 필요가 있었다</li><li>heapq를 사용했고, 값을 넣을 때 음수로 바꿔서 넣음으로써 내림차순을 구현했다</li></ul></li></ul><h2 id="배열에-우선순위를-부여하자"><a href="#배열에-우선순위를-부여하자" class="headerlink" title="배열에 우선순위를 부여하자"></a>배열에 우선순위를 부여하자</h2><h3 id="우선순위-큐"><a href="#우선순위-큐" class="headerlink" title="우선순위 큐"></a>우선순위 큐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQue <span class="comment"># Class Import</span></span><br><span class="line">que = PriorityQueue()<span class="comment"># 우선 순위 큐 생성</span></span><br></pre></td></tr></table></figure><ul><li>우선순위 큐는 iterable 하지 않기 때문에 인덱스로 접근이 불가능<ul><li>print하면 출력이 아니라 object 주소가 나온다</li></ul></li><li>기본적으로 오름차순 정렬이 되어 있다<ul><li>내림차순 하는 법을 찾고 있었는데 차라리 heapq를 사용하는게 더 편할거라 생각해서 바꿨다</li></ul></li></ul><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><ul><li>완전 이진 트리의 일종으로 우선순위 큐를 위하여 만들어진 자료구조이다.</li><li>힙은 일종의 반 정렬 상태를 유지한다<ul><li>큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있지만 엄격하진 않다</li></ul></li><li>구현하기가 쉽고, 배열을 이용하기 때문에 알고리즘 문제 풀 때 유용하다</li></ul><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>좀 더 파고들어서 공부할 필요가 있다.</li><li>그렇게 어려운 문제는 아니었는데 아이디어 떠올리는데서 조곰 헤맸다</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 공부</title>
      <link href="/2022/07/26/docker/"/>
      <url>/2022/07/26/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker란-무엇인가"><a href="#Docker란-무엇인가" class="headerlink" title="Docker란 무엇인가?"></a>Docker란 무엇인가?</h1><ul><li>Docker는 Linux Container에 여러 기능을 추가함으로써 Application을 좀 더 쉽게 사용할 수 있게 만들어진 오픈소스 가상화 플랫폼</li><li>Docker는 격리된 공간에 필요한 라이브러리, 실행파일만 담아놓고 사용하기 때문에 부담이 줄어든다.</li><li>Docker는 컨테이너 생성 및 관리가 매우 쉽다<ul><li>일종의 모듈식(경량화) 가상 머신이다</li></ul></li></ul><h2 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너 (Container)"></a>컨테이너 (Container)</h2><p>Docker에서의 컨테이너의 개념은 다양한 프로그램, 다양한 운영체제 및 실행 환경등을 컨테이너로 추상화하여 동일한 인터페이스를 제공하여, 배포 및 관리를 단순화 시키는 것을 말한다.</p><h3 id="가상-머신과-차이점"><a href="#가상-머신과-차이점" class="headerlink" title="가상 머신과 차이점"></a>가상 머신과 차이점</h3><p>가상 머신은 Hypervisor를 이용해 하나의 Host에서 여러 개의 OS를 생성해 사용하는 방식이다. 가상 머신의 Guest OS들은 서로 간에 완전히 독립된 공간을 할당 받는다.</p><p>하지만, 이런한 작업 방식은 Hypervisor를 반드시 거쳐야 하기 때문에 성능 저하가 발생합니다. 또한 각 Virtual Machine은 Guest OS를 위한 Library,Kernal 등을 모두 포함해야하므로 배포시 image의 크기가 커진다.</p><h2 id="도커를-사용하는-이유"><a href="#도커를-사용하는-이유" class="headerlink" title="도커를 사용하는 이유"></a>도커를 사용하는 이유</h2><ul><li><p>독립된 개발 환경 보장<br>Container는 격리된 공간이므로 그 자체에 특별한 권한을 주지 않는 한 내부에서 무엇을 하든 Host OS에는 여향을 끼치지 않습니다</p></li><li><p>개발&#x2F;운영 환경의 통합<br>Container 내부 작업을 배포하기 위해서는 해당 Container를 docker image라는 하나의 패키지로 만들어 운영 서버에 전달하면 된다.</p><p>서비스 개발 환경을 다른 서버에서도 똑같이 복제할 수 있어 의존성 걱정이 없다</p></li><li><p>배포 신속성 및 H&#x2F;W 효율<br>Guast OS와 달리 Kernal을 포함하고 있지 않기 때문에 image 크기가 비교적 작다. 따라서 Application의 배포 속도가 매우 빨라지며, H&#x2F;W 용량을 작게 차지한다.</p></li><li><p>여러 Application의 독립성과 확장성이 높아진다<br>여러 Module을 독립된 형태로 구성하므로 언어에 종속되지 않고 변화에 빠르게 대응할 수 있다. 독립된 형태들을 구현하는데는 주로 Docker Container가 많이 사용된다.</p></li></ul><h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ol><li>Docker는 플랫폼 의존적이다.<br>Docker는 윈도우에서는 linux 가상 머신 위에서 돌아간다. 즉 linux에서만 실행가능하다</li><li>Docker는 bare-metal 방식보다 느리다.<br>Docker가 기존의 가상화 방식보다 overhead가 적긴 하지만 여전히  bare-metal 방식에 속도에 비하면 느리다<br>bare-metal은 클라우드가 아닌 실제 하드웨어 서버를 말한다</li><li>Docker 위에서 GUI 앱을 돌리기가 불편하다<br>command Line에서 동작하는 앱을 호스팅하기 위해 디자인되어서 gui 실행은 가능하나 불편하다</li></ol><h2 id="Referance"><a href="#Referance" class="headerlink" title="Referance"></a>Referance</h2><ul><li><a href="https://velog.io/@iuliet716/Docker%EC%9D%98-%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%9E%A5%EC%A0%90">Docker의 역할과 장점</a></li><li><a href="https://chanos.tistory.com/entry/Docker-%EB%8F%84%EC%BB%A4Docker%EB%9E%80-%EB%8F%84%EC%BB%A4%EC%9D%98-%EA%B0%9C%EB%85%90">Docker의 개념</a></li><li><a href="https://hanhyx.tistory.com/27">Docker의 개요 및 장점 그리고 도커를 쓰는 이유</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>백준 1343 폴리오미노</title>
      <link href="/2022/07/25/algorithm-boj1343/"/>
      <url>/2022/07/25/algorithm-boj1343/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">st = sys.stdin.readline().rstrip()</span><br><span class="line">stl = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">st</span>):</span><br><span class="line">    answer=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    temp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> st:</span><br><span class="line">        <span class="keyword">if</span> temp==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            temp+=s</span><br><span class="line">        <span class="keyword">elif</span> temp[<span class="number">0</span>]==s:</span><br><span class="line">            temp+=s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stl.append(temp)</span><br><span class="line">            temp=s</span><br><span class="line">    stl.append(temp)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(st)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> st <span class="keyword">in</span> stl:</span><br><span class="line">        <span class="keyword">if</span> st[<span class="number">0</span>]==<span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(st)%<span class="number">2</span>!=<span class="number">0</span>:<span class="comment">#짝수가 아닌 것은 만들 수 없으니까 제거 한다</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            x = <span class="built_in">len</span>(st)//<span class="number">4</span></span><br><span class="line">            y= <span class="built_in">len</span>(st)-x*<span class="number">4</span></span><br><span class="line">            answer+=<span class="string">&#x27;A&#x27;</span>*x*<span class="number">4</span></span><br><span class="line">            answer+=y*<span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            answer+=<span class="built_in">len</span>(st)*<span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solve(st))</span><br></pre></td></tr></table></figure><ul><li>사전 순으로 나오라는 말은 그냥 A가 먼저 나오면 되니까 4로 나눠지는 몫으로 A를 입력 후 남는 값에 B를 넣었다<ul><li>당연히 홀수인 경우는 미리 예외 처리 했다</li></ul></li></ul><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>solve() 등을 만들어서 예외처리를 그냥 return -1하니까 문제 풀 때 편하다</li><li>구현력이 꽤나 떨어짐을 느낀다. 쉬운 문제부터 차근차근 해결해 나가자<ul><li>일단은 그리디 문제 풀면서 조곰씩 폼을 올릴 생각이다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>신규 아이디 추천</title>
      <link href="/2022/07/25/programmers-5/"/>
      <url>/2022/07/25/programmers-5/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">new_id</span>):</span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    answer = new_id.lower()</span><br><span class="line">    temp =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> answer:</span><br><span class="line">        <span class="keyword">if</span> s.isalnum() <span class="keyword">or</span> s==<span class="string">&#x27;-&#x27;</span> <span class="keyword">or</span> s==<span class="string">&#x27;_&#x27;</span><span class="keyword">or</span> s==<span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            temp+=s</span><br><span class="line">    answer=temp</span><br><span class="line">    temp=answer[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(answer)):</span><br><span class="line">        <span class="keyword">if</span> answer[i-<span class="number">1</span>]==<span class="string">&#x27;.&#x27;</span> <span class="keyword">and</span> answer[i]==<span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        temp+=answer[i]</span><br><span class="line">    answer=temp.strip(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> answer==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        answer+=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(answer)&gt;=<span class="number">16</span>:</span><br><span class="line">        answer=answer[<span class="number">0</span>:<span class="number">15</span>]</span><br><span class="line">    <span class="keyword">if</span> answer[-<span class="number">1</span>]==<span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">        answer=answer[:<span class="built_in">len</span>(answer)-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(answer)&lt;=<span class="number">2</span>:</span><br><span class="line">        answer+=answer[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><ul><li>파이썬의 문자열을 다룰 수 있는가를 물어보는 문제이다<ul><li>lower()은 문자열을 바꾸는게 아니라 바뀐 문자열을 리턴함수이다</li></ul></li></ul><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">new_id</span>):</span><br><span class="line">    st = new_id</span><br><span class="line">    st = st.lower()</span><br><span class="line">    st = re.sub(<span class="string">&#x27;[^a-z0-9\-_.]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, st)</span><br><span class="line">    st = re.sub(<span class="string">&#x27;\.+&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, st)</span><br><span class="line">    st = re.sub(<span class="string">&#x27;^[.]|[.]$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, st)</span><br><span class="line">    st = <span class="string">&#x27;a&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(st) == <span class="number">0</span> <span class="keyword">else</span> st[:<span class="number">15</span>]</span><br><span class="line">    st = re.sub(<span class="string">&#x27;^[.]|[.]$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, st)</span><br><span class="line">    st = st <span class="keyword">if</span> <span class="built_in">len</span>(st) &gt; <span class="number">2</span> <span class="keyword">else</span> st + <span class="string">&quot;&quot;</span>.join([st[-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>-<span class="built_in">len</span>(st))])</span><br><span class="line">    <span class="keyword">return</span> st</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>위의 문제를 정규식으로 깔끔하게 풀어낸 사람도 존재한다</li><li>난 솔직히 더럽게 푼건데 사실 정규식으로 풀기를 원한 문제였을가 싶다</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>더 맵게</title>
      <link href="/2022/07/23/programmers-4/"/>
      <url>/2022/07/23/programmers-4/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">scoville, K</span>):</span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        scoville.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(scoville)==<span class="number">1</span> <span class="keyword">and</span> scoville[<span class="number">0</span>]&lt;K:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> scoville[-<span class="number">1</span>] &gt;=K:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n1 = scoville.pop()</span><br><span class="line">        n2 = scoville.pop()</span><br><span class="line">        scoville.append(n1+<span class="number">2</span>*n2)</span><br><span class="line">        answer+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><ul><li>보자마자 떠오른 아이디어는 반복문 안에서 스택 사용해서 계속 정렬하면서 값을 구하는 것이었다</li><li>답은 맞는데 정렬하는 부분에서 시간 초과가 당연히 발생한다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">scoville, K</span>):</span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    scoville.sort()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(scoville)==<span class="number">1</span> <span class="keyword">and</span> scoville[<span class="number">0</span>]&lt;K:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> scoville[<span class="number">0</span>] &gt;=K:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n1 = heapq.heappop(scoville)</span><br><span class="line">        n2 = heapq.heappop(scoville)</span><br><span class="line">        heapq.heappush(scoville,n1+<span class="number">2</span>*n2)</span><br><span class="line">        answer+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><ul><li>파이썬의 자료구조 heapq는 트리 구조로 데이터가 저장 되어 자동으로 입력을 할 때 정렬이 되는 특징이 있다<ul><li>이를 이용하여 문제 해결!</li></ul></li></ul><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>자연스럽게 문제를 풀 때 자료구조를 먼저 찾고 적용한 흐름은 잘했다</li><li>아쉬운 점이라면, 자동 완성 등 없이 문제를 푸니까 불편함이 확연하다. 좀 고집이나 싶기도 하다</li><li>파이썬이 편해서 파이썬으로 공부하긴 하는데 다른 언어로 공부해야하나 싶다.<ul><li>물론 반대편에서는 로직만 같다면 구현할 수 있는거 아니냐란 생각도 들어 일단 꾸준히 함에 집중하자</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>폰켓몬</title>
      <link href="/2022/07/23/programmers-3/"/>
      <url>/2022/07/23/programmers-3/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">nums</span>):</span><br><span class="line">    answer=<span class="number">0</span></span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">set</span>(nums))</span><br><span class="line">    size = <span class="built_in">len</span>(nums)/<span class="number">2</span> <span class="keyword">if</span> <span class="built_in">len</span>(nums)%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">len</span>(nums)/<span class="number">2</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> size&gt;<span class="built_in">len</span>(s):</span><br><span class="line">        answer = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        answer = size</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>너무 쉽게 풀려서 뭐지 싶었는데, 오르는 점수 보니까 쉬운 문제였다</li><li>별다른 로직이 없기도 했음</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web RTC란?</title>
      <link href="/2022/07/22/webRTC/"/>
      <url>/2022/07/22/webRTC/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-RTC란"><a href="#Web-RTC란" class="headerlink" title="Web RTC란?"></a>Web RTC란?</h1><p>Web RTC는 드라이버나 플러그인 설치 없이 웹 브라우저 간 P2P 연결을 통해 데이터 교환을 가능하게 하는 기술입니다.<br>Web RTC의 핵심을 꼽으라면 저는 시그널링을 이야기할 것입니다<br>브라우저 간 시그널링을 통해 별도의 중간자를 거치지 않고 P2P 연결이 가능해지기 때문입니다.<br>즉 중개 서버가 없기 때문에 빠른 속도도 보장되고, HTTPS가 강제되기 때문에 중간자 공격으로부터 보호도 됩니다.</p><p>그렇다면 브라우저는 여러 개인듯 브라우저 호환성은 괜찮은가? 의문이 생깁니다<br>Web RTC는 구글이 주도한 오픈소스 프로젝트 기반 웹 표준이라 크롬과 호환성이 높습니다.<br>파이어폭스나 오페라 등도 WEebRTC 표준을 따르고 있죠. 하지마 애플 특유의 폐쇄성으로 WebKit 기반 브라우저라 WebRTC 지원은 하지만 호환성은 떨어집니다. 즉 다양한 플랫폼에 대한 표준화가 완전히 구현되지 않은 것입니다.</p><p>그래도 괜찮습니다. 이런 크로스 브라우징 이슈를 해결하기 위해서 adapter.js 라이브러리가 존재합니다.</p><h2 id="Peer-to-Peer-연결-절차"><a href="#Peer-to-Peer-연결-절차" class="headerlink" title="Peer to Peer 연결 절차"></a>Peer to Peer 연결 절차</h2><ol><li><p>각 브라우저가 P2P 커뮤니케이션에 동의</p></li><li><p>서로의 주소를 가져옴</p></li><li><p>보안 사항 및 방화벽 우회<br>일반적인 컴퓨터에는 공인 IP가 할당되어 있지 않습니다. 그 이유는 방호벽이나 NAT, 또는 DHCP 때문입니다<br>그래서 단순히 공인 IP를 알아낸다해서 특정한 사용자를 가리 킬 수 없습니다<br>해당 네트워크 내에서의 사설 IP 주소까지 알아내야하죠<br>라우터 등을 통과해서 연결할 방법을 찾는 과정을 NAT 트래버셜이라고 합니다.</p><p> 이는 STUN 서버에 의해 이루어집니다. STUN은 단말이 자신의 공인 IP 주소와 포트를 확인하는 과정에 대한 프로콜입니다. 즉 WebRTC 연결을 시작하기 전 STUN 서버를 향해 요청을 보내면 STUN 서버는 NAT 뒷 단의 피어들을 서로 연결할 수 있도록 공인 IP와 포트를 찾아줍니다.</p><p> 최후의 수단으로는 TURN 방식도 잇습니다.</p></li><li><p>멀티미디어 데이터를 실시간 교환</p></li></ol><ul><li>시그널링이란</li></ul><h2 id="ICE와-Canddidate"><a href="#ICE와-Canddidate" class="headerlink" title="ICE와 Canddidate"></a>ICE와 Canddidate</h2><ul><li>여태껏 이야기한 STUN, TURN 서버를 이용해 획득했던 IP 주소와 프로토콜, 포트의 조합으로 구성된 연결이 가능한 네트워크 주소들을 후보라 부릅니다<ul><li>후보들을 수집합면 일반적으로 3개의 주소를 얻게 된다<ul><li>자신의 사설 IP와 포트 넘버</li><li>자신의 공인 IP와 포트 넘버 (STUN, TURN 서버로부터 획등 가능)</li><li>TURN 서버의 IP와 포트 넘버(TURN 서버로부터 획득 가능)</li></ul></li></ul></li></ul><p>위의 과정은 모두 ICE(Interactive Connectivity Estabilishment)라는 프레임워크 위에서 이루어집니다.<br>두 개의 단말이 P2P 연결을 가능하게 하도록 최적의 경로를 찾아주는 프레임워크이다.</p><h2 id="SDP-Session-Description-Protocol"><a href="#SDP-Session-Description-Protocol" class="headerlink" title="SDP(Session Description Protocol)"></a>SDP(Session Description Protocol)</h2><ul><li>WebRTC에서  스트리밍 미디어의 해상도나 형식, 코덱 등의 멀티미디어 컨텐츠의 초기 인수를 설명하기 위해 채택한 프로토콜</li><li>제안 응답 모델을 가지고 있다<ul><li>어떤 피어가 미디어 스트림을 교환할 것을 제안하면, 상대방으로부터 응답이 오기를 기다린다.</li><li>응답을 받으면 각자의 피어가 수집합 ICE 후보 중에서 최적의 경로를 결정하고 협상하는 프로세스 발생</li><li>수집한 ICE 후보들로 패킷을 보내 가장 지연 시간이 적고 안정적인 경로를 찾는 것이다.</li><li>최적의 ICE 후보가 선택되면 기본적으로 필요한 모든 메타 데이터와 IP 주소 및 포트, 미디어 정보가 피어 간 합의 가 완료된다.</li><li>즉 P2P 연결이 완전히 설정되고 활성화 된 것이다.</li></ul></li></ul><h2 id="Trickle-ICE"><a href="#Trickle-ICE" class="headerlink" title="Trickle ICE"></a>Trickle ICE</h2><ul><li>일반적으로 각 피어는 ICE 후보들을 수집해서 그 목록을 완성한 후 한꺼번에 교환하게 된다.</li><li>하지만 이러한 방식은 SDP의 제안 응답 모델과 맛물리면서 단점으로 작용한다</li></ul><p>후보들을 모으는데도 시간이 오래 걸리고 그 과정에서 네트워크 환경에 따라 지연이 걸릴 수 있다.<br>또한 한 쪽 피어의 ICE 후보 수집 작업이 완료되어야만 다른 피어가 ICE 후보를 모을 수 있어 비효율적이다.<br>이러한 비효율적인 후보 교환 작업을 병령 프로세스로 수행할 수 있게 만든 것이 바로 Trickle ICE이다.</p><h2 id="시그널링"><a href="#시그널링" class="headerlink" title="시그널링"></a>시그널링</h2><p>RTCPeerConnection 통신에서 사용할 통신 규격을 교환하기 위해 두 장치의 제어 정보를 교환하는 과정을 의미합니다. WebRTC 연결 전까지의 과정입니다</p><p>즉 시그널링은 WebRTC 자체에서 지원하는 기능이 아닙다.</p><p>시그널링은 쉽게 말해서 약속을 잡는 것입니다. 시그널링 서버에서는 SDP와 ICE 프로토콜을 사용해 약속을 잡습니다.</p><h2 id="STUN-서버"><a href="#STUN-서버" class="headerlink" title="STUN 서버"></a>STUN 서버</h2><p>STUN 서버도 약속을 잡는 것입니다.  STUN 서버는 어디서 만날래와 같은 약속을 잡는 서버입니다.<br>즉 IP를 알아주는 서버인 것이죠</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://velog.io/@yerimii11/Project-%EB%82%98%EB%A7%8C%EC%9D%98-%EB%AC%B4%EA%B8%B0-%ED%9A%8C%EA%B3%A0-03.0703.12-D-71-5%EC%A3%BC%EC%B0%A8">SFU 방식 구현 &amp;&amp; 서버 구현 과정</a></li><li><a href="http://john-home.iptime.org:8085/xe/index.php?mid=board_sKSz42&document_srl=1551">WebRTC 정보 모음집</a></li><li><a href="https://wormwlrm.github.io/2021/01/24/Introducing-WebRTC.html">Web RTC 개요부터 관련 개념까지</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API">WebRTC API</a></li><li><a href="https://github.com/muaz-khan/RTCMultiConnection">RTCMultiConneciton</a><ul><li>Sample Code 및 Demo가 많음</li></ul></li><li><a href="https://github.com/mariogasparoni/kurento-mcu-webrtc">Kurento-mcu-server</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>로또의 최고 순위와 최저 순위</title>
      <link href="/2022/07/22/programmers-2/"/>
      <url>/2022/07/22/programmers-2/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>순서에 상관 없이 번호만 일치하면 된다</li><li>바꿀 수 있는 번호는 0이다</li></ul><p>로또 당첨 번호 받아서 순차적으로 안에 값이 있는지 확인해서, 없는 것만 찾으면 될 듯하다<br>최소 당첨 번호는 일치하는 숫자의 갯수이다. 최대 당첨 번호는 전체 자릿 수에서 일치하지 않는 번호만 빼면 된다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">lottos, win_nums</span>):</span><br><span class="line">    answer = []</span><br><span class="line">    correct,zero = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> lottos:</span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span>:</span><br><span class="line">            zero+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> l <span class="keyword">in</span> win_nums:</span><br><span class="line">            correct+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    mini,maxi=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    maxi = correct+zero</span><br><span class="line">    mini = correct</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> maxi==<span class="number">0</span> <span class="keyword">or</span> maxi ==<span class="number">1</span>:</span><br><span class="line">        answer.append(<span class="number">6</span>)    </span><br><span class="line">    <span class="keyword">else</span>:       </span><br><span class="line">        answer.append(<span class="number">7</span>-maxi)</span><br><span class="line">    <span class="keyword">if</span> mini==<span class="number">0</span> <span class="keyword">or</span> mini==<span class="number">1</span>:</span><br><span class="line">        answer.append(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        answer.append(<span class="number">7</span>-mini)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>로직은 매우 쉬운데, 내 생각이 좀 분산된 듯하다</li><li>예외처리 잘하자 그냥 조건만 잘 읽으면 예외처리는 껌이야</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Programmers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>신고 결과 받기 - Programmers</title>
      <link href="/2022/07/22/programmers-1/"/>
      <url>/2022/07/22/programmers-1/</url>
      
        <content type="html"><![CDATA[<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>한 유저가 중복해서 같은 유저를 계속 신고할 수 없다</li><li>k 번 이상 신고된 유저는 정지되고, 그 결과를 모든 유저에게 정지 사실을 메일로 발송한다</li></ul><p>즉 유저는 신고한 유저의 정보를 가지고 있어야 하고, 유저마다 신고된 횟수도 기록되어야 한다.<br>최종적으로 answer에는 각 유저들이 받은 처리 메일만 기록하면 된다.</p><p>풀이 방법은 신고 받은 유저 딕셔너리를 만들고, 해당 유저를 신고한 유저들을 한 명씩 넣는다<br>그리고 연산 끝에 한 번에 정지된 이용자를 정리한다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;&#125;</span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">id_list, report, k</span>):</span><br><span class="line">    answer = []</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        score[<span class="built_in">id</span>] =[]</span><br><span class="line">        result[<span class="built_in">id</span>]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> rp <span class="keyword">in</span> report:</span><br><span class="line">        gUser,bUser = rp.split()</span><br><span class="line">        score[bUser].append(gUser)</span><br><span class="line">        score[bUser] = <span class="built_in">list</span>(<span class="built_in">set</span>(score[bUser]))</span><br><span class="line">    <span class="keyword">for</span> sc <span class="keyword">in</span> score.keys():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(score[sc])&gt;=k:</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> score[sc]:</span><br><span class="line">                result[s]+=<span class="number">1</span></span><br><span class="line">    answer = <span class="built_in">list</span>(result.values())</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>확실히 그냥 무지성으로 푸는 것이 아니라 쉬운 문제도 꼼꼼히 봐야 풀 수 있는 문제들이 출제되는구나</li><li>감이 확실히 많이 떨어졌다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>이분 탐색</title>
      <link href="/2022/03/10/algorithm-binarysearch/"/>
      <url>/2022/03/10/algorithm-binarysearch/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="이분-탐색이란-What-is-binary-Search"><a href="#이분-탐색이란-What-is-binary-Search" class="headerlink" title="이분 탐색이란(What is binary Search)"></a>이분 탐색이란(What is binary Search)</h2><p>이분 탐색은 __정렬된 배열__에서 중앙값과 비교하여 목표값을 찾는 알고리즘이다.</p><p>목표 값을 중앙값(Mid)과 비교하여,중앙값보다 목표값이 작거나 크다면 범위를 중앙 값 기준으로 범위를 절반 제한하며 탐색한다.</p><p>길이 15이고, 인덱스와 배열의 값이 같은 배열에서 이분 탐색을 하는 상황을 가정해보자(편의상 배열의 중앙 값은 Mid, 시작은 start, 끝은 end다.)<br>start의 인덱스는 0, end는 14이다. Mid는 (0+14)2인 7이다.</p><p>우리가 찾고 싶은 값은 3이다.<br>3은 mid 7보다 작으므로, 중앙값 기준으로 왼쪽에 있으며, 중앙 값의 오른편은 값이 없음을 신뢰할 수 있다.<br>이 때 왼 편을 기준으로 다시 이분 탐색을 한다.<br>start는 0,end는 (mid-1)인 6, 새로운 mid는 (0+6)&#x2F;3이다.<br>그 후 다시 3을 찾을 때까지 이분 탐색을 반복한다.</p><p>이분 탐색의 핵심은 중앙 값을 이용해 검색 범위를 줄여나가는 것이다.</p><p>이분 탐색의 시간 복잡도는 최대 성능 O(1), 최악 성능은 O(log2 n)이며, 평균 성능은 O(log n)이다.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><p>아래 코드는 aList에 이분 탐색을 하여 값을 있으면 1, 없으면 0을 반환한다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bnSearch</span>(<span class="params">num:<span class="built_in">int</span>,aList:<span class="built_in">list</span></span>):</span><br><span class="line">    start=<span class="number">0</span></span><br><span class="line">    end=<span class="built_in">len</span>(aList)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(start&lt;=end):</span><br><span class="line">        mid = <span class="built_in">int</span>((start+end)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(num&gt;aList[mid]):</span><br><span class="line">            start = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span>(num&lt;aList[mid]):</span><br><span class="line">            end=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span>(num==aList[mid]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">Wikipedia_binarySearch</a><br><a href="https://sirzzang.github.io/programming/Programming-Binary-Search/">[알고리즘] 이분탐색</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1003 피보나치 함수</title>
      <link href="/2022/03/10/algorithm-boj1003/"/>
      <url>/2022/03/10/algorithm-boj1003/</url>
      
        <content type="html"><![CDATA[<h1 id="백준-1003-피보나치-함수"><a href="#백준-1003-피보나치-함수" class="headerlink" title="백준 1003 피보나치 함수"></a>백준 1003 피보나치 함수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>피보나치 수열의 0과 1의 갯수를 구해서 출력하는 문제이다</p><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다.</p><p>각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># fibo(n) = fibo(n-2) + fibo(n-1)</span></span><br><span class="line">zdp = [<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">odp = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">41</span>):</span><br><span class="line">    zdp.append(zdp[i-<span class="number">2</span>]+zdp[i-<span class="number">1</span>])</span><br><span class="line">    odp.append(odp[i-<span class="number">2</span>]+odp[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;zdp[num]&#125;</span> <span class="subst">&#123;odp[num]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>0과 1의 갯수를 따로 계산해서 출력하면 된다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1012 유기농 배추</title>
      <link href="/2022/03/10/algorithm-boj1012/"/>
      <url>/2022/03/10/algorithm-boj1012/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1012-유기농-배추"><a href="#백준-1012-유기농-배추" class="headerlink" title="백준 1012 유기농 배추"></a>백준 1012 유기농 배추</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다. 한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.</p><p>한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다. 예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다. 0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">t = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">dx = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">dy = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">mp,a,b</span>):</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((a,b))</span><br><span class="line">    mp[a][b]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        x,y=queue.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            nx=x+dx[i]</span><br><span class="line">            ny=y+dy[i]</span><br><span class="line">            <span class="keyword">if</span> nx&lt;<span class="number">0</span> <span class="keyword">or</span> nx&gt;=n <span class="keyword">or</span> ny &lt;<span class="number">0</span> <span class="keyword">or</span> ny&gt;= m:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> mp[nx][ny]==<span class="number">1</span>:</span><br><span class="line">                mp[nx][ny]=<span class="number">0</span></span><br><span class="line">                queue.append((nx,ny))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    n,m,k = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    mp = [[<span class="number">0</span>]*m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        x,y = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">        mp[x][y]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> mp[a][b]==<span class="number">1</span>:</span><br><span class="line">                bfs(mp, a, b)</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><p>맵을 (0,0)부터 순환하면서 1을 만나면, 주변을 탐색해서 연결된 1을 다 제거하고 카운트를 센다.</p><p>bfs 문제를 많이 안풀어봐서 벡터를 사용하면 되겠거니 했는데, 아이디어는 맞았는데 지렁이를 잘못 세었다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1074 Z</title>
      <link href="/2022/03/10/algorithm-boj1074/"/>
      <url>/2022/03/10/algorithm-boj1074/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1074-Z"><a href="#백준-1074-Z" class="headerlink" title="백준 1074 Z"></a>백준 1074 Z</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>한수는 크기가 2N × 2N인 2차원 배열을 Z모양으로 탐색하려고 한다. 예를 들어, 2×2배열을 왼쪽 위칸, 오른쪽 위칸, 왼쪽 아래칸, 오른쪽 아래칸 순서대로 방문하면 Z모양이다.</p><p>N &gt; 1인 경우, 배열을 크기가 2N-1 × 2N-1로 4등분 한 후에 재귀적으로 순서대로 방문한다.<br>N이 주어졌을 때, r행 c열을 몇 번째로 방문하는지 출력하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">N,r,c = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> N!=<span class="number">0</span>:</span><br><span class="line">    N-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">2</span>**N <span class="keyword">and</span> c&lt;<span class="number">2</span>**N:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> r&lt;<span class="number">2</span>**N <span class="keyword">and</span> c&gt;=<span class="number">2</span>**N:</span><br><span class="line">        ans +=(<span class="number">2</span>**N)*(<span class="number">2</span>**N)*<span class="number">1</span></span><br><span class="line">        c-=(<span class="number">2</span>**N)</span><br><span class="line">    <span class="keyword">elif</span> r&gt;=<span class="number">2</span> **N <span class="keyword">and</span> c&lt;<span class="number">2</span>**N:</span><br><span class="line">        ans+=(<span class="number">2</span>**N)*(<span class="number">2</span>**N)*<span class="number">2</span></span><br><span class="line">        r-=(<span class="number">2</span>**N)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans+=(<span class="number">2</span>**N)*(<span class="number">2</span>**N)*<span class="number">3</span></span><br><span class="line">        r-=(<span class="number">2</span>**N)</span><br><span class="line">        c-=(<span class="number">2</span>**N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p><a href="https://ggasoon2.tistory.com/11">이 블로그</a>를 참고했습니다. 꽤나 까다로운 문제였습니다.</p><p>분할과 재귀 문제라는데 머리론 이해가 되는데 구현을 못하는 상황에 직면했습니다.</p><p>문제는 말 그대로 쪼개면 됩니다. N 크기의 맵에서 어느 사분면에 해당하는지 찾은 후 쪼갠 맵에서 다시 어느 사분면에 해당하는지 찾습니다.</p><p>복습이 필요한 문제이다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 10820 문자열 분석</title>
      <link href="/2022/03/10/algorithm-boj10820/"/>
      <url>/2022/03/10/algorithm-boj10820/</url>
      
        <content type="html"><![CDATA[<!--튜토리얼, 하우 투 가이드, 설명 ,레퍼런스https://documentation.divio.com/tutorials/--><h1 id="백준-10820-문자열-분석"><a href="#백준-10820-문자열-분석" class="headerlink" title="백준 10820 문자열 분석"></a>백준 10820 문자열 분석</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>문자열 N개가 주어진다. 이때, 문자열에 포함되어 있는 소문자, 대문자, 숫자, 공백의 개수를 구하는 프로그램을 작성하시오.</p><p>각 문자열은 알파벳 소문자, 대문자, 숫자, 공백으로만 이루어져 있다.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄부터 N번째 줄까지 문자열이 주어진다. (1 ≤ N ≤ 100) 문자열의 길이는 100을 넘지 않는다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫째 줄부터 N번째 줄까지 각각의 문자열에 대해서 소문자, 대문자, 숫자, 공백의 개수를 공백으로 구분해 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>대소문자,공백, 숫자를 카운트하는건 어렵지 않았다. EOF 처리랑 문자열을 어떻게 만질것인가가 관건이다.</p><p>문제 풀 때 rstrip()을 무심코 사용했었는데 그래서 틀릴 뻔 했다.</p><h4 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip()"></a>rstrip()</h4><p><a href="https://www.w3schools.com/python/ref_string_rstrip.asp">rstrip()</a>은 인자로 주어지는 문자를 문자열에서 모두 지우는 메소드이다.<br>기본적으로 아무것도 주어지지 않으면 문자열의 끝(개행문자)와 공백을 지운다.</p><h3 id="핵심-아이디어"><a href="#핵심-아이디어" class="headerlink" title="핵심 아이디어"></a>핵심 아이디어</h3><ul><li>EOF 처리를 어떻게 할 것인가?</li></ul><p>문자열이 얼마나 들어올지 알려주지 않기 때문에 try 문을 이용해 EOF 예외 처리를 했다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">except</span> EOFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>그리고 입력된 문자열이 존재하는지 확인해서 없을 경우 while문을 멈추게 했다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = sys.stdin.readline().rstrip(<span class="string">&#x27;\n)</span></span><br><span class="line"><span class="string">if not s:</span></span><br><span class="line"><span class="string">  break</span></span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">    small,big,number,space=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> val.isupper():</span><br><span class="line">            big+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> val.islower():</span><br><span class="line">            small+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> val == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            space+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> val.isdigit():</span><br><span class="line">            number+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;small&#125;</span> <span class="subst">&#123;big&#125;</span> <span class="subst">&#123;number&#125;</span> <span class="subst">&#123;space&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = sys.stdin.readline().rstrip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans = fun(s)</span><br><span class="line">            <span class="keyword">if</span> ans ==-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11047 동전 0</title>
      <link href="/2022/03/10/algorithm-boj11047/"/>
      <url>/2022/03/10/algorithm-boj11047/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="동전-0"><a href="#동전-0" class="headerlink" title="동전 0"></a>동전 0</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.</p><p>동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n,k = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">coins=[<span class="built_in">int</span>(sys.stdin.readline()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> coins[i]&gt;k:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cnt+=k//coins[i]</span><br><span class="line">    k%=coins[i]</span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11279 최대 힙</title>
      <link href="/2022/03/10/algorithm-boj11279/"/>
      <url>/2022/03/10/algorithm-boj11279/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-11279-최대-힙"><a href="#백준-11279-최대-힙" class="headerlink" title="백준 11279 최대 힙"></a>백준 11279 최대 힙</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>널리 잘 알려진 자료구조 중 최대 힙이 있다. 최대 힙을 이용하여 다음과 같은 연산을 지원하는 프로그램을 작성하시오.</p><p>배열에 자연수 x를 넣는다.<br>배열에서 가장 큰 값을 출력하고, 그 값을 배열에서 제거한다.<br>프로그램은 처음에 비어있는 배열에서 시작하게 된다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열에 자연수를 x를 넣는다</span></span><br><span class="line"><span class="comment"># 배열에서 가장 큰 값을 출력하고 그 값을 배열에서 제거한다</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">l = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    t= <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(heapq.heappop(l)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappush(l, (-t,t))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>파이썬의 heapq 라이브러리는 최솟 값만 정렬한다.<br>그래서 맥스 heap을 구하려면 위의 코드처럼 트릭을 써야한다.</p><p>값을 음수로 넣어서 정렬하면 최댓 값이 최솟 값이 되는 원리이다</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11286 절댓값 힙</title>
      <link href="/2022/03/10/algorithm-boj11286/"/>
      <url>/2022/03/10/algorithm-boj11286/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-11286-절댓값-힙"><a href="#백준-11286-절댓값-힙" class="headerlink" title="백준 11286 절댓값 힙"></a>백준 11286 절댓값 힙</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>절댓값 힙은 다음과 같은 연산을 지원하는 자료구조이다.</p><p>배열에 정수 x (x ≠ 0)를 넣는다.<br>배열에서 절댓값이 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다. 절댓값이 가장 작은 값이 여러개일 때는, 가장 작은 수를 출력하고, 그 값을 배열에서 제거한다.<br>프로그램은 처음에 비어있는 배열에서 시작하게 된다.</p><p>입력에서 0이 주어진 회수만큼 답을 출력한다. 만약 배열이 비어 있는 경우인데 절댓값이 가장 작은 값을 출력하라고 한 경우에는 0을 출력하면 된다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">heap=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    num=<span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="keyword">if</span> num ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> heap:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(heapq.heappop(heap)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappush(heap,(<span class="built_in">abs</span>(num),num))</span><br></pre></td></tr></table></figure><p>heapq 라이브러리를 사용하면 간단하게 풀 수 있다.<br>다른 최소 힙, 최대 힙 문제와 똑같이 튜플로 값을 대입하여 우선순위를 지정한다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11403 경로 찾기</title>
      <link href="/2022/03/10/algorithm-boj11403/"/>
      <url>/2022/03/10/algorithm-boj11403/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-11403-경로-찾기"><a href="#백준-11403-경로-찾기" class="headerlink" title="백준 11403 경로 찾기"></a>백준 11403 경로 찾기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>가중치 없는 방향 그래프 G가 주어졌을 때, 모든 정점 (i, j)에 대해서, i에서 j로 가는 경로가 있는지 없는지 구하는 프로그램을 작성하시오.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 정점의 개수 N (1 ≤ N ≤ 100)이 주어진다. 둘째 줄부터 N개 줄에는 그래프의 인접 행렬이 주어진다. i번째 줄의 j번째 숫자가 1인 경우에는 i에서 j로 가는 간선이 존재한다는 뜻이고, 0인 경우는 없다는 뜻이다. i번째 줄의 i번째 숫자는 항상 0이다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>총 N개의 줄에 걸쳐서 문제의 정답을 인접행렬 형식으로 출력한다. 정점 i에서 j로 가는 경로가 있으면 i번째 줄의 j번째 숫자를 1로, 없으면 0으로 출력해야 한다</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">mp=[<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">nodes=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mp)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mp[i])):</span><br><span class="line">        <span class="keyword">if</span> mp[i][j]==<span class="number">1</span>:</span><br><span class="line">            nodes[i].append(j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">node</span>):</span><br><span class="line">    q=deque()</span><br><span class="line">    visited=[<span class="literal">False</span>]*n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nodes[node]:</span><br><span class="line">        q.append(i)</span><br><span class="line">        visited[i]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x=q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nodes[x]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                visited[i]=<span class="literal">True</span></span><br><span class="line">                mp[node][x]=<span class="number">1</span></span><br><span class="line">                q.append(i)</span><br><span class="line">                nodes[node].append(i)</span><br><span class="line">                mp[node][i]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    bfs(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> mp:</span><br><span class="line">    <span class="built_in">print</span>(*m)</span><br></pre></td></tr></table></figure><p>초기에 연결된 연결된 노드들을 추가한다. ( 방향 그래프임을 유의할 것)<br>이미 연결된 노드들을 visited 체크하고, q에 넣어 연결된 노드들이 또 연결된 노드를 찾는다.</p><p>시간 복잡도를 줄이기 위해 중간 중간 맵 변환해주는 것도 잊지 말자</p><h3 id="꼭-잊지-말자"><a href="#꼭-잊지-말자" class="headerlink" title="꼭 잊지 말자"></a>꼭 잊지 말자</h3><ul><li>BFS 문제의 경우 순완 오류에 빠지거나 검색 범위가 너무 넓어질 수 있으니, visited 처럼 갔는지 체크하자</li><li>매개 변수와 베이스 케이스를 명확히 하자</li></ul><h3 id="잘한-점"><a href="#잘한-점" class="headerlink" title="잘한 점"></a>잘한 점</h3><ul><li>답지를 보지 않고 문제를 풀었다.<ul><li>내가 만든 내 풀이!</li></ul></li><li>문제를 차근차근 읽어서 처음에 헤매지 않음</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1149 RGB 거리</title>
      <link href="/2022/03/10/algorithm-boj1149/"/>
      <url>/2022/03/10/algorithm-boj1149/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1149-RGB-거리"><a href="#백준-1149-RGB-거리" class="headerlink" title="백준 1149 RGB 거리"></a>백준 1149 RGB 거리</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.</p><p>집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.</p><p>1번 집의 색은 2번 집의 색과 같지 않아야 한다.<br>N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.<br>i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">dp = [[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">numbers=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    numbers.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())))</span><br><span class="line">dp[<span class="number">0</span>]=numbers[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    dp[i][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>])+numbers[i][<span class="number">0</span>]</span><br><span class="line">    dp[i][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>])+numbers[i][<span class="number">1</span>]</span><br><span class="line">    dp[i][<span class="number">2</span>]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">0</span>])+numbers[i][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(dp[n-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11724 연결 요소 개수</title>
      <link href="/2022/03/10/algorithm-boj11724/"/>
      <url>/2022/03/10/algorithm-boj11724/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-11724-연결-요소-개수"><a href="#백준-11724-연결-요소-개수" class="headerlink" title="백준 11724 연결 요소 개수"></a>백준 11724 연결 요소 개수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.</p><p>첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)&#x2F;2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>문제 푸는 흐름은 맞는데 BFS와 DFS 개념이 아직 덜 잡힌 것 같다.</p><h3 id="DFS-풀이"><a href="#DFS-풀이" class="headerlink" title="DFS 풀이"></a>DFS 풀이</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">nodes = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">nodes[<span class="number">0</span>]=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">check = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    node1,node2 = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    nodes[node1].append(node2)</span><br><span class="line">    nodes[node2].append(node1)</span><br><span class="line">    nodes[node1].sort()</span><br><span class="line">    nodes[node2].sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">start</span>):</span><br><span class="line">    check[start]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nodes[start]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">            dfs(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> check[i] == <span class="literal">False</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        dfs(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><h3 id="BFS-풀이"><a href="#BFS-풀이" class="headerlink" title="BFS 풀이"></a>BFS 풀이</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># 방향 없는 그래프가 주어졌을 때, 연결 요소 개수 세는 법</span></span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line">nodes = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">check = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    node1, node2 = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line">    nodes[node1].append(node2)</span><br><span class="line">    nodes[node2].append(node1)</span><br><span class="line">    nodes[node1].sort()</span><br><span class="line">    nodes[node2].sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">node</span>):</span><br><span class="line">    check[node] == <span class="literal">True</span></span><br><span class="line">    q = deque([node])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        v = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nodes[v]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">                check[i] = <span class="literal">True</span></span><br><span class="line">                q.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        bfs(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 11659 구간 합 구하기 4</title>
      <link href="/2022/03/10/algorithm-boj11659/"/>
      <url>/2022/03/10/algorithm-boj11659/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-11659-구간-합-구하기-4"><a href="#백준-11659-구간-합-구하기-4" class="headerlink" title="백준 11659 구간 합 구하기 4"></a>백준 11659 구간 합 구하기 4</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수 N개가 주어졌을 때, i번째 수부터 j번째 수까지 합을 구하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split()))</span><br><span class="line">sums = [<span class="number">0</span>,numbers[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(numbers)+<span class="number">1</span>):</span><br><span class="line">    sums.append(sums[num-<span class="number">1</span>]+numbers[num-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    start,end=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    <span class="built_in">print</span>(sums[end]-sums[start-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>간단한 문제인데, 계속 시간 초과가 나왔었다.<br>구간 합을 구할 때마다 계속 반복되는 연산이 많아 그런거라, 합을 미리 구해 빼서 해결하였다</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1260 DFS와 BFS</title>
      <link href="/2022/03/10/algorithm-boj1260/"/>
      <url>/2022/03/10/algorithm-boj1260/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1260-DFS와-BFS"><a href="#백준-1260-DFS와-BFS" class="headerlink" title="백준 1260 DFS와 BFS"></a>백준 1260 DFS와 BFS</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n,m,v =<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">nodes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">check = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    node1,node2 = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    nodes[node1].append(node2)</span><br><span class="line">    nodes[node2].append(node1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    nodes[i].sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">v</span>):</span><br><span class="line">    check[v]=<span class="literal">True</span></span><br><span class="line">    q = deque([v])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node=q.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nodes[node]:</span><br><span class="line">            <span class="keyword">if</span> check[i]==<span class="literal">False</span>:</span><br><span class="line">                q.append(i)</span><br><span class="line">                check[i]=<span class="literal">True</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="built_in">print</span>(v,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    check[v]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nodes[v]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">            dfs(i)</span><br><span class="line"></span><br><span class="line">dfs(v)</span><br><span class="line">check=[<span class="literal">False</span>]*(n+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">bfs(v)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1303 전쟁 - 전투</title>
      <link href="/2022/03/10/algorithm-boj1303/"/>
      <url>/2022/03/10/algorithm-boj1303/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1303-전쟁-전투"><a href="#백준-1303-전쟁-전투" class="headerlink" title="백준 1303 전쟁 - 전투"></a>백준 1303 전쟁 - 전투</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N,M = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">mp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    mp.append(<span class="built_in">list</span>(sys.stdin.readline().rstrip()))</span><br><span class="line"></span><br><span class="line">visited=[[<span class="literal">False</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)]</span><br><span class="line">W, B = [], []</span><br><span class="line">dx, dy = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">x, y</span>):</span><br><span class="line">    q = deque([(x, y)])</span><br><span class="line">    color = mp[x][y]</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x, y = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            nx,ny=x+dx[i],y+dy[i]</span><br><span class="line">            <span class="keyword">if</span> nx&lt;<span class="number">0</span> <span class="keyword">or</span> ny&lt;<span class="number">0</span> <span class="keyword">or</span> nx&gt;=M <span class="keyword">or</span> ny&gt;=N:</span><br><span class="line">                <span class="keyword">continue</span>    </span><br><span class="line">            <span class="keyword">if</span> color==mp[nx][ny] <span class="keyword">and</span> visited[nx][ny]==<span class="literal">False</span>:</span><br><span class="line">                visited[nx][ny]=<span class="literal">True</span></span><br><span class="line">                q.append((nx,ny))</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">        count=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> color==<span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">        W.append(count)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        B.append(count)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visited[i][j]:</span><br><span class="line">            bfs(i, j)</span><br><span class="line"></span><br><span class="line">answer=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (W,B):</span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        ans+=j**<span class="number">2</span></span><br><span class="line">    answer.append(ans)</span><br><span class="line"><span class="built_in">print</span>(*answer)</span><br></pre></td></tr></table></figure><ul><li>졸린 관계로 식이 좀 더럽다</li><li>계속 왜 틀렸나 했는데 visited를 만들 때 가로와 세로를 헷갈렸다.</li></ul><p>다음엔 좀 더 신경 써야 할 것</p><ol><li>따로 리스트를 선언해서 간 곳을 체크하라</li></ol><ul><li>괜히 복잡해져서 헷갈리느니, 그냥 체크하자</li></ul><ol start="2"><li>디버깅할 때 값이 제대로 입력 되는지 확인하자</li></ol><p>이런 유형의 bfs 문제는 간 곳을 체크해서 카운트만 하면 되기 때문에 자주 문제를 풀어서 익숙해지도록 하자</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1373 2진수 8진수</title>
      <link href="/2022/03/10/algorithm-boj1373/"/>
      <url>/2022/03/10/algorithm-boj1373/</url>
      
        <content type="html"><![CDATA[<!--튜토리얼, 하우 투 가이드, 설명 ,레퍼런스https://documentation.divio.com/tutorials/--><h1 id="백준-1373-2진수-8진수"><a href="#백준-1373-2진수-8진수" class="headerlink" title="백준 1373 2진수 8진수"></a>백준 1373 2진수 8진수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>2진수가 주어졌을 때, 8진수로 변환하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>파이썬에서는 내장 함수로 8진수 변환 함수인 oct가 존재한다.<br>또한 int()의 경우 매개 변수를 이용해서 2진수로 표현할 수 있다.</p><p>int(input(),2)는 입력 받은 십진수를 2진수로 바꿔준다.</p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="built_in">int</span>(<span class="built_in">input</span>(),<span class="number">2</span>))[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1389 케빈 베이컨의 6단계 법칙</title>
      <link href="/2022/03/10/algorithm-boj1389/"/>
      <url>/2022/03/10/algorithm-boj1389/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1389-케빈-베이컨의-6단계-법칙"><a href="#백준-1389-케빈-베이컨의-6단계-법칙" class="headerlink" title="백준 1389 케빈 베이컨의 6단계 법칙"></a>백준 1389 케빈 베이컨의 6단계 법칙</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>BOJ 유저의 수와 친구 관계가 입력으로 주어졌을 때, 케빈 베이컨의 수가 가장 작은 사람을 구하는 프로그램을 작성하시오.</p><p>첫째 줄에 유저의 수 N (2 ≤ N ≤ 100)과 친구 관계의 수 M (1 ≤ M ≤ 5,000)이 주어진다.<br>둘째 줄부터 M개의 줄에는 친구 관계가 주어진다. 친구 관계는 A와 B로 이루어져 있으며, A와 B가 친구라는 뜻이다.<br>A와 B가 친구이면, B와 A도 친구이며, A와 B가 같은 경우는 없다.<br>친구 관계는 중복되어 들어올 수도 있으며, 친구가 한 명도 없는 사람은 없다.<br>모든 사람은 친구 관계로 연결되어져 있다.<br>사람의 번호는 1부터 N까지이며, 두 사람이 같은 번호를 갖는 경우는 없다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">n,m= <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line"></span><br><span class="line">persons = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">kebin = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">    p1,p2 = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">    persons[p1].append(p2)</span><br><span class="line">    persons[p2].append(p1)</span><br><span class="line">    persons[p1].sort()</span><br><span class="line">    persons[p2].sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">person</span>):</span><br><span class="line">    q = deque([person])</span><br><span class="line">    check,count=[],[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x=q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> persons[x]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> check:</span><br><span class="line">                count[i]=count[x]+<span class="number">1</span></span><br><span class="line">                check.append(i)</span><br><span class="line">                q.append(i)</span><br><span class="line">    kebin[person]=<span class="built_in">sum</span>(count)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    bfs(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kebin.index(<span class="built_in">min</span>(kebin[<span class="number">1</span>:])))</span><br></pre></td></tr></table></figure><ul><li>노드(친구)를 거칠 때마다 해당 노드의 count를 세서 저장하고, 리스트 kebin에 합을 저장한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1463 1로 만들기</title>
      <link href="/2022/03/10/algorithm-boj1463/"/>
      <url>/2022/03/10/algorithm-boj1463/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1463-1로-만들기"><a href="#백준-1463-1로-만들기" class="headerlink" title="백준 1463 1로 만들기"></a>백준 1463 1로 만들기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.</p><p>X가 3으로 나누어 떨어지면, 3으로 나눈다.<br>X가 2로 나누어 떨어지면, 2로 나눈다.<br>1을 뺀다.<br>정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li><p>그리디 알고리즘 문제가 아니다<br> 10의 경우 10 - 9 - 3 - 1 로 3번 만에 만든다<br> 그리디 알고리즘 문제라면 10 - 5 - 4 - 2 - 1 로 4번 시도해야한다<br> 그리디 알고리즘으로 풀 경우의 해가 유효성이 검증되지 못했다.</p></li><li><p>메모제이션 기법을 사용한다<br> 10 - 9 - 3 - 1로 10의 해를 구한다.<br> 이 때 3은 (1을 구하는 횟수 + 1), 9는 (3을 구하는 횟수 + 1)이 성립한다<br> 주어질 숫자의 최소 횟수를 아래서부터 계속 만들어가면, 최솟 값을 구할 수 있다.</p></li></ul><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">dp = [<span class="number">0</span>]*(num+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,num+<span class="number">1</span>):</span><br><span class="line">    dp[i]=dp[i-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line">        dp[i] = <span class="built_in">min</span>(dp[i],dp[i//<span class="number">2</span>]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">3</span> ==<span class="number">0</span>:</span><br><span class="line">        dp[i] = <span class="built_in">min</span>(dp[i],dp[i//<span class="number">3</span>]+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(dp[num])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1541 잃어버린 괄호</title>
      <link href="/2022/03/10/algorithm-boj1541/"/>
      <url>/2022/03/10/algorithm-boj1541/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1541-잃어버린-괄호"><a href="#백준-1541-잃어버린-괄호" class="headerlink" title="백준 1541 잃어버린 괄호"></a>백준 1541 잃어버린 괄호</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>세준이는 양수와 +, -, 그리고 괄호를 가지고 식을 만들었다. 그리고 나서 세준이는 괄호를 모두 지웠다.</p><p>그리고 나서 세준이는 괄호를 적절히 쳐서 이 식의 값을 최소로 만들려고 한다.</p><p>괄호를 적절히 쳐서 이 식의 값을 최소로 만드는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">sen =sys.stdin.readline().rstrip()</span><br><span class="line">sentence = deque([i <span class="keyword">for</span> i <span class="keyword">in</span> sen])</span><br><span class="line">numbers,op=[],[]</span><br><span class="line"></span><br><span class="line">temp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> sentence:</span><br><span class="line">    x = sentence.popleft()</span><br><span class="line">    <span class="keyword">if</span> <span class="number">48</span>&lt;=<span class="built_in">ord</span>(x)&lt;=<span class="number">57</span>:</span><br><span class="line">        temp+=x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        numbers.append(<span class="built_in">int</span>(temp))</span><br><span class="line">        temp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        op.append(x)</span><br><span class="line">numbers.append(<span class="built_in">int</span>(temp))</span><br><span class="line"></span><br><span class="line">op=deque(op)</span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line">res,idx=<span class="number">0</span>,<span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(op)):</span><br><span class="line">    <span class="keyword">if</span> op[i]==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        idx=i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> idx==<span class="number">9999</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(numbers))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>(numbers[<span class="number">0</span>:idx+<span class="number">1</span>])-<span class="built_in">sum</span>(numbers[idx+<span class="number">1</span>:<span class="built_in">len</span>(numbers)]))</span><br></pre></td></tr></table></figure><ul><li>문제를 똑바로 읽을 것</li><li>생각을 좀 더 깊이 할 것</li></ul><p>괄호를 쳐서 이 식의 값을 최소로 만들려면, -가 등장한 후 모든 값이 음수가 되면 된다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 15654 N과 M (5)</title>
      <link href="/2022/03/10/algorithm-boj15654/"/>
      <url>/2022/03/10/algorithm-boj15654/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-15654-N과-M-5"><a href="#백준-15654-N과-M-5" class="headerlink" title="백준 15654 N과 M (5)"></a>백준 15654 N과 M (5)</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.</p><p>N개의 자연수 중에서 M개를 고른 수열</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line">N,M=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split()))</span><br><span class="line">numbers.sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> permutations(numbers, M):</span><br><span class="line">    <span class="built_in">print</span>(*n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1697 숨바꼭질</title>
      <link href="/2022/03/10/algorithm-boj1697/"/>
      <url>/2022/03/10/algorithm-boj1697/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1697-숨바꼭질"><a href="#백준-1697-숨바꼭질" class="headerlink" title="백준 1697 숨바꼭질"></a>백준 1697 숨바꼭질</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.</p><p>수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.</p><p>첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>bfs 개념을 직접 문제에 적용해본 적이 없어서, 그걸로 어떻게 문제를 푼다는거지? 했었다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n,k = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">MAX=<span class="number">100000</span></span><br><span class="line">clock = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MAX+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">n</span>):</span><br><span class="line">    q= deque([n])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x=q.popleft()</span><br><span class="line">        <span class="keyword">if</span> x==k:</span><br><span class="line">            <span class="keyword">return</span> clock[x]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (x-<span class="number">1</span>,x+<span class="number">1</span>,x*<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=i &lt;=MAX <span class="keyword">and</span> <span class="keyword">not</span> clock[i]:</span><br><span class="line">                clock[i]=clock[x]+<span class="number">1</span></span><br><span class="line">                q.append(i)</span><br><span class="line"><span class="built_in">print</span>(bfs(n))</span><br></pre></td></tr></table></figure><p>수빈이의 처음 위치를 x라 하자. 수빈이는 x-1, x<em>2, x+1로 이동할 수 있다.<br>수빈이는 각각의 값에 대해 다시 또 x-1, x</em>2, x+1로 이동할 수 있다.</p><p>큐에 수빈이의 처음 위치를 넣은 후 반복문이 1회 돌 때마다 카운트한다.(시간 초를 세기 위해서이다)<br>차례차례 다음 회차의 노드들을 큐에 넣은 후 하나하나 동생의 위치와 비교한다</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1699 제곱수의 합</title>
      <link href="/2022/03/10/algorithm-boj1699/"/>
      <url>/2022/03/10/algorithm-boj1699/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1699-제곱수의-합"><a href="#백준-1699-제곱수의-합" class="headerlink" title="백준 1699 제곱수의 합"></a>백준 1699 제곱수의 합</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>어떤 자연수 N은 그보다 작거나 같은 제곱수들의 합으로 나타낼 수 있다. 예를 들어 11&#x3D;32+12+12(3개 항)이다. 이런 표현방법은 여러 가지가 될 수 있는데, 11의 경우 11&#x3D;2^2+2^2+1^2+1^2+1^2(5개 항)도 가능하다. 이 경우, 수학자 소크라테스는 “11은 3개 항의 제곱수 합으로 표현할 수 있다.”라고 말한다. 또한 11은 그보다 적은 항의 제곱수 합으로 표현할 수 없으므로, 11을 그 합으로써 표현할 수 있는 제곱수 항의 최소 개수는 3이다.</p><p>주어진 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소개수를 구하는 프로그램을 작성하시오</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>처음 문제를 접근할 땐 주어진 숫자보다 작은 가장 큰 제곱 수부터 차례대로 구하면서 풀었다.<br>하지만 가장 큰 제곱 수부터 차례대로 구하는 방식이 항의 갯수를 최소한으로 한단 보장을 하지 못한다.<br>즉 DP 문제이다.</p><h3 id="핵심"><a href="#핵심" class="headerlink" title="핵심"></a>핵심</h3><p>아래는 1부터 7까지의 최소 제곱 항의 수이다.</p><p>|1|2|3|4|5|6|7|<br>|—|—|—|——|—|—|—|—|—|<br>|1|2|3|1|2|3|4|4|</p><p>1~3까지는 1의 합으로 최소 항을 구할 수 있다.<br>2는 1+1이다. 이는 dp[1]+1이다.<br>3은 1+1+1이다. 이는 dp[2]+1<br>4는 1+1+1+1, 2^2로 나타낼 수 있다. 이는 dp[0]+1 또는 dp[3]+1이다.</p><p>즉 dp[i]는 dp[i-n^2]+1 들의 최솟 값이다. (n은 주어진 숫자의 1&#x2F;2 제곱 수)</p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">dp = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,num+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">pow</span> = <span class="built_in">int</span>(i**<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">pow</span>+<span class="number">1</span>):</span><br><span class="line">        dp[i]=<span class="built_in">min</span>(dp[i],dp[i-j*j]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp[num])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 17219 비밀번호 찾기</title>
      <link href="/2022/03/10/algorithm-boj17219/"/>
      <url>/2022/03/10/algorithm-boj17219/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>첫째 줄에 저장된 사이트 주소의 수 N(1 ≤ N ≤ 100,000)과 비밀번호를 찾으려는 사이트 주소의 수 M(1 ≤ M ≤ 100,000)이 주어진다.</p><p>두번째 줄부터 N개의 줄에 걸쳐 각 줄에 사이트 주소와 비밀번호가 공백으로 구분되어 주어진다. 사이트 주소는 알파벳 소문자, 알파벳 대문자, 대시(‘-‘), 마침표(‘.’)로 이루어져 있고, 중복되지 않는다. 비밀번호는 알파벳 대문자로만 이루어져 있다. 모두 길이는 최대 20자이다.</p><p>N+2번째 줄부터 M개의 줄에 걸쳐 비밀번호를 찾으려는 사이트 주소가 한줄에 하나씩 입력된다. 이때, 반드시 이미 저장된 사이트 주소가 입력된다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫 번째 줄부터 M개의 줄에 걸쳐 비밀번호를 찾으려는 사이트 주소의 비밀번호를 차례대로 각 줄에 하나씩 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    web,key = <span class="built_in">map</span>(<span class="built_in">str</span>,sys.stdin.readline().rstrip().split())</span><br><span class="line">    dic[web] = key</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    w = sys.stdin.readline().rstrip()</span><br><span class="line">    <span class="built_in">print</span>(dic[w])</span><br></pre></td></tr></table></figure><p>딕셔너리를 사용하면 간단하게 풀 수 있는 문제이다</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 17299 오등큰수</title>
      <link href="/2022/03/10/algorithm-boj17299/"/>
      <url>/2022/03/10/algorithm-boj17299/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-17299-오등큰수"><a href="#백준-17299-오등큰수" class="headerlink" title="백준 17299 오등큰수"></a>백준 17299 오등큰수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>크기가 N인 수열 A &#x3D; A1, A2, …, AN이 있다. 수열의 각 원소 Ai에 대해서 오등큰수 NGF(i)를 구하려고 한다.</p><p>Ai가 수열 A에서 등장한 횟수를 F(Ai)라고 했을 때, Ai의 오등큰수는 오른쪽에 있으면서 수열 A에서 등장한 횟수가 F(Ai)보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오등큰수는 -1이다.</p><p>예를 들어, A &#x3D; [1, 1, 2, 3, 4, 2, 1]인 경우 F(1) &#x3D; 3, F(2) &#x3D; 2, F(3) &#x3D; 1, F(4) &#x3D; 1이다. A1의 오른쪽에 있으면서 등장한 횟수가 3보다 큰 수는 없기 때문에, NGF(1) &#x3D; -1이다. A3의 경우에는 A7이 오른쪽에 있으면서 F(A3&#x3D;2) &lt; F(A7&#x3D;1) 이기 때문에, NGF(3) &#x3D; 1이다. NGF(4) &#x3D; 2, NGF(5) &#x3D; 2, NGF(6) &#x3D; 1 이다.</p><p><strong>오등큰수</strong> 란 한 인덱스의 오른 편에 있는 자기보다 등장한 횟수가 큰 수 중 가장 왼쪽에 있는 수이다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>미리 result를 -1로 선언해두고, 딕셔너리에 빈도수를 저장한다.</p><p>주어진 값이 저장된 list인 arr의 값이 스택에 마지막 값의 빈도수를 비교한다.</p><p>스택의 마지막 값의 빈도수가 arr의 값의 빈도수 보다 작다면 arr의 값은 스택에 저장된 값의 오큰수이다.</p><h3 id="핵심-아이디어"><a href="#핵심-아이디어" class="headerlink" title="핵심 아이디어"></a>핵심 아이디어</h3><ul><li>스택에 인덱스를 저장한다</li></ul><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">result = [-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(sys.stdin.readline()))]</span><br><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split()))</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line">stack = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        dic[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr):</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">and</span> dic[arr[stack[-<span class="number">1</span>]]]&lt;dic[s[<span class="number">1</span>]]:</span><br><span class="line">        result[stack.pop()]=s[<span class="number">1</span>]</span><br><span class="line">    stack.append(s[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(*result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1764 듣보잡</title>
      <link href="/2022/03/10/algorithm-boj1764/"/>
      <url>/2022/03/10/algorithm-boj1764/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>김진영이 듣도 못한 사람의 명단과, 보도 못한 사람의 명단이 주어질 때, 듣도 보도 못한 사람의 명단을 구하는 프로그램을 작성하시오.</p><ol><li>첫째 줄에 듣도 못한 사람의 수 N, 보도 못한 사람의 수 M이 주어진다.</li><li>둘재 줄부터 순서대로 듣도 못한 사람과 보도 못한 사람의 이름이 순서대로 입력됨</li></ol><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>듣도 보도 못한 사람의 수와 이름을 출력하라</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line">nset = <span class="built_in">set</span>()</span><br><span class="line">mset = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    nset.add(sys.stdin.readline().rstrip())</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    mset.add(sys.stdin.readline().rstrip())</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">list</span>(nset.intersection(mset))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(result))</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">sorted</span>(result):</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>교집합을 사용하면 쉽게 문제를 풀 수 있을거라 생각했다.<br>각각 공집합을 만들어 원소를 입력하고, 교집합을 구한 후 list로 변환하고 제출하였다</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1780 종이의 개수</title>
      <link href="/2022/03/10/algorithm-boj1780/"/>
      <url>/2022/03/10/algorithm-boj1780/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1780-종이의-개수"><a href="#백준-1780-종이의-개수" class="headerlink" title="백준 1780 종이의 개수"></a>백준 1780 종이의 개수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N×N크기의 행렬로 표현되는 종이가 있다. 종이의 각 칸에는 -1, 0, 1 중 하나가 저장되어 있다. 우리는 이 행렬을 다음과 같은 규칙에 따라 적절한 크기로 자르려고 한다.</p><p>만약 종이가 모두 같은 수로 되어 있다면 이 종이를 그대로 사용한다.<br>(1)이 아닌 경우에는 종이를 같은 크기의 종이 9개로 자르고, 각각의 잘린 종이에 대해서 (1)의 과정을 반복한다.<br>이와 같이 종이를 잘랐을 때, -1로만 채워진 종이의 개수, 0으로만 채워진 종이의 개수, 1로만 채워진 종이의 개수를 구해내는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">x,y,n</span>):</span><br><span class="line"></span><br><span class="line">    num = paper[x][y]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x,x+n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y,y+n):</span><br><span class="line">            <span class="keyword">if</span> (paper[i][j]!=num):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        solve(x+k*n//<span class="number">3</span>, y+l*n//<span class="number">3</span>, n//<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    plus(num)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plus</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> a,b,c</span><br><span class="line">    <span class="keyword">if</span> num ==-<span class="number">1</span>:</span><br><span class="line">        a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> num==<span class="number">0</span>:</span><br><span class="line">        b+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c+=<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">paper = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">a,b,c=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">solve(<span class="number">0</span>,<span class="number">0</span>,N)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> (a,b,c):</span><br><span class="line">    <span class="built_in">print</span>(cnt))</span><br></pre></td></tr></table></figure><ul><li>계속 흐름은 맞는데 조금씩 빗나간다. 이런 유형의 문제를 많이 풀어봐야 해결 될듯하다</li><li><a href="https://www.acmicpc.net/problem/1074">백준 1074</a>도 그렇고 recursion과 분할에 좀 더 집중해야할 듯<br>주어진 종이를 순회하면서 값이 다르다면 9 조각 낸다.<br>만약 종이의 모든 숫자가 같다면 해당 숫자를 카운트한다.</li></ul><h3 id="다음에-이런-문제를-만난다면"><a href="#다음에-이런-문제를-만난다면" class="headerlink" title="다음에 이런 문제를 만난다면?"></a>다음에 이런 문제를 만난다면?</h3><ol><li>분할은 범위 조절이 중요한 문제이다. 그러니 범위를 나타내는 식을 나타낼 것</li><li>for 문이 중첩되는 것을 무서워하지 말자.</li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 18870 좌표 압축</title>
      <link href="/2022/03/10/algorithm-boj18870/"/>
      <url>/2022/03/10/algorithm-boj18870/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-18870-좌표-압축"><a href="#백준-18870-좌표-압축" class="headerlink" title="백준 18870 좌표 압축"></a>백준 18870 좌표 압축</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수직선 위에 N개의 좌표 X1, X2, …, XN이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.</p><p>Xi를 좌표 압축한 결과 X’i의 값은 Xi &gt; Xj를 만족하는 서로 다른 좌표의 개수와 같아야 한다.</p><p>X1, X2, …, XN에 좌표 압축을 적용한 결과 X’1, X’2, …, X’N를 출력해보자.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split()))</span><br><span class="line">sNumbers = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(numbers)))</span><br><span class="line">numDic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    numDic[num]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sNumbers)):</span><br><span class="line">    numDic[sNumbers[i]]=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(numDic[numbers[i]], end=<span class="string">&#x27; &#x27;</span> )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>생각해보니 주어진 숫자들의 중복을 제거하고, 정렬하면 각 인덱스가 자기보다 작은 수의 숫자가 된다.</p><p>-10 -9 1 2 3 처럼 정렬된 상태에서 -10은 0개, -9는 1개식으로 구할 수 있는 것이다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1931 회의실 배정</title>
      <link href="/2022/03/10/algorithm-boj1931/"/>
      <url>/2022/03/10/algorithm-boj1931/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1931-회의실-배정"><a href="#백준-1931-회의실-배정" class="headerlink" title="백준 1931 회의실 배정"></a>백준 1931 회의실 배정</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>처음 풀이는 회의실 배정 한 곳을 체크해서, 간 곳은 안 가고, 바로 이어지는 회의 시간을 이어갈 때마다 카운트하는 방식으로 풀었다.<br>하지만 시간 초과</p><p>문제를 잘못 이해했었다. 꼭 이어질 필요는 없다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">time = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">conference = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(time)]</span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conf</span>(<span class="params">start,end,cnt,check</span>):</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">        <span class="keyword">if</span> check[i]:</span><br><span class="line">            <span class="keyword">if</span> i==time-<span class="number">1</span>:</span><br><span class="line">                count=<span class="built_in">max</span>(count,cnt)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> conference[i][<span class="number">0</span>]==end+<span class="number">1</span>:</span><br><span class="line">            check[i]=<span class="literal">True</span></span><br><span class="line">            conf(conference[i][<span class="number">0</span>], conference[i][<span class="number">1</span>], cnt+<span class="number">1</span>,check)</span><br><span class="line">            check[i]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">    check=[<span class="literal">False</span>]*time</span><br><span class="line">    check[i]=<span class="literal">True</span></span><br><span class="line">    conf(conference[i][<span class="number">0</span>], conference[i][<span class="number">1</span>], <span class="number">1</span>,check)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><p>빨리 끝나는 것 중 빨리 시작하는 순서로 빠르게 집어 넣으면 더 빠르게 답을 구해낼 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">time = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">conference = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(time)]</span><br><span class="line"></span><br><span class="line">conference = <span class="built_in">sorted</span>(conference,key=<span class="keyword">lambda</span> x:[x[<span class="number">1</span>],x[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">mx=<span class="number">0</span></span><br><span class="line">start=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> conference:</span><br><span class="line">    <span class="keyword">if</span> c[<span class="number">0</span>] &gt;= start:</span><br><span class="line">        start= c[<span class="number">1</span>]</span><br><span class="line">        mx+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(mx)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1935 후위 표기식 2</title>
      <link href="/2022/03/10/algorithm-boj1935/"/>
      <url>/2022/03/10/algorithm-boj1935/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1935-후위-표기식-2"><a href="#백준-1935-후위-표기식-2" class="headerlink" title="백준 1935 후위 표기식 2"></a>백준 1935 후위 표기식 2</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>후위 표기식과 각 피연산자에 대응하는 값들이 주어져 있을 때, 그 식을 계산하는 프로그램을 작성하시오.</p><h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 피연산자의 개수(1 ≤ N ≤ 26) 가 주어진다.<br>둘째 줄에는 후위 표기식이 주어진다. (여기서 피연산자는 A~Z의 영대문자이며, A부터 순서대로 N개의 영대문자만이 사용되며, 길이는 100을 넘지 않는다)<br>셋째 줄부터 N+2번째 줄까지는 각 피연산자에 대응하는 값이 주어진다. 3번째 줄에는 A에 해당하는 값, 4번째 줄에는 B에 해당하는값 , 5번째 줄에는 C …이 주어진다, 그리고 피연산자에 대응 하는 값은 100보다 작거나 같은 자연수이다.</p><p>후위 표기식을 앞에서부터 계산했을 때, 식의 결과와 중간 결과가 -20억보다 크거나 같고, 20억보다 작거나 같은 입력만 주어진다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><h3 id="핵심-아이디어"><a href="#핵심-아이디어" class="headerlink" title="핵심 아이디어"></a>핵심 아이디어</h3><ul><li>후위 표기식의 계산 방식을 알고 있는가<ul><li>컴퓨터가 순차적으로 어떻게 계산해 나가도록 할 것인가?</li></ul></li></ul><p>후위 표기식으로 표기를 하게 되면 연산자의 우선순위에 따라 연산자가 피연산자 뒤에 정렬되어 있다.<br>그래서 앞에서 부터 차례대로 스택에 넣고 값을 계산해나가면 된다.</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">exp = <span class="built_in">list</span>(sys.stdin.readline().rstrip())</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="built_in">chr</span>(key+<span class="number">65</span>):<span class="built_in">int</span>(sys.stdin.readline()) <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(num)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> exp:</span><br><span class="line">    <span class="keyword">if</span> s.isalpha():</span><br><span class="line">        stack.append(dic[s])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n1=stack.pop()</span><br><span class="line">        n2=stack.pop()</span><br><span class="line">        <span class="keyword">if</span> s==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            stack.append(n1+n2)</span><br><span class="line">        <span class="keyword">elif</span> s==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            stack.append(n2-n1)</span><br><span class="line">        <span class="keyword">elif</span> s==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            stack.append(n2*n1)</span><br><span class="line">        <span class="keyword">elif</span> s==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            stack.append(n2/n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">F&quot;<span class="subst">&#123;stack[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1992 쿼드 트리</title>
      <link href="/2022/03/10/algorithm-boj1992/"/>
      <url>/2022/03/10/algorithm-boj1992/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1992-쿼드-트리"><a href="#백준-1992-쿼드-트리" class="headerlink" title="백준 1992 쿼드 트리"></a>백준 1992 쿼드 트리</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>흑백 영상을 압축하여 표현하는 데이터 구조로 쿼드 트리(Quad Tree)라는 방법이 있다. 흰 점을 나타내는 0과 검은 점을 나타내는 1로만 이루어진 영상(2차원 배열)에서 같은 숫자의 점들이 한 곳에 많이 몰려있으면, 쿼드 트리에서는 이를 압축하여 간단히 표현할 수 있다.</p><p>주어진 영상이 모두 0으로만 되어 있으면 압축 결과는 “0”이 되고, 모두 1로만 되어 있으면 압축 결과는 “1”이 된다. 만약 0과 1이 섞여 있으면 전체를 한 번에 나타내지를 못하고, 왼쪽 위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래, 이렇게 4개의 영상으로 나누어 압축하게 되며, 이 4개의 영역을 압축한 결과를 차례대로 괄호 안에 묶어서 표현한다</p><p>영상을 압축한 결과를 출력하라</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">15000</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line"></span><br><span class="line">tree = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().rstrip())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">ans=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">x,y,length</span>):</span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    node = tree[x][y]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x,x+length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y,y+length):</span><br><span class="line">            <span class="keyword">if</span> node!=tree[i][j]:</span><br><span class="line">                ans.append(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">                quad=length//<span class="number">2</span></span><br><span class="line">                solve(x, y, quad)</span><br><span class="line">                solve(x, y+quad, quad)</span><br><span class="line">                solve(x+quad, y, quad)</span><br><span class="line">                solve(x+quad, y+quad, quad)</span><br><span class="line">                ans.append(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    ans.append(node)</span><br><span class="line">solve(<span class="number">0</span>, <span class="number">0</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,ans)))</span><br></pre></td></tr></table></figure><ul><li>파이썬에서 재귀 제한이 걸렸을 땐 sys.setrecursionlimit(num)으로 제한을 풀어주자</li><li>함수 list()는 문자열이나 정수를 리스트로 변환한다. <ul><li>split()를 매개변수 없이 쓸 경우 띄어쓰기 없이 붙어버린다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1929 소수 구하기</title>
      <link href="/2022/03/10/algorithm-boj1929/"/>
      <url>/2022/03/10/algorithm-boj1929/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1929-소수-구하기"><a href="#백준-1929-소수-구하기" class="headerlink" title="백준 1929 소수 구하기"></a>백준 1929 소수 구하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>N이하의 소수들을 모두 구한 후 M과 N 사이의 소수를 출력한다</li></ul><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">M,N = map(int, sys.stdin.readline().split())</span><br><span class="line">arr = [False,False] + [True] * (N-1)</span><br><span class="line">for i in range(2,N+1):</span><br><span class="line">    for j in range(2*i,N+1,i):</span><br><span class="line">        arr[j] = False</span><br><span class="line">for i in range(M,N+1):</span><br><span class="line">    if arr[i] == True:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2004 조합 0의 개수</title>
      <link href="/2022/03/10/algorithm-boj2004/"/>
      <url>/2022/03/10/algorithm-boj2004/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2004-조합-0의-개수"><a href="#백준-2004-조합-0의-개수" class="headerlink" title="백준 2004 조합 0의 개수"></a>백준 2004 조합 0의 개수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>$n \choose m$의 끝자리 $0$의 개수를 출력하는 프로그램을 작성하시오</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 정수 $n$, $m$ ($0 \le m \le n \le 2,000,000,000$, $n \ne 0$)이 들어온다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>범위가 너무 넓어 직접 조합을 구하면 시간 초과가 일어난다. 그래서 승수를 이용했다.<br>$8!$ 의 경우 2가 7번 들어있다.</p><p>2가 4번 $(2,4,6,8)$ , 4가 1번 $(4,8)$ ,8이 1번 $(8)$ 이렇게 범위 내에 7번 들어있다.</p><p>같은 원리로 5도 구할 수 있다.</p><p>뒤에 $0$ 이 오려면 2와 5가 각 1개 씩 필요하므로 $n, m, n-m $의 2와 5의 갯수를 각 각 구해 최솟값을 찾으면 0의 갯수를 찾을 수 있다.</p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><h3 id="메모이제이션을-사용하자-시간-초과"><a href="#메모이제이션을-사용하자-시간-초과" class="headerlink" title="메모이제이션을 사용하자 - 시간 초과"></a>메모이제이션을 사용하자 - 시간 초과</h3><p>범위 값이 넓어 시간 초과가 예상되어 메모이제이션을 사용했다.<br>하지만 인덱스를 선언하는 것부터가 너무 범위가 넓고, 접근하는 것도 같은 이유로 시간 초과 당했다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">fac = [<span class="number">1</span>,<span class="number">1</span>]+[<span class="number">0</span>]*<span class="number">2000000000</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> fac[n] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> fac[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fac[n] = n * fact(n-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> fac[n]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comb</span>(<span class="params">n,m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(fact(n)/(fact(m)*fact(n-m)))</span><br><span class="line"></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">num=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">str</span>(comb(n, m))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    <span class="keyword">if</span> num.pop() == <span class="number">0</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(cnt)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="정답-코드"><a href="#정답-코드" class="headerlink" title="정답 코드"></a>정답 코드</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two_count</span>(<span class="params">n</span>):</span><br><span class="line">    two = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">        two += n</span><br><span class="line">    <span class="keyword">return</span> two</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">five_count</span>(<span class="params">n</span>):</span><br><span class="line">    five = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">        n = n // <span class="number">5</span></span><br><span class="line">        five += n</span><br><span class="line">    <span class="keyword">return</span> five</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(two_count(n) - two_count(n - m) - two_count(m), five_count(n) - five_count(n - m) - five_count(m)))</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><img src="https://tmdrl5779.tistory.com/95" alt="[백준] 2004번(python)"></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2331 반복 수열</title>
      <link href="/2022/03/10/algorithm-boj2331/"/>
      <url>/2022/03/10/algorithm-boj2331/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2331-반복-수열"><a href="#백준-2331-반복-수열" class="headerlink" title="백준 2331 반복 수열"></a>백준 2331 반복 수열</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>다음과 같이 정의된 수열이 있다.</p><p>D[1] &#x3D; A<br>D[n] &#x3D; D[n-1]의 각 자리의 숫자를 P번 곱한 수들의 합<br>예를 들어 A&#x3D;57, P&#x3D;2일 때, 수열 D는 [57, 74(&#x3D;52+72&#x3D;25+49), 65, 61, 37, 58, 89, 145, 42, 20, 4, 16, 37, …]이 된다. 그 뒤에는 앞서 나온 수들(57부터가 아니라 58부터)이 반복된다.</p><p>이와 같은 수열을 계속 구하다 보면 언젠가 이와 같은 반복수열이 된다. 이때, 반복되는 부분을 제외했을 때, 수열에 남게 되는 수들의 개수를 구하는 프로그램을 작성하시오. 위의 예에서는 [57, 74, 65, 61]의 네 개의 수가 남게 된다.</p><p>첫째 줄에 반복되는 부분을 제외했을 때, 수열에 남게 되는 수들의 개수를 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">A,P=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">number</span>):</span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    numbers = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">str</span>(number)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numbers:</span><br><span class="line">        ans+=i**P</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">D=[A]</span><br><span class="line">idx=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    number = calc(D[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">in</span> D:</span><br><span class="line">        idx=D.index(number)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        D.append(number)</span><br><span class="line"><span class="built_in">print</span>(idx)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm_boj2178</title>
      <link href="/2022/03/10/algorithm-boj2178/"/>
      <url>/2022/03/10/algorithm-boj2178/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2178-미로-탐색"><a href="#백준-2178-미로-탐색" class="headerlink" title="백준 2178 미로 탐색"></a>백준 2178 미로 탐색</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>첫 번째 풀이</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">15000</span>)</span><br><span class="line"></span><br><span class="line">N,M = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line">MAX =sys.maxsize</span><br><span class="line">mp = [[MAX]*(M+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    cnt=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().rstrip())):</span><br><span class="line">        mp[n][cnt]=m</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">ans=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">x,y,count</span>):</span><br><span class="line">    <span class="keyword">if</span> x==N <span class="keyword">and</span> y==M:</span><br><span class="line">        ans.append(count)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">0</span> <span class="keyword">or</span> y==<span class="number">0</span> <span class="keyword">or</span> x==N+<span class="number">1</span> <span class="keyword">or</span> y==M+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> mp[x][y]==<span class="number">0</span> <span class="keyword">or</span> mp[x][y]==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> mp[x][y]==<span class="number">1</span>:</span><br><span class="line">        mp[x][y]=<span class="number">2</span></span><br><span class="line">        solve(x, y+<span class="number">1</span>, count+<span class="number">1</span>)</span><br><span class="line">        solve(x+<span class="number">1</span>, y, count+<span class="number">1</span>)</span><br><span class="line">        solve(x, y-<span class="number">1</span>, count+<span class="number">1</span>)</span><br><span class="line">        solve(x-<span class="number">1</span>, y, count+<span class="number">1</span>)</span><br><span class="line">solve(<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(ans))</span><br></pre></td></tr></table></figure><p>위의 코드는 틀린 코드이다. 재귀 함수를 이용해서 탐색해서 목적지에 도달했을 때의 카운트를 추가하도록 했다.</p><p>아래 코드는 bfs로 다시 풀어 제출한 정답 코드이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">N,M = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">mp=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    mp.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().rstrip())))</span><br><span class="line"></span><br><span class="line">dx=[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">dy=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">visited = [[<span class="number">0</span>]*M <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line">q=deque([(<span class="number">0</span>,<span class="number">0</span>)])</span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    x,y =q.popleft()</span><br><span class="line">    <span class="keyword">if</span> x==N-<span class="number">1</span> <span class="keyword">and</span> y==M-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(visited[x][y]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        nx,ny=x+dx[i],y+dy[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;= nx &lt;N <span class="keyword">and</span> <span class="number">0</span>&lt;= ny&lt;M:</span><br><span class="line">            <span class="keyword">if</span> visited[nx][ny] ==<span class="number">0</span> <span class="keyword">and</span> mp[nx][ny]==<span class="number">1</span>:</span><br><span class="line">                visited[nx][ny] = visited[x][y]+<span class="number">1</span></span><br><span class="line">                q.append((nx,ny))</span><br></pre></td></tr></table></figure><ul><li>뭐가 문제일까? 처음 코드도 나름 bfs 느낌인데 싶어 왜 bfs로 찾은 경로가 최단 경로인지 찾아보았다</li></ul><p>bfs는 넓이 우선 탐색이다. 즉 루트 노드부터 시작해서 거리가 1,2,3,…. 인 자식 노드들을 차례대로 방문한다.<br>즉 이렇게 순환하면 자식 노드들은 루트 노드로부터 거리가 1,2,3 이므로 최소 거리를 보장받게 된다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2407 조합</title>
      <link href="/2022/03/10/algorithm-boj2407/"/>
      <url>/2022/03/10/algorithm-boj2407/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2407-조합"><a href="#백준-2407-조합" class="headerlink" title="백준 2407 조합"></a>백준 2407 조합</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>nCm을 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">numbers=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)]</span><br><span class="line">numbers[<span class="number">1</span>],numbers[<span class="number">2</span>]=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">    numbers[i]=numbers[i-<span class="number">1</span>]*i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers[n]//(numbers[m]*numbers[n-m]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2579 계단오르기</title>
      <link href="/2022/03/10/algorithm-boj2579/"/>
      <url>/2022/03/10/algorithm-boj2579/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="계단-오르기"><a href="#계단-오르기" class="headerlink" title="계단 오르기"></a>계단 오르기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>계단 오르는 데는 다음과 같은 규칙이 있다.</p><ol><li><p>계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.</p></li><li><p>연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.</p></li><li><p>마지막 도착 계단은 반드시 밟아야 한다.</p></li><li><p>따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.</p></li></ol><p>각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">stair = [<span class="built_in">int</span>(sys.stdin.readline()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>] = stair[<span class="number">0</span>]</span><br><span class="line">dp[<span class="number">1</span>] = stair[<span class="number">0</span>]+stair[<span class="number">1</span>]</span><br><span class="line">dp[<span class="number">2</span>] = <span class="built_in">max</span>(stair[<span class="number">0</span>]+stair[<span class="number">2</span>],stair[<span class="number">1</span>]+stair[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n):</span><br><span class="line">    dp[i] = <span class="built_in">max</span>(stair[i]+dp[i-<span class="number">2</span>],stair[i-<span class="number">1</span>]+stair[i]+dp[i-<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(dp[n-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>전형적인 DP 문제이다. 처음에는 끝 계단은 무조건 포함해야하니까. 값들을 입력 받고 뒤집어서 무조건 첫 계단을 포함하고 시작하려고 했었다.(실패)</p><p>주어진 조건을 보면 연속된 세 개의 계단을 모두 밟아서도 안된다고 한다.<br>점화식을 쓸 때 이 조건을 중심으로 짜야한다.</p><p>dp[i]는 stair[i]+dp[i-2]와 stair[i]+stair[i-1]+dp[i-3] 중 최댓 값이다.<br>위의 식의 경우 dp[i] 내에는 무조건 stair[i]가 포함된걸 확신할 수 있다.<br>이제 우리는 i 번째 계단을 무조건 밟고 있다.</p><p>그렇다면 지금까지 어떤 계단을 밟아 왔을까?</p><p>stair[i]+dp[i-2]는 i-1 칸을 안밟고 넘어 온 것이다.<br>stair[i]+stair[i-1]+dp[i-3]은 연속해서 i 번째 계단까지 밟고 왔다.</p><p>점화식을 세웠으니 이제 문제는 거의 다 풀었다.</p><p>다만 계단의 개수가 300개로 제한되어 있으니 미리 배열을 300개 선언해두면 혹시 모를 INDEX ERROR를 방지할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1927 최소 힙</title>
      <link href="/2022/03/10/algorithm-boj1927/"/>
      <url>/2022/03/10/algorithm-boj1927/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1927-최소-힙"><a href="#백준-1927-최소-힙" class="headerlink" title="백준 1927 최소 힙"></a>백준 1927 최소 힙</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>널리 잘 알려진 자료구조 중 최소 힙이 있다. 최소 힙을 이용하여 다음과 같은 연산을 지원하는 프로그램을 작성하시오.</p><ul><li>배열에 자연수 x를 넣는다.</li><li>배열에서 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다.<br>프로그램은 처음에 비어있는 배열에서 시작하게 된다.</li></ul><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">numbers = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    n=<span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> numbers:</span><br><span class="line">            <span class="built_in">print</span>(heapq.heappop(numbers))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        heapq.heappush(numbers, n)</span><br></pre></td></tr></table></figure><ul><li>파이썬의 heapq 라이브러리를 사용하면 간단하게 풀 수 있다.</li></ul><p>힙은 특정한 규칙을 가지는 트리로써, 최댓값과 최솟값을 찾는 연산을 빠르게 하기 위해 고안된 완전이진트리이다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2630 색종이 만들기</title>
      <link href="/2022/03/10/algorithm-boj2630/"/>
      <url>/2022/03/10/algorithm-boj2630/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2630-색종이-만들기"><a href="#백준-2630-색종이-만들기" class="headerlink" title="백준 2630 색종이 만들기"></a>백준 2630 색종이 만들기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>전체 종이의 크기가 N×N(N&#x3D;2k, k는 1 이상 7 이하의 자연수) 이라면 종이를 자르는 규칙은 다음과 같다.</p><p>전체 종이가 모두 같은 색으로 칠해져 있지 않으면 가로와 세로로 중간 부분을 잘라서 &lt;그림 2&gt;의 I, II, III, IV와 같이 똑같은 크기의 네 개의 N&#x2F;2 × N&#x2F;2색종이로 나눈다. 나누어진 종이 I, II, III, IV 각각에 대해서도 앞에서와 마찬가지로 모두 같은 색으로 칠해져 있지 않으면 같은 방법으로 똑같은 크기의 네 개의 색종이로 나눈다. 이와 같은 과정을 잘라진 종이가 모두 하얀색 또는 모두 파란색으로 칠해져 있거나, 하나의 정사각형 칸이 되어 더 이상 자를 수 없을 때까지 반복한다.</p><p>입력으로 주어진 종이의 한 변의 길이 N과 각 정사각형칸의 색(하얀색 또는 파란색)이 주어질 때 잘라진 하얀색 색종이와 파란색 색종이의 개수를 구하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">N = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line"></span><br><span class="line">m = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">wcount,bcount=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recurs</span>(<span class="params">x, y, N</span>):</span><br><span class="line">    <span class="keyword">global</span> wcount,bcount</span><br><span class="line">    color = m[x][y]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x, x + N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y, y + N):</span><br><span class="line">            <span class="keyword">if</span> color != m[i][j]:</span><br><span class="line">                recurs(x, y, N // <span class="number">2</span>)</span><br><span class="line">                recurs(x, y + N // <span class="number">2</span>, N // <span class="number">2</span>)</span><br><span class="line">                recurs(x + N // <span class="number">2</span>, y, N // <span class="number">2</span>)</span><br><span class="line">                recurs(x + N // <span class="number">2</span>, y + N // <span class="number">2</span>, N // <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> color == <span class="number">0</span>:</span><br><span class="line">        wcount+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bcount+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">recurs(<span class="number">0</span>, <span class="number">0</span>, N)</span><br><span class="line"><span class="built_in">print</span>(wcount)</span><br><span class="line"><span class="built_in">print</span>(bcount)</span><br></pre></td></tr></table></figure><ul><li>첫 색상이 나머지 색상과 동일한지 확인해서 틀릴 경우 사각형을 쪼갠다<ul><li>재귀 형식으로 4토막씩 계속 나누니까 틀린 부분만 쏙 찾아낼 수 있다</li></ul></li><li>각각 색깔을 비교해서 카운트를 올린 후 출력한다</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2667 단지번호붙이기</title>
      <link href="/2022/03/10/algorithm-boj2667/"/>
      <url>/2022/03/10/algorithm-boj2667/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2667-단지-번호-붙이기"><a href="#백준-2667-단지-번호-붙이기" class="headerlink" title="백준 2667 단지 번호 붙이기"></a>백준 2667 단지 번호 붙이기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">15000</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">graph=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    graph.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().rstrip())))</span><br><span class="line"></span><br><span class="line">grp=[]</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">dx=[-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">dy=[<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">0</span> <span class="keyword">or</span> x&gt;=n <span class="keyword">or</span> y&lt;<span class="number">0</span> <span class="keyword">or</span> y&gt;=n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> graph[x][y]==<span class="number">1</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        graph[x][y]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            dfs(x+dx[i], y+dy[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> dfs(i,j):</span><br><span class="line">            grp.append(cnt)</span><br><span class="line">            cnt=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(grp))</span><br><span class="line">grp.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> grp:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul><li>문제를 제대로 읽자</li><li>bfs, dfs 문제를 많이 풀어보자</li></ul><p>Base case를 먼저하고 시작해야한다. 재귀 함수의 경우 무한 루프에 빠질 수 있기 때문이다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 5525 IOIOI</title>
      <link href="/2022/03/10/algorithm-boj5525/"/>
      <url>/2022/03/10/algorithm-boj5525/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-5525-IOIOI"><a href="#백준-5525-IOIOI" class="headerlink" title="백준 5525 IOIOI"></a>백준 5525 IOIOI</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N+1개의 I와 N개의 O로 이루어져 있으면, I와 O이 교대로 나오는 문자열을 PN이라고 한다.</p><p>P1 IOI<br>P2 IOIOI<br>P3 IOIOIOI<br>PN IOIOI…OI (O가 N개)<br>I와 O로만 이루어진 문자열 S와 정수 N이 주어졌을 때, S안에 PN이 몇 군데 포함되어 있는지 구하는 프로그램을 작성하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>아래 코드는 50점 짜리 코드이다. 아마 시간 복잡도 때문인듯하다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">m = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">s = sys.stdin.readline().rstrip()</span><br><span class="line">ns = <span class="string">&quot;IOI&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    ns+=<span class="string">&#x27;OI&#x27;</span></span><br><span class="line">nsLen=<span class="built_in">len</span>(ns)</span><br><span class="line">ans,cnt=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> ns==<span class="built_in">str</span>(s[cnt:cnt+nsLen]):</span><br><span class="line">        ans+=<span class="number">1</span></span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> nsLen==<span class="built_in">len</span>(s)-cnt:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><ul><li>아래 코드는 100점이다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">m = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">s = sys.stdin.readline().rstrip()</span><br><span class="line"></span><br><span class="line">answer,i,count=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;m-<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> s[i:i+<span class="number">3</span>]==<span class="string">&#x27;IOI&#x27;</span>:</span><br><span class="line">        i+=<span class="number">2</span></span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count ==n:</span><br><span class="line">            answer+=<span class="number">1</span></span><br><span class="line">            count -=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure><ul><li>IOI가 발견되면 index를 2개 이동시키고 아닌 경우에는 index를 1개 이동 시키면서 검사한다.<ul><li>IOI를 찾을 때마다 카운트를 올린다. 이 카운트가 n가 동일하다면 주어진 P를 찾은 것이니 answer를 1 올린다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 7576 토마토</title>
      <link href="/2022/03/10/algorithm-boj7576/"/>
      <url>/2022/03/10/algorithm-boj7576/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-7576-토마토"><a href="#백준-7576-토마토" class="headerlink" title="백준 7576 토마토"></a>백준 7576 토마토</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다.</p><p>창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다.</p><p>토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">m,n=<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())</span><br><span class="line">mp=[]</span><br><span class="line">q= deque()</span><br><span class="line">dx,dy=[-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    mp.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,sys.stdin.readline().split())))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">mp</span>):</span><br><span class="line">    <span class="keyword">global</span> q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> mp[i][j]== <span class="number">1</span>:</span><br><span class="line">                q.append([i,j])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x,y=q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            nx,ny=dx[i]+x,dy[i]+y</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=nx&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=ny&lt;m <span class="keyword">and</span> mp[nx][ny]==<span class="number">0</span>:</span><br><span class="line">                mp[nx][ny]=mp[x][y]+<span class="number">1</span></span><br><span class="line">                q.append([nx,ny])</span><br><span class="line"></span><br><span class="line">find(mp)</span><br><span class="line">bfs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mp:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(-<span class="number">1</span>)</span><br><span class="line">            exit()</span><br><span class="line">    res=<span class="built_in">max</span>(res,<span class="built_in">max</span>(i))</span><br><span class="line"><span class="built_in">print</span>(res-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>흐름은 얼추 맞는데 bfs나 dfs 문제를 많이 안풀어봐서 문제 갈피를 못잡는 경향이 있다</li></ul><p>이 문제의 핵심 포인트는 벡터와 bfs이다.<br>이런식으로 탐색하는 문제를 만날 경우 벡터를 사용하면 편하게 위치를 바꿀 수 있다</p><p>주어진 맵에서 익은 토마토가 있는 좌표를 추출한다.<br>추출한 좌표를 시작점으로 토마토를 익혀나간다. 토마토가 여러 개여도 상관이 없는게 결국은 새로운 토마토를 익힐 때마다 이 전 토마토에 일 수가 나오기 때문이다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 7662 이중 우선 큐</title>
      <link href="/2022/03/10/algorithm-boj7662/"/>
      <url>/2022/03/10/algorithm-boj7662/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-7662-이중-우선-큐"><a href="#백준-7662-이중-우선-큐" class="headerlink" title="백준 7662 이중 우선 큐"></a>백준 7662 이중 우선 큐</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>이중 우선순위 큐(dual priority queue)는 전형적인 우선순위 큐처럼 데이터를 삽입, 삭제할 수 있는 자료 구조이다. 전형적인 큐와의 차이점은 데이터를 삭제할 때 연산(operation) 명령에 따라 우선순위가 가장 높은 데이터 또는 가장 낮은 데이터 중 하나를 삭제하는 점이다. 이중 우선순위 큐를 위해선 두 가지 연산이 사용되는데, 하나는 데이터를 삽입하는 연산이고 다른 하나는 데이터를 삭제하는 연산이다. 데이터를 삭제하는 연산은 또 두 가지로 구분되는데 하나는 우선순위가 가장 높은 것을 삭제하기 위한 것이고 다른 하나는 우선순위가 가장 낮은 것을 삭제하기 위한 것이다.</p><p>정수만 저장하는 이중 우선순위 큐 Q가 있다고 가정하자. Q에 저장된 각 정수의 값 자체를 우선순위라고 간주하자.</p><p>Q에 적용될 일련의 연산이 주어질 때 이를 처리한 후 최종적으로 Q에 저장된 데이터 중 최댓값과 최솟값을 출력하는 프로그램을 작성하라.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sync</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">while</span> arr <span class="keyword">and</span> <span class="built_in">id</span>[arr[<span class="number">0</span>][<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">        heapq.heappop(arr)</span><br><span class="line"></span><br><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> test_case <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    max_arr = []</span><br><span class="line">    min_arr = []</span><br><span class="line">    <span class="built_in">id</span> = [<span class="number">0</span>] * <span class="number">1000000</span></span><br><span class="line">    K = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">        S, num = <span class="built_in">input</span>().split()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> S == <span class="string">&quot;I&quot;</span>:</span><br><span class="line">            heapq.heappush(max_arr, (-<span class="number">1</span> * <span class="built_in">int</span>(num), i))</span><br><span class="line">            heapq.heappush(min_arr, (<span class="built_in">int</span>(num),i))</span><br><span class="line">            <span class="built_in">id</span>[i] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> num == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                sync(max_arr)</span><br><span class="line">                <span class="keyword">if</span> max_arr:</span><br><span class="line">                    <span class="built_in">id</span>[max_arr[<span class="number">0</span>][<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">                    heapq.heappop(max_arr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> num == <span class="string">&quot;-1&quot;</span>:</span><br><span class="line">                sync(min_arr)</span><br><span class="line">                <span class="keyword">if</span> min_arr:</span><br><span class="line">                    <span class="built_in">id</span>[min_arr[<span class="number">0</span>][<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">                    heapq.heappop(min_arr)</span><br><span class="line"></span><br><span class="line">    sync(max_arr)</span><br><span class="line">    sync(min_arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(max_arr) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EMPTY&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span> * max_arr[<span class="number">0</span>][<span class="number">0</span>], end =<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(min_arr[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>heapq 내장 함수들로만 문제를 풀었는데 시간 초과가 신나게 떴다.<br>그래서 이래저래 구글링하면서 다른 분들 블로그를 보고 풀이를 적으며 이해하려 한다.</p><p>sync 함수는 동기화하는 함수이다. 최대 힙과 최소 힙을 만들고, 값을 빼다 보면 두 배열의 값이 달라지기 때문이다.</p><p>힙의 최댓값의 인덱스는 0이다. 이 때 두 배열은 서로 인덱스 0의 값이 끝에 위치하기 때문에 id가 0인 것을 pop하는 방식으로 서로 동기화 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 9375 패션왕 신해빈</title>
      <link href="/2022/03/10/algorithm-boj9375/"/>
      <url>/2022/03/10/algorithm-boj9375/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-9375-패션왕-신해빈"><a href="#백준-9375-패션왕-신해빈" class="headerlink" title="백준 9375 패션왕 신해빈"></a>백준 9375 패션왕 신해빈</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>해빈이는 패션에 매우 민감해서 한번 입었던 옷들의 조합을 절대 다시 입지 않는다. 예를 들어 오늘 해빈이가 안경, 코트, 상의, 신발을 입었다면, 다음날은 바지를 추가로 입거나 안경대신 렌즈를 착용하거나 해야한다. 해빈이가 가진 의상들이 주어졌을때 과연 해빈이는 알몸이 아닌 상태로 며칠동안 밖에 돌아다닐 수 있을까?</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 테스트 케이스가 주어진다. 테스트 케이스는 최대 100이다.</p><ul><li>각 테스트 케이스의 첫째 줄에는 해빈이가 가진 의상의 수 n(0 ≤ n ≤ 30)이 주어진다.</li><li>다음 n개에는 해빈이가 가진 의상의 이름과 의상의 종류가 공백으로 구분되어 주어진다. 같은 종류의 의상은 하나만 입을 수 있다.</li><li>모든 문자열은 1이상 20이하의 알파벳 소문자로 이루어져있으며 같은 이름을 가진 의상은 존재하지 않는다.</li></ul><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>각 테스트 케이스에 대해 해빈이가 알몸이 아닌 상태로 의상을 입을 수 있는 경우를 출력하시오.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    number = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    <span class="keyword">if</span> number==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    clothes=<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">        clo_name,clo_type=<span class="built_in">map</span>(<span class="built_in">str</span>,sys.stdin.readline().split())</span><br><span class="line">        <span class="keyword">if</span> clo_type <span class="keyword">in</span> clothes.keys():</span><br><span class="line">            clothes[clo_type]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            clothes[clo_type]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cnt=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> clothes.keys():</span><br><span class="line">            cnt*=clothes[key]+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="처음-풀이-때-잘못한-점"><a href="#처음-풀이-때-잘못한-점" class="headerlink" title="처음 풀이 때 잘못한 점"></a>처음 풀이 때 잘못한 점</h3><p>딕셔너리로 값들을 정리하고, combination을 사용해서 문제를 풀었다.<br>하지만 시간 초과를 받았다. 생각이 효율적이지 않았다.</p><p>나름 계산을 줄여보려고 딕셔너리에 옷의 갯수를 넣고, 옷의 갯수끼리 조합을 구하고, 조합 안의 숫자를 곱한 총합이 해진이가 입을 수 있는 옷의 가지수이기 때문이다.</p><h3 id="두-번째-풀이"><a href="#두-번째-풀이" class="headerlink" title="두 번째 풀이"></a>두 번째 풀이</h3><p>여러 해설들을 보다보니, [해진이가 입을 수 있는 옷의 조합(알몸 포함) - 1(알몸인 경우)]로 구하면 식이 생각보다 엄청 간단해진다.</p><p>또 오늘 배운 점은 예외 처리이다. 테스트 케이스가 주어질 때 해진이가 옷이 없는 경우가 있다. 이 때 바로 0으로 예외 처리를 해야하는데 처음 풀 때는 신경쓰지 않았다.</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘 그리디 &amp;&amp; 구현</title>
      <link href="/2022/03/10/algorithm-greedy/"/>
      <url>/2022/03/10/algorithm-greedy/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="그리디-알고리즘"><a href="#그리디-알고리즘" class="headerlink" title="그리디 알고리즘"></a>그리디 알고리즘</h2><ul><li><p>정의 현재 상황에서 지금 당장 조은 것만 고르는 방법</p></li><li><p>정당성 분석이 중요함</p><ul><li>단순히 반복하는게 아닌 결과 값을 보장하는가</li></ul></li><li><p>해가 정당한지 점검할 수 있어야한다.</p></li><li><p>일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다</p></li></ul><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><ul><li><p>구현이란, 머릿 속에 있는 알고리즘을 소스 코드로 바꾸는 과정</p></li><li><p>풀이를 떠올리는 것은 쉽지만, 소스 코드로 옮기기 어려운 문제를 지칭</p><ul><li>알고리즘은 간단한데 코드가 지나칠 만큼 길어지는 문제</li><li>실수 연산을 다루고, 특정 소수점 자리까지 출력해야하는 문제</li><li>문자열을 특저안 기준에 따라서 끊어 처리해야하는 문제</li><li>적절한 라이브러리를 찾아서 사용해야하는 문제</li></ul></li><li><p>시뮬레이션 및 완전 탐색 문제에서는 2차원 공간에서의 방향 벡터가 자주 활용된다.</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1316 - 그룹 단어 체커</title>
      <link href="/2022/03/10/algorithm_boj1316/"/>
      <url>/2022/03/10/algorithm_boj1316/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1316-그룹-단어-체커"><a href="#백준-1316-그룹-단어-체커" class="headerlink" title="백준 1316 - 그룹 단어 체커"></a>백준 1316 - 그룹 단어 체커</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>주어진 N 개의 단어들 중 그룹 단어는 몇 개인가?</p><h2 id="그룹-단어란"><a href="#그룹-단어란" class="headerlink" title="그룹 단어란"></a>그룹 단어란</h2><p>단어에 존재하는 모든 문자에 대하여 각 문제가 연속적으로 나타나는 단어를 말한다.</p><p>aaabb는 그룹 단어이지만, aabba는 그룹 단어가 아니다</p><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><h3 id="주요-아이디어"><a href="#주요-아이디어" class="headerlink" title="주요 아이디어"></a>주요 아이디어</h3><p>단어에 존재하는 문자의 연속되는 최대 길이와 단어 내에 해당 문자가 몇 개있는지 비교한다.</p><p>두 값이 같을 경우에만 그룹 단어이다</p><h3 id="풀이-순서"><a href="#풀이-순서" class="headerlink" title="풀이 순서"></a>풀이 순서</h3><ol><li>단어에 존재하는 문자의 연속되는 최대 길이를 Value, 해당 문자를 Key로 딕셔너리에 저장한다.</li><li>딕셔너리의 Value와 단어 내 문자의 갯수가 일치하는지 확인</li><li>일치하는 경우 checkPoint를 참으로 반환하고, count를 올린다.</li><li>count 출력</li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">strArr=[]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    strArr.append(sys.stdin.readline().rstrip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strArr)):</span><br><span class="line">    word= strArr[i]</span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    checkPoint=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(word)):</span><br><span class="line">        <span class="keyword">if</span>(word[j-<span class="number">1</span>]==word[j]):</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>):</span><br><span class="line">                dic[word[j-<span class="number">1</span>]]=<span class="number">1</span></span><br><span class="line">            dic[word[j]] +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span>(word[j] <span class="keyword">in</span> dic.items()):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dic[word[j]]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> dic.items():</span><br><span class="line">        <span class="keyword">if</span>(word.count(key)!=value):</span><br><span class="line">            checkPoint=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(checkPoint <span class="keyword">is</span> <span class="literal">True</span>):</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1406 에디터</title>
      <link href="/2022/03/10/algorithm_boj1406/"/>
      <url>/2022/03/10/algorithm_boj1406/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1406-에디터"><a href="#백준-1406-에디터" class="headerlink" title="백준  1406 에디터"></a>백준  1406 에디터</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.</p><p>이 편집기에는 ‘커서’라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽), 또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면, 커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.</p><p>이 편집기가 지원하는 명령어는 다음과 같다.</p><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>L</td><td>커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨)</td></tr><tr><td>D</td><td>커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨)</td></tr><tr><td>B</td><td>커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨)</td></tr><tr><td>P $</td><td>$라는 문자를 커서 왼쪽에 추가함</td></tr></tbody></table><p>초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때, 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오. 단, 명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다.<br>이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다.<br>둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 M(1 ≤ M ≤ 500,000)이 주어진다.<br>셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다.<br>명령어는 위의 네 가지 중 하나의 형태로만 주어진다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.</p><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><p>처음엔 커서를 직접 구현해서 풀어봤는데, 명령어 P를 사용할 때 인덱스에 값을 집어 넣어야하는데 더 코드가 복잡해지는 문제가 있었다.</p><h3 id="핵심-아이디어"><a href="#핵심-아이디어" class="headerlink" title="핵심 아이디어"></a>핵심 아이디어</h3><ul><li>스택 두 개를 사용해 스택이 있는 것처럼 사용<ul><li>커서를 추상화하는 것이다.</li></ul></li></ul><p>커서는 스택과 스택 사이에 있다고 가정한다.</p><p>처음 ABCD를 입력하면 첫 번째 스택엔 A B C D, 두 번째 스택은 비어있다.<br>즉 커서는 두 스택의 사이인 D 오른쪽에 위치한다</p><p>그 상태에서 명령어 L을 입력하면 두 번 째 스택에 첫 번째 스택에서 뺀 D를 집어 넣는다.<br>즉 첫 번째 스택은 A B C, 두 번째 스택은 D 이므로, 커서는 C와 D사이에 존재하고, 한 칸 왼쪽으로 이동했음을 알 수 있다.</p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">stack1=<span class="built_in">list</span>(sys.stdin.readline().rstrip())</span><br><span class="line">stack2=[]</span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    temp = sys.stdin.readline().rstrip()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27; &#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">        order = temp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        order,val = <span class="built_in">map</span>(<span class="built_in">str</span>,temp.split())</span><br><span class="line">    <span class="keyword">if</span> order == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">        stack1.append(val)</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> stack1:</span><br><span class="line">            stack2.append(stack1.pop())</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">&#x27;D&#x27;</span> :</span><br><span class="line">        <span class="keyword">if</span> stack2:</span><br><span class="line">            stack1.append(stack2.pop())</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> stack1:</span><br><span class="line">            stack1.pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stack1:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> stack2:</span><br><span class="line">    <span class="built_in">print</span>(j,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1654 랜선 자르기</title>
      <link href="/2022/03/10/algorithm_boj1654/"/>
      <url>/2022/03/10/algorithm_boj1654/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1654-랜선-자르기"><a href="#백준-1654-랜선-자르기" class="headerlink" title="백준 1654 랜선 자르기"></a>백준 1654 랜선 자르기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>박성원이 캠프 때 쓸 N개의 랜선을 만들어야 하는데 너무 바빠서 영식이에게 도움을 청했다.</p><p>이미 오영식은 자체적으로 K개의 랜선을 가지고 있다. 그러나 K개의 랜선은 길이가 제각각이다. 박성원은 랜선을 모두 N개의 같은 길이의 랜선으로 만들고 싶었기 때문에 K개의 랜선을 잘라서 만들어야 한다. 예를 들어 300cm 짜리 랜선에서 140cm 짜리 랜선을 두 개 잘라내면 20cm는 버려야 한다. (이미 자른 랜선은 붙일 수 없다.)</p><p>편의를 위해 랜선을 자르거나 만들 때 손실되는 길이는 없다고 가정하며, 기존의 K개의 랜선으로 N개의 랜선을 만들 수 없는 경우는 없다고 가정하자.<br> 그리고 자를 때는 항상 센티미터 단위로 정수길이만큼 자른다고 가정하자.<br> N개보다 많이 만드는 것도 N개를 만드는 것에 포함된다.<br> 이때 만들 수 있는 최대 랜선의 길이를 구하는 프로그램을 작성하시오.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에는 오영식이 이미 가지고 있는 랜선의 개수 K, 그리고 필요한 랜선의 개수 N이 입력된다.<br>K는 1이상 10,000이하의 정수이고, N은 1이상 1,000,000이하의 정수이다.<br>그리고 항상 K ≦ N 이다. 그 후 K줄에 걸쳐 이미 가지고 있는 각 랜선의 길이가 센티미터 단위의 정수로 입력된다. 랜선의 길이는 231-1보다 작거나 같은 자연수이다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫째 줄에 N개를 만들 수 있는 랜선의 최대 길이를 센티미터 단위의 정수로 출력한다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>주어진 랜선을 쪼개서 원하는 갯수를 만족시키는 최대 랜선의 길이를 구하는 문제이다.</p><p>랜선 길이를 트리거로, 각각의 주어진 랜선의 길이&#x2F;mid가 원하는 랜선의 갯수를 만족시키는지 확인한다.</p><h3 id="핵심-아이디어"><a href="#핵심-아이디어" class="headerlink" title="핵심 아이디어"></a>핵심 아이디어</h3><ul><li>이분 탐색<ul><li>주어진 랜선 내에서 이분 탐색을 한다</li><li>원하는 값을 찾아는지 확인 여부<ul><li>각 랜선의 길이&#x2F;자른 랜선의 길이가 원하는 갯수를 만족시키는가</li></ul></li></ul></li></ul><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">K,N = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().split())</span><br><span class="line"></span><br><span class="line">nums=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">    nums.append(<span class="built_in">int</span>(sys.stdin.readline()))</span><br><span class="line"></span><br><span class="line">left,right = <span class="number">1</span>,<span class="built_in">min</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left&lt;= right:</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    mid = (left+right)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="built_in">sum</span>+=num//mid</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>&lt;N:</span><br><span class="line">        right= mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = mid+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(right)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 1918 후위 표기식</title>
      <link href="/2022/03/10/algorithm_boj1918/"/>
      <url>/2022/03/10/algorithm_boj1918/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-1918-후위-표기식"><a href="#백준-1918-후위-표기식" class="headerlink" title="백준 1918 후위 표기식"></a>백준 1918 후위 표기식</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>입력된 중위 표기식을 후위 표기식으로 바꾸어 출력할 것</p><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><p>주어진 문자열의 첫 글자부터 문자열인지 파악한다.</p><ul><li>문자열일 경우 바로 result에 추가한다.</li><li><strong>*</strong> 또는 <strong>&#x2F;</strong> 가 올 경우<ul><li><strong>*</strong> 와 __&#x2F;__가 연산의 우선순위에 있기 때문에 먼저 값을 뺀다</li></ul></li><li><strong>+</strong> 또는 <strong>-</strong> 가 올 경우<br><strong>*</strong> 스택의 끝에 ( 가 올 때까지 스택의 값을 result에 추가한다<br><strong>*</strong> 출력이 끝나면 (를 스택에서 빼낸다</li><li>) 가 올 경우<ul><li>스택의 끝에 (가 올 때까지 스택의 값을 result에 추가한다<ul><li><strong>*</strong> 나 <strong>-</strong> 가 괄호 안에 있을 경우 괄호 안의 값을 출력하기 위함</li></ul></li></ul></li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">expression = <span class="built_in">list</span>(sys.stdin.readline().rstrip())</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> expression:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> &lt;= s <span class="keyword">and</span> s&lt;=<span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        res+=s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> s ==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.append(s)</span><br><span class="line">        <span class="keyword">elif</span> s ==<span class="string">&#x27;*&#x27;</span> <span class="keyword">or</span> s==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> (stack[-<span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> <span class="keyword">or</span> stack[-<span class="number">1</span>] ==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                res+=stack.pop()</span><br><span class="line">            stack.append(s)</span><br><span class="line">        <span class="keyword">elif</span> s==<span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> s ==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] !=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                res+= stack.pop()</span><br><span class="line">            stack.append(s)</span><br><span class="line">        <span class="keyword">elif</span> s == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                res += satck.pop()</span><br><span class="line">            stack.pop()</span><br><span class="line"><span class="keyword">while</span> stack:</span><br><span class="line">    res+=stack.pop()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 2275 - 부녀회장이 될테야</title>
      <link href="/2022/03/10/algorithm_boj2775/"/>
      <url>/2022/03/10/algorithm_boj2775/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-2275-부녀회장이-될테야"><a href="#백준-2275-부녀회장이-될테야" class="headerlink" title="백준 2275 - 부녀회장이 될테야"></a>백준 2275 - 부녀회장이 될테야</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>주희는 이번 기회에 부녀회장이 되고 싶어 각 층의 사람들을 불러 모아 반상회를 주최하려고 한다.</p><p>이 아파트에 거주하려면 a층의 b호에 살려면 자신의 아래(a-1)층의 1호부터 b호까지 사람들의 수의 합만큼 사람들을 데려와 살아야 한다</p><p>주어지는 양의 정수 k와 n에 대해 k층에 n호에는 몇 명이 살고 있는지 출력하라.</p><h3 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h3><ol><li>아파트에 비어있는 집은 없고, 모든 주민들은 계약 조건을 지킨다.</li><li>아파트엔 0층이 존재, 0층의 i호에는 i명이 산다.</li></ol><h2 id="문제풀이"><a href="#문제풀이" class="headerlink" title="문제풀이"></a>문제풀이</h2><h3 id="주요-아이디어"><a href="#주요-아이디어" class="headerlink" title="주요 아이디어"></a>주요 아이디어</h3><p>재귀 함수를 사용해서 문제를 풀었더니, 시간을 초과해버렸다. 재귀 함수의 경우 반복되는 연산이 많아 속도가 느려지는 단점이 있다.</p><p>이를 해결하기 위해 메모제이션(Memoization) 기법을 사용한다.</p><p>메모제이션이란 반복되지만 변하지 않는 값을 저장해, 해당 값이 필요할 때 다시 연산하는 것이 아니라 저장한 값을 가져오는 것이다.</p><p>이 문제의 경우 변수가 2 개여서 리스트를 이용해 메모제이션을 사용했다.</p><h3 id="풀이-순서"><a href="#풀이-순서" class="headerlink" title="풀이 순서"></a>풀이 순서</h3><ol><li>해당 호실의 인원 수를 계산하는 재귀 함수 destNum() 정의</li><li>memo_list를 거쳐 destNum() 값을 저장하고 리턴한다.</li><li>결과 값 출력</li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">floor=<span class="number">0</span></span><br><span class="line">room =<span class="number">0</span></span><br><span class="line">arr=[]</span><br><span class="line">memo_list= [[<span class="literal">None</span>]*<span class="number">15</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">destNum</span>(<span class="params">floor,room</span>):</span><br><span class="line">    <span class="keyword">if</span>(memo_list[floor][room] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> memo_list[floor][room]</span><br><span class="line">    <span class="keyword">if</span>(floor==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> room</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dest=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,room+<span class="number">1</span>):</span><br><span class="line">            memo_list[floor-<span class="number">1</span>][i] =destNum(floor-<span class="number">1</span>,i)</span><br><span class="line">            dest += memo_list[floor-<span class="number">1</span>][i]</span><br><span class="line">        memo_list[floor][room] = dest</span><br><span class="line">        <span class="keyword">return</span> memo_list[floor][room]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    floor = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    room = <span class="built_in">int</span>(sys.stdin.readline())</span><br><span class="line">    arr.append([floor,room])</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    <span class="built_in">print</span>(destNum(arr[j][<span class="number">0</span>],arr[j][<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>백준 4673 - 셀프 넘버</title>
      <link href="/2022/03/10/algorithm_boj4673/"/>
      <url>/2022/03/10/algorithm_boj4673/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="백준-4673-셀프-넘버"><a href="#백준-4673-셀프-넘버" class="headerlink" title="백준 4673 - 셀프 넘버"></a>백준 4673 - 셀프 넘버</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하라</p><h3 id="셀프-넘버란"><a href="#셀프-넘버란" class="headerlink" title="셀프 넘버란"></a>셀프 넘버란</h3><p>양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) &#x3D; 75+7+5 &#x3D; 87이다.<br>이 때 n을 d(n)의 생성자라한다. 즉 75는 87이다.</p><p>셀프 넘버는 생성자가 없는 수이다.</p><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><h3 id="셀프-넘버를-어떻게-찾을-것인가"><a href="#셀프-넘버를-어떻게-찾을-것인가" class="headerlink" title="셀프 넘버를 어떻게 찾을 것인가?"></a>셀프 넘버를 어떻게 찾을 것인가?</h3><p>셀프 넘버는 전체 정수에서 생성자가 있는 숫자들의 차집합이다.<br>셀프 넘버를 직접 구하기 보단 생성자가 있는 숫자들을 구해서 제거하는게 더 빠를거라 생각했다.</p><h3 id="풀이-순서"><a href="#풀이-순서" class="headerlink" title="풀이 순서"></a>풀이 순서</h3><ol><li>0으로 초기화된 index 10000개 배열 arr을 생성</li><li>입력 값 n에 따라 생성자를 반환하는 함수 checkD 선언</li><li>인덱스 1~10000을 checkD()에 넣어 arr에 생성자를 체크한다</li><li>arr 내에 체크되지 않은 인덱스(셀프 넘버)를 출력한다</li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">arr =[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkD</span>(<span class="params">n:<span class="built_in">int</span></span>):z</span><br><span class="line">    <span class="built_in">sum</span>=n</span><br><span class="line">    divValue=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        dLength=<span class="built_in">len</span>(<span class="built_in">str</span>(n))</span><br><span class="line">        <span class="keyword">if</span>(dLength==<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span>+=n</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            number= (<span class="number">10</span>**(dLength-<span class="number">1</span>))</span><br><span class="line">            divValue=<span class="built_in">int</span>(n/number)</span><br><span class="line">            <span class="built_in">sum</span>+=divValue</span><br><span class="line">            n=n%(divValue*number)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)+<span class="number">1</span>):</span><br><span class="line">    target=checkD(i)</span><br><span class="line">    <span class="keyword">if</span> (target&gt;=<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr[target] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    <span class="keyword">if</span> (arr[i]!=<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>선택정렬</title>
      <link href="/2022/03/10/algorithm_selectionSort/"/>
      <url>/2022/03/10/algorithm_selectionSort/</url>
      
        <content type="html"><![CDATA[<h2 id="선택-정렬"><a href="#선택-정렬" class="headerlink" title="선택 정렬"></a>선택 정렬</h2><p>‘가장 작은 것을 선택해서 제일 앞으로 보낸다.’ 생각에 기인한 알고리즘이다.<br>배열 내에 인덱스는 이미 정해져 있고 그 위치에 어떤 값을 넣을지 고른다. </p><p>배열 내에 원소가 들어갈 인덱스(자리)는 이미 정해져 있고, 그 위치에 어떤 값을 넣을지 고르는 알고리즘이다.</p><p>10개의 원소 중 크기가 작은 원소부터 차례대로 배열에 넣어야 하는 상황을 생각해보자.<br>이때 최솟값이 들어갈 자리는 배열의 제일 왼쪽으로 정해져 있다.<br>10개의 원소 중 가장 작은 값을 찾기 위해 9번 비교해야 한다.<br>2번째 최솟값은 8번, 3번째 최솟값은 7번 해야 한다. </p><p>즉 각각 (n-1) (n-2)… n번 비교하게 되고, 총 n(n-1)&#x2F;2번 반복하면 정렬이 끝난다.<br>그렇다면 선택 정렬의 시간 복잡도는 O(N^2)임을 알 수 있다(선택 정렬의 최선, 최악, 평균 시간 복잡도는 동일하다)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i, j, min, index, temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  min = <span class="number">9999</span>;</span><br><span class="line">  <span class="keyword">for</span> (j = i; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (min &gt; array[j]) &#123;</span><br><span class="line">      min = array[j];<span class="comment">// 최솟값 저장</span></span><br><span class="line">      index = j; <span class="comment">// 최솟 값 위치(인덱스) 저장</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  temp = array[i];</span><br><span class="line">  array[i] = array[index];</span><br><span class="line">  array[index] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ul><li>간단하게 구현할 수 있으나 비효율적이다.</li><li>추가적인 메모리 소모가 적다<ul><li>따로 계산을 위한 공간을 필요로 하지 않는다.</li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://gmlwjd9405.github.io/2018/05/06/algorithm-selection-sort.html">[알고리즘] 선택 정렬이란</a><br><a href="https://devuna.tistory.com/28">[정렬] 선택정렬(Selection Sort)의 개념&#x2F;Java코드&#x2F;시간복잡도&#x2F;공간복잡도</a><br><a href="https://st-lab.tistory.com/168">[정렬 알고리즘 모음]</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 블로그 오류 해결</title>
      <link href="/2022/03/10/blog_fixHexoBlog/"/>
      <url>/2022/03/10/blog_fixHexoBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Blog-Error-해결"><a href="#Hexo-Blog-Error-해결" class="headerlink" title="Hexo Blog Error 해결"></a>Hexo Blog Error 해결</h1><h2 id="Category-amp-amp-tags-화면-렌더링-오류"><a href="#Category-amp-amp-tags-화면-렌더링-오류" class="headerlink" title="Category &amp;&amp; tags 화면 렌더링 오류"></a>Category &amp;&amp; tags 화면 렌더링 오류</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><ul><li>source\tags\index.md에서 type: “tags” 또는 layout: tags를 추가한다.</li><li>헥소 블로그의 경우 카테고리와 태그 페이지를 직접 만드는데 <strong>hexo new page tags</strong> 명령어를 입력하여 index.md를 만들면 layout이나 type 옵션이 추가 되어 있지않다.<ul><li>페이지를 만들 때 scaffold 양식 그대로 만들기 때문이다</li></ul></li><li>category도 똑같은 방식대로 해결하면 된다</li></ul><h2 id="Github-배포-안됨"><a href="#Github-배포-안됨" class="headerlink" title="Github 배포 안됨"></a>Github 배포 안됨</h2><ul><li>git 모듈이 설치가 안되어 있어서 그런 것이다. 그냥 설치하면 된다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save hexo-deployer-git</span></span><br></pre></td></tr></table></figure><h2 id="이미지-렌더링-안될-때"><a href="#이미지-렌더링-안될-때" class="headerlink" title="이미지 렌더링 안될 때"></a>이미지 렌더링 안될 때</h2><ul><li>로컬 서버에서는 이미지가 보이는데, 배포하면 이미지가 404 not found가 뜨는 오류가 있었다.</li><li>이미지 확장자를 대문자 JPG로 했었는데, jpg로 바꾸니까 오류 해결</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>헥소 블로그로 가쟈!</title>
      <link href="/2022/03/10/blog_hexoBlog%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <url>/2022/03/10/blog_hexoBlog%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="왜-Hexo로-가는거야"><a href="#왜-Hexo로-가는거야" class="headerlink" title="왜 Hexo로 가는거야?"></a>왜 Hexo로 가는거야?</h1><p>Jekyll이 확실히 편하긴한데 몬가 로컬에서 실행시킬 때도 그렇고 빌드업 시간이 늘어나는게 맘에 걸려서 이유를 찾다보니 그냥 hexo로 옮기면 되겠다 싶었다. hexo가 속도는 확실히 빠르기도 하고 Node.js 기반이라 겸사겸사 공부도 할 수 있을거 같아서도 큰 이유 중 하나이다.</p><h1 id="Get-it-start-Hexo-Blog"><a href="#Get-it-start-Hexo-Blog" class="headerlink" title="Get it start Hexo Blog"></a>Get it start Hexo Blog</h1><h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><h3 id="필수-설치-사항"><a href="#필수-설치-사항" class="headerlink" title="필수 설치 사항"></a>필수 설치 사항</h3><ul><li>Node.js</li><li>Git</li><li>Hexo 설치<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h3 id="블로그-초기-세팅"><a href="#블로그-초기-세팅" class="headerlink" title="블로그 초기 세팅"></a>블로그 초기 세팅</h3><ul><li>주의 사항<ul><li>hexo는 github repo에 jekyll처럼 코드를 올리지 않아요.<ul><li>때문에 repo에는 생성된 페이지만 올라갑니다</li><li>hexo deploy하면 알아서 배포 해줍니다</li><li>모르고 push하면 충돌 일어납니다(경험담..)</li><li>backup 걱정이 그래서 생기는데 google에 git submodule 검색하면 해결책이 나옵니다<ul><li>저는 그냥 cloud에 올려버리고 거기서 실행하고 있습니다(편안)</li></ul></li></ul></li></ul></li></ul><ol><li>Hexo 블로그 초기화 및 필요 라이브러리 설치</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ol start="2"><li>Theme 설치</li></ol><ul><li>마음에 드는 테마를 고른 후 themes 폴더에 넣습니다</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd folder</span><br><span class="line">$ git clone &lt;theme의 git url&gt; thems\&lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>config.yml에서 원하는 테마로 바꿉니다<ul><li>default는 아마 landscape 테마 일거에요</li></ul></li></ul><ol start="3"><li>Hexo Blog 배포</li></ol><ul><li>아래 커맨드는 배포 및 로컬에서 블로그를 실행하는 명령어 입니다</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy --g &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><h3 id="블로그-꾸미기"><a href="#블로그-꾸미기" class="headerlink" title="블로그 꾸미기"></a>블로그 꾸미기</h3><p>hexo가 중국인 개발자가 만들어서 docs가 중국어가 많다고 하는데 영어로 번역해서 보니까 그냥저냥 할만합니다. 그리고 docs가 되게 자세히 나와있어 조곰씩 보면서 하면 금방 할 수 있어요 jekyll 보다 구조가 단순한거 같습니다. 제가 쓰는 테마는 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a> 입니다.</p><ul><li><p>제가 쓰는 테마 기준으로 설명할게요 하지만 큰 틀은 같으니 걱정 안하셔도 됩니다</p></li><li><p>butterfly theme</p><ul><li>pc 와 mobile에서 접근할 때 동적으로 화면이 조절이 되서 요걸로 했습니다.</li><li>카테고리 정리도 편합니다</li><li>document가 자세히 나와 금방 따라할 수 있습니다</li></ul></li><li><p>theme&#x2F;butterfly&#x2F;config.yml 수정</p><ul><li>각각의 옵션 마다 주석이 달려 있습니다</li></ul></li><li><p>hexo에서 각주 쓰기</p><ul><li>각주를 지원 안해서 따로 설치 해야합니다<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm un hexo-renderer-marked --save</span><br><span class="line">$ npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure></li><li>root 디렉터리의 config.yml에 아래 코드를 넣습니다<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">markdown:</span><br><span class="line">render:</span><br><span class="line">  html: true</span><br><span class="line">  xhtmlOut: false</span><br><span class="line">  breaks: true</span><br><span class="line">  linkify: true</span><br><span class="line">  typographer: true</span><br><span class="line">  quotes: &#x27;“”‘’&#x27;</span><br><span class="line">plugins:</span><br><span class="line">  - markdown-it-abbr</span><br><span class="line">  - markdown-it-footnote</span><br><span class="line">  - markdown-it-ins</span><br><span class="line">  - markdown-it-sub</span><br><span class="line">  - markdown-it-sup</span><br><span class="line">anchors:</span><br><span class="line">  level: 2</span><br><span class="line">  collisionSuffix: &#x27;v&#x27;</span><br><span class="line">  permalink: true</span><br><span class="line">  permalinkClass: header-anchor</span><br><span class="line">  permalinkSymbol: ¶</span><br></pre></td></tr></table></figure></li></ul></li><li><p>hexo 블로그 이미지 올리기</p><ul><li>hexo의 경우 &#x2F;img&#x2F;&lt;이미지&gt; 식으로 더 짧고 간단하게 이미지에 접근 할 수 있습니다</li><li>하지만 thumnail, background, post에 들어갈 이미지가 가끔 적용이 안될 때가 있습니다</li><li>github repo - issues 에 이미지를 올리고 링크를 따와서 붙여넣기 하면 됩니다</li><li>google drive에서도 해봤는데 되긴 되는데 로딩 속도가 깃허브가 더 빠릅니다<ul><li>이게 나름 응급책이긴한데 링크에서 이미지 값을 받아오는 거라 로딩 시간이 맘에 안듭니다</li><li>아직 왜 가끔 이미지가 안올라가는지 이유를 못찾아서 이렇게 합는 중입니다</li></ul></li></ul></li></ul><h2 id="Hexo-명령어"><a href="#Hexo-명령어" class="headerlink" title="Hexo 명령어"></a>Hexo 명령어</h2><ul><li>hexo clean<ul><li>기존의 캐시들을 지워버립니다</li><li>가끔 렌더링 하다가 오류 발생할 때 사용함</li></ul></li><li>hexo generate<ul><li>블로그 페이지를 생성합니다</li></ul></li><li>hexo deploy<ul><li>블로그 페이지를 배포합니다</li></ul></li><li>hexo server<ul><li>로컬에서 hexo 블로그를 실행시킵니다</li><li>default port는 4000입니다</li><li>-p 옵션으로 포트를 조정할 수 있습니다</li></ul></li><li>hexo list [post|category|route|page]<ul><li>선택한 인자들의 정보를 출력한다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jekyll set up</title>
      <link href="/2022/03/10/blog_jekyllBlog%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <url>/2022/03/10/blog_jekyllBlog%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>내가 쓰는 jekyll theme은 minimal-mistakes 보편적이라 참고할 것도 많고 setup이 편하다</p><h2 id="Jekll-setting"><a href="#Jekll-setting" class="headerlink" title="Jekll setting"></a>Jekll setting</h2><ul><li>준비물 : jekyll theme, git, ruby(난 2.6.4 쓰는 중)</li></ul><ul><li>github에 포스트를 커밋하고 블로그를 직접확인하는 것도 좋지만 너무 느려서 local에서 실행해서 확인하는게 훠얼씬 편하다</li></ul><ol><li><p>git bash를 로컬 repo에서 실행</p></li><li><p>jeykll 관련 install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ gem install jekyll</span><br><span class="line">$ gem install minima</span><br><span class="line">$ gem install bundler</span><br><span class="line">$ gem install jekyll-feed</span><br><span class="line">$ gem install tzinfo-data</span><br></pre></td></tr></table></figure></li><li><p>bundle install</p><p>gem파일에서 필요한 것들을 읽고 다운로드 받아주는 똑똑이임</p></li><li><p>jekyll serve</p></li></ol><ul><li><p>–livereload : 수정마다 새로 고침</p></li><li><p>여기까지 하면 로컬에서 실행할 수 있음</p></li><li><p>local에서 post 볼 때 포스트 이름이 한글이면 weblick 에러뜬다.</p></li></ul><h2 id="YML-형식"><a href="#YML-형식" class="headerlink" title="YML 형식"></a>YML 형식</h2><p>jekyll post의 경우에는 yml 형식에 따라 포스트 세부 설정을 할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:  &quot;Blog post YML 양식&quot;</span><br><span class="line">excerpt: &quot;&quot;</span><br><span class="line"></span><br><span class="line">toc_sticky : true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>title : 제목</li><li>excerpt : 대략적 소개(게시글 리스트에 표시됨 )</li><li>categories : 카테고리 분류<ul><li>theme 자체적으로 새로운 카테고리를 입력할 경우 그 카테고리를 생성해준다.</li></ul></li><li>tags : 태그 분류</li><li>toc : 헤더를 읽고 표시</li><li>toc_sticky : toc 고정</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jeykll theme 꾸미기</title>
      <link href="/2022/03/10/blog_jeykllTheme%EA%BE%B8%EB%AF%B8%EA%B8%B0/"/>
      <url>/2022/03/10/blog_jeykllTheme%EA%BE%B8%EB%AF%B8%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="minimal-mistakes-skin-변경"><a href="#minimal-mistakes-skin-변경" class="headerlink" title="minimal_mistakes skin 변경"></a>minimal_mistakes skin 변경</h2><p>확실히 많이 쓰이는 테마인 만큼 테마안에서도 skin을 변경할 수 있다.<br>개인적으로 default skin은 칙칙하기도하고 답답해서 난 contrast skin으로 변경했다.</p><ul><li>_config.yml - minimal_mistakes_skin</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minimal_mistakes_skin: &quot;default&quot; # &quot;air&quot;, &quot;aqua&quot;, &quot;contrast&quot;, &quot;dark&quot;, &quot;dirt&quot;, &quot;neon&quot;, &quot;mint&quot;, &quot;plum&quot; &quot;sunrise&quot;</span><br></pre></td></tr></table></figure><p>Dark도 괜찮은듯? 아이폰 다크모드 느낌나는데 글 쓰는 지금이 봄이라 그닥 하고 싶지 않다.</p><p>근데 막상 써보니 색감이 이상하다. 랜덤박스에서 색깔 뽑아서 쓴거같은? 이름에 충실한 스킨인가</p><h2 id="Site-default-logo-image-변경"><a href="#Site-default-logo-image-변경" class="headerlink" title="Site default logo image 변경"></a>Site default logo image 변경</h2><ul><li>_config.yml - logo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logo : /assets/images/500x300.png</span><br></pre></td></tr></table></figure><ul><li>logo 가 뭔고하니 Blog title 옆에 이미지로 띄워진다.</li></ul><p><img src="https://user-images.githubusercontent.com/37897508/78419499-447b2000-7681-11ea-9b9b-8353098b52c7.jpg" alt="test"></p><p>보통은 assets 하위 폴더에 images라는 폴더를 만들어 사진을 저장하고 상대경로로 이미지를 가지고 온다.</p><ul><li>(theme docs에서도 권장하는 내용이더라)</li></ul><h2 id="Navigation-Bar-수정"><a href="#Navigation-Bar-수정" class="headerlink" title="Navigation Bar 수정"></a>Navigation Bar 수정</h2><ul><li>_data&#x2F;navigation.yml:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">  - title: &quot;Home&quot;</span><br><span class="line">    url: https://goberomsu.github.io/</span><br><span class="line"></span><br><span class="line">  - title: &quot;Categories&quot;</span><br><span class="line">    url: /categories/</span><br><span class="line">  - title: &quot;Tags&quot;</span><br><span class="line">    url: /tags/</span><br></pre></td></tr></table></figure><ul><li>title : navigation에 표시될 이름</li><li>url : 링크 (permerlink, hotlink 다 된다. )</li></ul><h2 id="Font-크기-변경"><a href="#Font-크기-변경" class="headerlink" title="Font 크기 변경"></a>Font 크기 변경</h2><ul><li>_sass&#x2F;minimal-mistakes&#x2F;_variables.scss</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$doc-font-size: 14 !default;</span><br></pre></td></tr></table></figure><p>default가 16인데 조금 큰거 같아 14로 바꿨다.</p><h2 id="Text-Color-변경"><a href="#Text-Color-변경" class="headerlink" title="Text Color 변경"></a>Text Color 변경</h2><ul><li>_sass&#x2F;minimal-mistakes&#x2F;skins&#x2F;해당테마.scss</li></ul><p>contrast skin으로 바꿨는데 다 좋은데 뭐랄까 Post가 파란글씨로 뜨는게 맘에 안들어서 직접 들어가서 바꿨다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* Colors */</span><br><span class="line"></span><br><span class="line">$text-color: #000 !default;</span><br><span class="line">$muted-text-color: $text-color !default;</span><br><span class="line">$primary-color: #ff0000 !default;</span><br><span class="line">$border-color: mix(#fff, $text-color, 75%) !default;</span><br><span class="line">$footer-background-color: #000 !default;</span><br><span class="line">$link-color: #000000 !default;</span><br><span class="line">$masthead-link-color: $text-color !default;</span><br><span class="line">$masthead-link-color-hover: $text-color !default;</span><br><span class="line">$navicon-link-color-hover: mix(#fff, $text-color, 80%) !default;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/37897508/78421354-e99df480-7691-11ea-826c-45caa0f47d63.JPG" alt="test"></p><p>visual stuido code를 이용할 경우 마우스 커서가 #에 가까이가면 RGB 설정 GUI가 뜬다.<br>그래서 직접 색상 코드를 입력하거나 그냥 고르면 된다.</p><h2 id="Breadcrumbs-달기"><a href="#Breadcrumbs-달기" class="headerlink" title="Breadcrumbs 달기"></a>Breadcrumbs 달기</h2><ul><li>breadcrum 이란 게시물의 현재 경로를 표시해 주는 것</li><li>_config.yml -&gt; breadcrumbs : <strong>true</strong> 변경</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog 초기 설정하는 방법</title>
      <link href="/2022/03/10/blog_setHexoBlog/"/>
      <url>/2022/03/10/blog_setHexoBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="포스트-저장-레포지터리"><a href="#포스트-저장-레포지터리" class="headerlink" title="포스트 저장 레포지터리"></a>포스트 저장 레포지터리</h2><p>Hexo 블로그는 generate 과정에서 생성된 Public 폴더 내용들을 깃허브 레퍼지터리에 뿌려 웹사이트를 생성한다</p><p>나머지 파일들은 따로 백업을 해야하는데 나 같은 경우 처음에는 onedrive를 작업환경에 동기화해서 사용했었다. 하지만 블로그를 빌딩할 때마다 함께 시작하는 노트북의 비행기 소리가 시끄러워 github에 레퍼지터리를 따로 파기로 했다.</p><p>블로그 배포를 할 때 hexo-deployer-git을 사용하는데 그래선지 따로 작업 폴더에는 git이 없어서 submodule 필요 없이 레퍼지터리를 새로 생성했다.</p><h3 id="remote-repo-가져오기"><a href="#remote-repo-가져오기" class="headerlink" title="remote repo 가져오기"></a>remote repo 가져오기</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin main [github repository 주소]</span><br></pre></td></tr></table></figure><h3 id="gitignore-파일-수정"><a href="#gitignore-파일-수정" class="headerlink" title="gitignore 파일 수정"></a>gitignore 파일 수정</h3><p>onedrive를 사용했을 당시 비행기 소리의 원인은 내가 nodemodule을 포함한 작업 폴더 전체를 백업했기 때문이다. 같은 실수를 반복하지 않기 위해 gitignore 설정을 한다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># I don&#x27;t want this</span><br><span class="line">*.json</span><br><span class="line"></span><br><span class="line">.deploy_git/</span><br><span class="line">.github/</span><br><span class="line">themes/</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure><ul><li>*.json 같은 경우 루트 디렉터리(gitigonore 파일이 위치한 장소)에서 json 포맷을 add 하지 않겠다는 소리</li><li>themes&#x2F; 는 디렉터리 themes 하위 어떤 내용도 add 하지 않겠다는 내용이다</li></ul><p>수정을 마쳤다면 커밋하고 푸시까지 해주면 끝이다!</p><h2 id="config-yml-하드링크-생성"><a href="#config-yml-하드링크-생성" class="headerlink" title="_config.yml 하드링크 생성"></a>_config.yml 하드링크 생성</h2><p>hexo 블로그의 경우 config.yml 파일로 웹 페이지 전체적인 세팅을 한다. _config.yml 파일은 루트 디렉터리와 다운 받은 테마에서 볼 수 있다.</p><p>npm을 통해 테마를 다운로드 받은 경우 nodemodule의 하위 디렉터리에 테마가 저장된다. 즉 다운로드 받은 테마의 config 파일을 수정하려면 구석에 숨은 디렉터리를 직접 찾아가야한다.</p><p>처음엔 직접 찾아갔는데 귀찮기도하고 나중에 블로그 갈아엎을 때를 대비해서 블로그 루트 디렉터리에 하드링크를 생성하기로 했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> node_modules/hexo-theme-butterfly/_config.yml butterfly_config.yml</span></span><br></pre></td></tr></table></figure><p>위의 커맨드를 입력하면 루트 디렉터리에 butterfly_config.yml 파일이 생성된 걸 알 수 있다.</p><h2 id="deploy-및-push-script-작성"><a href="#deploy-및-push-script-작성" class="headerlink" title="deploy 및 push script 작성"></a>deploy 및 push script 작성</h2><p>배포 저장소와 포스트 저장소가 다르니 저장할 때 마다 번거러움이 있어 script를 만들었다. 윈도우 환경에서 git bash를 사용해 shell script를 돌릴 수 있었다.</p><h3 id="autoPush-sh-생성-및-alias-등록"><a href="#autoPush-sh-생성-및-alias-등록" class="headerlink" title="autoPush.sh 생성 및 alias 등록"></a>autoPush.sh 생성 및 alias 등록</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> D:\MyBlog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add *</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;Pleas Type Commit Message!!&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">read</span> commitMsg</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;<span class="variable">$commitMsg</span>&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo deploy -g</span></span><br></pre></td></tr></table></figure><p>autoPush.sh 내용은 위와 같다. 블로그의 루트 디렉터리로 이동 후 커밋 메시지를 받고 푸시 후 배포하는 스크립트이다</p><p>이젠 sh 명령어로 git bash 쉘에서 스크립트를 실행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh autoPush.sh</span></span><br></pre></td></tr></table></figure><p>하지만 저것도 귀찮으니 alias에 등록한다</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> aPush=<span class="string">&quot;sh autoPush.sh&quot;</span></span></span><br></pre></td></tr></table></figure><p>이젠 aPush 커맨드만 입력하면 배포까지 한 번에 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 모르겠어요 - 1</title>
      <link href="/2022/03/10/javascript-1/"/>
      <url>/2022/03/10/javascript-1/</url>
      
        <content type="html"><![CDATA[<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>자바스크립트에서 변수를 선언할 때 ES6 전에는 var을 사용했었다.</p><p>변수를 var 형태로 선언할 경우 문제가 발생한다</p><ul><li>변수를 한 번 더 선언할 수 있다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;me&quot;</span>; <span class="comment">//me</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;you&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// you</span></span><br></pre></td></tr></table></figure><p>같은 이름의 변수를 선언해도 오류가 나지 않는다. 이 경우엔 코드가 많아질수록 내가 쓴 변수가 어떻게 돌아가는지 모르는 상황이 발생할 수 있다.</p><ul><li>호이스팅</li></ul><p>변수는 선언 - 초기화 - 할당 순서를 걸쳐 생성된다.</p><p>호이스팅은 함수 안의 선언들을 모아서 함수 유효 범위(스코프) 내의 최상단에서 선언하는 것을 말한다</p><p>var을 통해 변수를 생성할 경우 선언-초기화 과정이 한 번에 일어나기 때문에</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hi); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> hi;</span><br></pre></td></tr></table></figure><p>위와 같이 변수 선언 전에 변수를 사용하더라도 오류가 발생하지 않는다. 컴퓨터 입장에서는 존재는 하지만 누군지 모르는 상태가 되는 것이다</p><p>const는 변수 선언 단계와 초기화 단계가 분리되어 진행하고, 의도치 않는 재선언을 방지한다</p><p>주로 const는 재할당이 필요없는 상수와 객체에 사용한다</p><h2 id="Viewpot"><a href="#Viewpot" class="headerlink" title="Viewpot"></a>Viewpot</h2><p>뷰 포트는 브라우저(스크린)에 현재 보이는 화면이다</p><p>그래서 화면이 달라지면 뷰포트의 넓이와 높이는 달라질 수 있다.</p><p>뷰 포트보다 문서의 크기가 크다면 스크롤이 생기는데, 뷰포트에 안보이는 내용은 스크롤을 통해 볼 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> <span class="comment">// 뷰포트의 높이</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> <span class="comment">// 뷰포트의 넓이</span></span><br></pre></td></tr></table></figure><h2 id="window-addListener와-document-addListener의-차이"><a href="#window-addListener와-document-addListener의-차이" class="headerlink" title="window.addListener와 document.addListener의 차이"></a>window.addListener와 document.addListener의 차이</h2><p>window는 브라우저 그 자체이고, document는 브라우저 내에 문서를 객체화 한 것이다.</p><p>큰 차이는 없고 window 안에 document도 포함된다.</p><p>그래서 addListener를 사용할 때 트리거의 기준이 브라우저인가 DOM인가 조금만 고려하면서 쓰면 된다</p><h2 id="화살표-함수-arrow-function-expression"><a href="#화살표-함수-arrow-function-expression" class="headerlink" title="화살표 함수 (arrow function expression)"></a>화살표 함수 (arrow function expression)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mobile-toc-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($cardTocLayout).<span class="title function_">getPropertyValue</span>(<span class="string">&quot;opacity&quot;</span>) === <span class="string">&quot;0&quot;</span></span><br><span class="line">  )</span><br><span class="line">    mobileToc.<span class="title function_">open</span>();</span><br><span class="line">  <span class="keyword">else</span> mobileToc.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위의 코드에선 () &#x3D;&gt; 형태로 함수를 사용하는데 이를 arrow funciton 즉 화살표 함수이다</p><p>화살표 함수를 쓰면 표현이 간결해지는 장점이 있다</p><p>화살표 함수는 일반적인 함수 표현에 비해 제한점이 있다</p><ul><li>애로우 함수 자체의 this나 super를 사용할 수 없다<ul><li>대신 화살표 함수를 둘러싸는 영역의 this를 사용한다</li></ul></li><li>스코프 지정을 할 때 call, apply, bind 메소드를 사용할 수 없다</li></ul><p>일반적인 형태는 아래와 같다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2 ----,paramN) =&gt; &#123; statement &#125;</span><br></pre></td></tr></table></figure><p>특히 매개 변수가 없을 경우 ()를 생략할 수 있다, statement가 한 개 일 경우 {}도 생략 가능하다</p><h2 id="익명함수"><a href="#익명함수" class="headerlink" title="익명함수"></a>익명함수</h2><p>익명 함수는 함수 리터럴 방식으로 쓰여진 이름 없는 함수이다.</p><p>리터럴 방식이란 흔히 우리는 변수를 선언할 때 var a &#x3D; 10 이렇게 선언하는데 이를 리터럴 방식이라고 한다</p><p>함수 리터럴 방식이란 함수를 말 그대로 변수에 저장하는 것을 말한다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funB = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 코드는 일반적인 익명 함수의 형식이다. 익명 함수로 선언된 경우 호이스팅 될 때 변수 부분만 상단부로 올라 간다. 함수 호출이 선언하는 곳보다 아래에 있어야한다.<br>이와 같은 특징 때문에 불필요한 메모리 사용을 줄일 수 있다.<br>]</p><h2 id="scrollBy-란"><a href="#scrollBy-란" class="headerlink" title="scrollBy()란"></a>scrollBy()란</h2><p>window.scrollBy()는 주어진 양만큼 document를 스크롤하는 함수이다<br>스크롤 이동을 픽셀 단위로 하기 때문에 Poisiton들의 값에는 이동하고 싶은 크기의 픽셀을 적으면된다</p><p>{} 안의 behavior의 Option은 smooth, instant, auto(default)가 있다.</p><ul><li>smooth : 스크롤을 부드럽게 이동시킨다</li><li>instant : 주어진 픽섹말큼 한 번에 이동(점프)한다.</li><li>auto(default) : 브라우저에 따라 선택되게함</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(X <span class="title class_">Position</span>,Y <span class="title class_">Position</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBY</span>(&#123;<span class="attr">top</span>:Y <span class="title class_">Position</span>,<span class="attr">left</span>:X <span class="title class_">Position</span>,<span class="attr">behavior</span>:<span class="string">&#x27;option&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>Y Position이 음수이면 위로, 양수이면 아래로 스크롤한다.<ul><li>Document의 시작이 0, 끝이 최대 길이이기 때문이다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript로 Todolist 만들기</title>
      <link href="/2022/03/10/javascript_Todolist%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2022/03/10/javascript_Todolist%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="코드-리뷰"><a href="#코드-리뷰" class="headerlink" title="코드 리뷰"></a>코드 리뷰</h1><h2 id="index-html-amp-amp-css"><a href="#index-html-amp-amp-css" class="headerlink" title="index html &amp;&amp; css"></a>index html &amp;&amp; css</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;js-clock&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>00:00<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;js-form form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;what is your name?&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;js-greetings greetings&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;clock.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;greeting.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form</span>,</span><br><span class="line"><span class="selector-class">.greetings</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showing</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="새로-알게-된-것들"><a href="#새로-알게-된-것들" class="headerlink" title="새로 알게 된 것들"></a>새로 알게 된 것들</h3><ul><li>html에서 class 선언 할 때 nickname을 쓸 수 있다<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;js-form form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;what is your name?&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form</span>,</span><br><span class="line"><span class="selector-class">.greetings</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위에서 볼 수 있다시피 class name을 form으로 해도 인식한다<ul><li>세상 편하지 인생 실전이였다</li></ul></li></ul></li></ul><ul><li>script tag 쓸 때 src로 js 파일과 연결해야한다<ul><li>까먹지마!</li></ul></li><li>css 연결하는 법 까먹지 말아라<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><ul><li>기능 별로 js파일을 나눈 후 파일 안에서도 function 분할을 하여 코드를 간결히 하라<ul><li>객체의 중요성이라 생각한다</li></ul></li></ul><h3 id="clock-js"><a href="#clock-js" class="headerlink" title="clock.js"></a>clock.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clockContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-clock&quot;</span>),</span><br><span class="line">  clockTitle = clockContainer.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  clockTitle.<span class="property">innerText</span> = <span class="string">` <span class="subst">$&#123;hours &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;hours&#125;</span>`</span> : hours&#125;</span> : <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    minutes &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;minutes&#125;</span>`</span> : minutes</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span> : <span class="subst">$&#123;seconds &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;seconds&#125;</span>`</span> : seconds&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(getTime, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h4 id="새로-알게-된-것들-1"><a href="#새로-알게-된-것들-1" class="headerlink" title="새로 알게 된 것들"></a>새로 알게 된 것들</h4><ul><li>javascript에서 html에 접근하는 것도 crawler와 다르지 않다<ul><li>document가 index.html의 정보를 객체로 긁어오면 그 정보를 토대로 이벤트를 발생시키는 것이 기본 개념</li></ul></li><li>삼항 연산자 오랜만에 본다!</li><li>setInterval(function, interveral time)<ul><li>실행시킬 함수와 함수를 다시 실행시킬 간격을 인수로 받는다</li></ul></li><li>,를 잘사용하자 코드의 가독성이 올라간다</li></ul><h3 id="greeting-js"><a href="#greeting-js" class="headerlink" title="greeting.js"></a>greeting.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-form&quot;</span>),</span><br><span class="line">  input = form.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>),</span><br><span class="line">  greeting = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-greetings&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_LS</span> = <span class="string">&quot;currentUser&quot;</span>,</span><br><span class="line">  <span class="variable constant_">SHOWING_CN</span> = <span class="string">&quot;showing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintGreeting</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  form.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="variable constant_">SHOWING_CN</span>);</span><br><span class="line">  greeting.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable constant_">SHOWING_CN</span>);</span><br><span class="line">  greeting.<span class="property">innerText</span> = <span class="string">`Hello <span class="subst">$&#123;text&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">USER_LS</span>);</span><br><span class="line">  <span class="keyword">if</span> (currentUser === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// she is not</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">paintGreeting</span>(currentUser);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">loadName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h4 id="새로-알게-된-것들-2"><a href="#새로-알게-된-것들-2" class="headerlink" title="새로 알게 된 것들"></a>새로 알게 된 것들</h4><ul><li>html, javascript, css의 연결 방식<ol><li>javascript에서 document로 html 소스를 읽고 객체로 만든다</li><li>javascript에서는 받은 소스로 html 소스에 접근한다<ol><li>function</li><li>variable</li><li>etc</li></ol></li><li>html에서 선언한 class, id, tag를 변환</li><li>예시를 든다면 css 안에 여러 옵션을 만들어 놓는다</li><li>html tag를 바꿈으로써 이벤트를 발생시킴</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>바닐라 자바스크립트로 Snap scroll 구현</title>
      <link href="/2022/03/10/javascript_makeSnapScroll/"/>
      <url>/2022/03/10/javascript_makeSnapScroll/</url>
      
        <content type="html"><![CDATA[<h2 id="사전-조사"><a href="#사전-조사" class="headerlink" title="사전 조사"></a>사전 조사</h2><h3 id="Snap-Scroll-구현-방안"><a href="#Snap-Scroll-구현-방안" class="headerlink" title="Snap-Scroll 구현 방안"></a>Snap-Scroll 구현 방안</h3><p>스냅 스크롤은 <a href="https://alvarotrigo.com/fullPage/ko/">fullPage.js</a>나 이번에 CSS 업데이트하면서 추가된 CSS-Snap-Scroll 기능으로 구현한다</p><p>보통 스크롤을 트리거로 사용해 페이지를 바꾸는걸 목적으로하는데 나같은 경우 한 페이지 내에서 제목 단위로 애니메이션을 구현하고 싶었다.</p><p>스크롤을 한 번 하면 다음 제목까지 주르륵 내려가는 애니메이션을 상상했는데 찾아보니 가장 비슷한 애니메이션이 Snap-scroll 애니메이션이었다. 하지만 fullPage.js나 css 내장 Snap-Scroll 기능을 사용했지만 실패해서 바닐라 자바스크립트로 구현해보기로 했다</p><p>(2021.09.22) CSS-SNAP-Scroll 도전해봤는데 안된다. 내가 포스트를 쓰면 템플릿 엔진을 거쳐서 포스트를 html로 변환한다. page-content div 하위에 h2 태그 기준으로 div를 묶어 올리려면 엔진을 뜯어 고쳐야하는 것도 문제인데 CSS-SNAP-Scroll을 쓰더라도 내 생각대로 구현하려면 별도의 스크롤을 또 써야한다</p><h4 id="블로그-소스-분석"><a href="#블로그-소스-분석" class="headerlink" title="블로그 소스 분석"></a>블로그 소스 분석</h4><p>현재 내가 쓰고 있는 theme은 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>이다.<br>butterfly 테마의 layout 디렉터리 하위의 post.pug를 보면 포스트의 내용들이 page-content 클래스 하위에 뿌려진다.</p><p><img src="/img/makeSnapScroll_pug.jpg" alt="post-pug"><br><img src="/img/makeSnapScroll_pageContent.jpg" alt="블로그 포스트의 html 소스"></p><p>post 레이아웃은 &#x2F;source&#x2F;css&#x2F;_layout&#x2F;post.styl에 정의되어 있다.<br>레이아웃은 css 프리프로세서인 styl을 사용해 아래 사진의 beautify()처럼 함수로 형식들을 묶어서 사용하고 있었다.</p><p><img src="/img/makeSnapScroll_css.jpg" alt="post.styl"></p><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><h3 id="목표-amp-amp-아이디어"><a href="#목표-amp-amp-아이디어" class="headerlink" title="목표 &amp;&amp; 아이디어"></a>목표 &amp;&amp; 아이디어</h3><p>태그들과 현재 뷰포트의 절대 위치를 계산 후 뷰포트의 탑과 가장 가까운 태그로 이동하게 한다</p><ul><li>뷰포트 내에 H2 Tag가 유일할 때만 애니메이션을 실행 시킨다</li><li>뷰포트의 3 등분하여 최상단을 제외한 영역에 h2 태그가 있을 때 애니메이션을 실행한다</li><li>다운 스크롤 할 때만 애니메이션을 실행한다</li></ul><h4 id="아이디어"><a href="#아이디어" class="headerlink" title="아이디어"></a>아이디어</h4><ol><li>h2 태그들의 위치를 세션 브라우저에 저장하자</li><li>태그들의 절대위치만 기억해두고, 뷰포트 안에 있는지만 체크해서 애니메이션을 실행시키면 되지 않을까?</li></ol><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h2Tags = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;h2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> viewPortHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"><span class="keyword">let</span> bPosition = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line"><span class="keyword">const</span> h2Height = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> viewPortDownBuffer = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">let</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setTagsStorage = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (tag <span class="keyword">of</span> h2Tags) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(count, tag.<span class="property">offsetTop</span> - h2Height);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tag&quot;</span> + count + <span class="string">&quot; : &quot;</span> + sessionStorage.<span class="title function_">getItem</span>(count));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">setTagsStorage</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTag = <span class="keyword">function</span> (<span class="params">tagNum</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(sessionStorage.<span class="title function_">getItem</span>(tagNum));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTagsLength = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> h2Tags.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 뷰포트 높이의 2/3 ~ 1 안에 태그가 있는가</span></span><br><span class="line"><span class="keyword">const</span> checkInTag = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="title function_">getTagsLength</span>(); count++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">pageYOffset</span> &lt;= <span class="title function_">getTag</span>(count) &amp;&amp;</span><br><span class="line">      <span class="title function_">getTag</span>(count) &lt; <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + (viewPortHeight - viewPortDownBuffer)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkTagOnTop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="title function_">getTagsLength</span>(); count++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">pageYOffset</span> &lt; <span class="title function_">getTag</span>(count) &amp;&amp;</span><br><span class="line">      <span class="title function_">getTag</span>(count) &lt; <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + <span class="number">20</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkDown = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aPosition = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">if</span> (bPosition &lt; aPosition) &#123;</span><br><span class="line">    bPosition = aPosition;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  bPosition = aPosition;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> snapScroll = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">checkTagOnTop</span>() &amp;&amp; <span class="title function_">checkInTag</span>()) &#123;</span><br><span class="line">    <span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">checkDown</span>()) &#123;</span><br><span class="line">    <span class="title function_">snapScroll</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="function-설명"><a href="#function-설명" class="headerlink" title="function 설명"></a>function 설명</h3><h4 id="setTagsStorage"><a href="#setTagsStorage" class="headerlink" title="setTagsStorage"></a>setTagsStorage</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setTagsStorage = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (tag <span class="keyword">of</span> h2Tags) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(count, tag.<span class="property">offsetTop</span> - h2Height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>setTagsStorage는 문서의 상단부터 순차적으로 h2 태그들의 위치를 세션 스터리지에 저장하는 함수이다</p><p>태그 값들을 저장하기 위해서는 세션 스터리지를 이용했는데 태그들의 위치만 저장하면 되는 간단한 일이라 데이터베이스를 이용해야할 필요성을 못 느껴 브라우저에 저장하는게 나을 것 같다 생각했기 때문이다</p><p>브라우저에 데이터를 저장하는 방법으로는 로컬 스터리지, 세션 스터리지 등이 있는데 로컬 스터리지 같은 경우 브라우저에 값이 저장된 후 사용자가 따로 제거하지 않을 경우 계속 저장되기 때문에 사용하지 않았다.</p><p>세션 스터러지 같은 경우는 브라우저를 닫을 때 저장된 값들이 지워진다.</p><p>(2021.10.03) 그럼에도 페이지를 떠날 때 세션 스터리지 값을 지우는게 좋은데 아직 구현하진 않았다. 일단은 페이지를 옮길 때 마다 태그 값들을 덮어 씌워서 작동하고 있다.</p><h4 id="getTags"><a href="#getTags" class="headerlink" title="getTags"></a>getTags</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTag = <span class="keyword">function</span> (<span class="params">tagNum</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(sessionStorage.<span class="title function_">getItem</span>(tagNum));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>getTag는 브라우저에 저장되어 있는 값들을 키 값을 이용해 가져오는 메소드이다.<br>세션 스터리지에 저장된 value는 String이라서 정수로 바꿔준 후 반환하게 하였다.</p><h4 id="getTagsLength"><a href="#getTagsLength" class="headerlink" title="getTagsLength"></a>getTagsLength</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTagsLength = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> h2Tags.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>h2Tags는 document의 쿼리 셀렉터로 문서 내 h2 값들이 저장되어 있는 노드 배열이다.</p><p>문서 내 h2 값들이 얼마나 저장되어 있는지 알 수 있다.</p><h4 id="checkInTag"><a href="#checkInTag" class="headerlink" title="checkInTag"></a>checkInTag</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkInTag = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="title function_">getTagsLength</span>(); count++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">pageYOffset</span> &lt;= <span class="title function_">getTag</span>(count) &amp;&amp;</span><br><span class="line">      <span class="title function_">getTag</span>(count) &lt;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + (viewPortHeight - viewPortDownBuffer)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>checkInTag는 현재 뷰포트(브라우저가 유저에게 현재 보여주고 있는 화면)에 태그가 있다면 true를 반환하는 함수이다<br>단 뷰포트에서 하단에서는 애니메이션을 발생시키고 싶지 않아 viewPortDownBuffer를 이용해 뷰포트 크기를 제한했다.</p><h4 id="checkTagOnTop"><a href="#checkTagOnTop" class="headerlink" title="checkTagOnTop"></a>checkTagOnTop</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkTagOnTop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= <span class="title function_">getTagsLength</span>(); count++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">pageYOffset</span> &lt; <span class="title function_">getTag</span>(count) &amp;&amp;</span><br><span class="line">      <span class="title function_">getTag</span>(count) &lt; <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + <span class="number">20</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>뷰포트 최상단에 태그가 현재 위치해 있다면 true를 반환하는 함수이다.<br>스크롤 속도가 너무 빠르면 정해 놓은 값을 지나가버리는 버그가 있어서 뷰포트 상단 값과 비교하는게 아니라 뷰포트 상단 일정 범위 내에 있는지 체크하게 함수를 수정했다.</p><h4 id="checkDown"><a href="#checkDown" class="headerlink" title="checkDown"></a>checkDown</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkDown = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aPosition = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">if</span> (bPosition &lt; aPosition) &#123;</span><br><span class="line">    bPosition = aPosition;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  bPosition = aPosition;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>스크롤 이벤트가 발생하면 스크롤의 현재 위치와 마지막 위치를 비교해 스크롤이 아래로 내려가고 있는지 확인하는 함수이다.</p><p>애니메이션을 다운 스크롤할 때만 애니메이션을 발생시키고 싶어서 추가했다.</p><h4 id="snapScroll-애니메이션-구현"><a href="#snapScroll-애니메이션-구현" class="headerlink" title="snapScroll 애니메이션 구현"></a>snapScroll 애니메이션 구현</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snapScroll = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">checkTagOnTop</span>() &amp;&amp; <span class="title function_">checkInTag</span>()) &#123;</span><br><span class="line">    <span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">checkDown</span>()) &#123;</span><br><span class="line">    <span class="title function_">snapScroll</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>scrollby는 현재 위치에서 스크롤을 지정한 픽셀만큼 이동시키는 함수이다.<br>위에 서술한 check 함수들을 스크롤 이벤트가 발생할 때 마다 체크해서 이동하게 만들었다.</p><h2 id="피드백"><a href="#피드백" class="headerlink" title="피드백"></a>피드백</h2><ol><li>알고리즘 공부의 필요성을 느꼈다.<br> 개발은 문제 해결의 연속이다. 코드를 몇 번 갈아 엎다보니, 근본적으로 알고리즘 능력이 좋았다면 더 빠르게 만들 수 있지 않았을까 싶었다. 지금 내가 짜는 코드가 얼마나 효율적인지 가늠이 안되니까 조심스럽기도 했고, 갑자기 브라우저에서 메모리 소모가 심하다고 알림이 뜨고 하니 이래서 다들 알고리즘 공부를 하는구나 새삼 알아가는 시간이었다.</li><li>테스트 케이스나 코드를 작성하지 않고 만들었다<br> console.log를 열심히 찍어가며 함수들을 구현했지만, 테스트 코드를 사용하지 않은게 아쉽다. 코드가 몇 십 줄 밖에 안되는데 중간 중간 헤맨적이 있는데 좀 더 덜 헤맬 수 있지 않았을까 싶다</li></ol>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 개발환경 세팅</title>
      <link href="/2022/03/10/javascript_%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%84%B8%ED%8C%85/"/>
      <url>/2022/03/10/javascript_%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%84%B8%ED%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="응-뜬금-javascript-하는거냐"><a href="#응-뜬금-javascript-하는거냐" class="headerlink" title="응? 뜬금 javascript 하는거냐?"></a>응? 뜬금 javascript 하는거냐?</h1><p>깊게 공부할 생각은 없고 그냥 코드를 읽으면 이렇게 돌아가는구나 자바스크립트는 이런 언어 이구나 알고 싶다. 그런것도 있고 자바 스크립트의 철학이라던가 워게임 할 때도 필요하고 하니 미리 조곰 해두려고 이 때 아니면 언제 해보냐?</p><h1 id="VScode에서-jscode-개발-환경-세팅"><a href="#VScode에서-jscode-개발-환경-세팅" class="headerlink" title="VScode에서 jscode 개발 환경 세팅"></a>VScode에서 jscode 개발 환경 세팅</h1><ul><li><p>liver server 설치</p><ul><li>파일 - 설정 - liveserver default 브라우저 크롬으로 변환</li></ul></li><li><p>html, js 파일 생성</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>vscode에서 html 파일 생성 후 html:5 입력 후 엔터치면 디폴트 세팅을 해줌</li><li>생성한 js파일을 소스로 받아오게 설정해주자</li></ul></li></ul><p>여기까지 하면 준비 끝! 그래서 테스트 삼아 실행을 해보았다</p><ul><li>liveserver 포트는 5500번으로 열었다</li></ul><p><img src="https://user-images.githubusercontent.com/37897508/81424405-db5f5e80-9190-11ea-8f3e-c72bd784ce67.png" alt="image"><br><img src="https://user-images.githubusercontent.com/37897508/81424421-e5815d00-9190-11ea-9bdb-dd26cbc1cbb7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린 1 일차</title>
      <link href="/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B01%EC%9D%BC%EC%B0%A8/"/>
      <url>/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B01%EC%9D%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="간단한-Recoder-만들기"><a href="#간단한-Recoder-만들기" class="headerlink" title="간단한 Recoder 만들기"></a>간단한 Recoder 만들기</h2><p>책도 있고 유튜브도 있으니까 일단 박치기로 만들어보면서 겪어 보기로 했다. 몸으로 겪는 것은 잘 까먹지 않기 마련이니</p><h3 id="MaiActivity-kt"><a href="#MaiActivity-kt" class="headerlink" title="MaiActivity.kt"></a>MaiActivity.kt</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> output: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mediaRecorder: MediaRecorder? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> state: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        button_start.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    android.Manifest.permission.RECORD_AUDIO</span><br><span class="line">                ) != PackageManager.PERMISSION_GRANTED &amp;&amp; ContextCompat.checkSelfPermission(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">                ) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">//Permission is not granted</span></span><br><span class="line">                <span class="keyword">val</span> permissions = arrayOf(</span><br><span class="line">                    android.Manifest.permission.RECORD_AUDIO,</span><br><span class="line">                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">                    android.Manifest.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">                )</span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissions, <span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                startRecording()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        button_stop.setOnClickListener &#123;</span><br><span class="line">            stopRecording()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startRecording</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//config and create MediaRecorder Object</span></span><br><span class="line">        <span class="keyword">val</span> fileName: String = java.util.Date().getTime().toString() + <span class="string">&quot;.mp3&quot;</span></span><br><span class="line">        output =</span><br><span class="line">            Environment.getExternalStorageDirectory().absolutePath + <span class="string">&quot;/Download/&quot;</span> + fileName <span class="comment">//내장메모리 밑에 위치</span></span><br><span class="line">        mediaRecorder = MediaRecorder()</span><br><span class="line">        mediaRecorder?.setAudioSource((MediaRecorder.AudioSource.MIC))</span><br><span class="line">        mediaRecorder?.setOutputFormat((MediaRecorder.OutputFormat.MPEG_4))</span><br><span class="line">        mediaRecorder?.setAudioEncoder(MediaRecorder.AudioEncoder.AAC)</span><br><span class="line">        mediaRecorder?.setOutputFile(output)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mediaRecorder?.prepare()</span><br><span class="line">            mediaRecorder?.start()</span><br><span class="line">            state = <span class="literal">true</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;레코딩 시작되었습니다.&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IllegalStateException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">stopRecording</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state) &#123;</span><br><span class="line">            mediaRecorder?.stop()</span><br><span class="line">            mediaRecorder?.reset()</span><br><span class="line">            mediaRecorder?.release()</span><br><span class="line">            state = <span class="literal">false</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;중지 되었습니다.&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;레코딩 상태가 아닙니다.&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>자바랑 구성이 비슷하다. 조곰씩 다른 정도</p><ul><li>처음이라 클래스 안에 다 박아두고 했는데 기능이 단순해서 그럴 필요가 없기도하고 다음엔 나눠서해보자</li></ul></li><li><p>코틀린은 상속을 콜론 : 으로 표현한다</p></li><li><p>코틀린은 null에 엄격한데 ?를 사용하면 null을 쓸 수 있다.</p></li><li><p>코틀린과 안드로이드 생명주기를 보면 프로그램이 실행되면 onCreate()부터 시작한다. 그래서 oncreate 자동생성 되는 거였음</p><ul><li>oncreate()는 최초 1회만 실행된다</li><li>onstart()<ul><li>액티비티가 화면으로 보일때 실행되는 메소드</li></ul></li><li>onpause()<ul><li>액티비티를 떠나는 경우 실행되는 메소드</li></ul></li><li>onResume()<ul><li>액티비티가 시작되면 실행되는 메소드, onstart 다음으로 실행됨</li></ul></li><li>onStop()<ul><li>액티비티가 화면에 보이지 않을 때 실행되는 메소드</li></ul></li><li>ondestroy()<ul><li>액티비티가 메모리에서 제거될 때 실행되는메소드</li></ul></li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/37897508/87264079-0c923d00-c4fa-11ea-8065-90195f5db1ea.png" alt="190527_Activity-LifeCycle"></p><ul><li>Toast는 뭔고 하니 잠깐씩 텍스트라던가 알림을 띄우는 기능이다</li><li>자바처럼 리스너를 이용해 움직이다</li><li>약간 체감상 mvc 모델 느낌이다 <ul><li>Kotlin에서 짠 코드를 view(activity_main.xml)의 id와 연결한다</li></ul></li></ul><h3 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/imageView2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;285dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;473dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:srcCompat</span>=<span class="string">&quot;@drawable/record&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/imageView2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;100dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_stop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Stop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/imageView2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;100dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;52dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Voice Recorder&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>뭐 그냥 안드로이드 스튜디오가 gui툴을 지원해줘서 쉽게한다 </li><li>코틀린과는 id를 통해서 연결한다</li><li>html css 생각 나더라</li></ul><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>우리가 만들 앱(실행 파일)의 권한을 지정해준다.</li><li>DB 정의 하는 느낌? 아이콘은 뭘 쓸 것인가 어떤 권한이 있는가 필터를 적용할 것인가</li><li>manifest에 등록하지 않으면 파일간 연결이 안된다</li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 문법 맛보기</title>
      <link href="/2022/03/10/javascript_%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/"/>
      <url>/2022/03/10/javascript_%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript-기본-문법"><a href="#javascript-기본-문법" class="headerlink" title="javascript 기본 문법"></a>javascript 기본 문법</h2><ul><li><p>언어를 이거저거 써보다보니 느끼는 건데 거의 비슷 비슷하다</p></li><li><p><a href="https://opentutorials.org/course/743/4650">생활코딩</a> 보고 튜토리얼 따라하고 쉘 코딩 아니면 node.js 만져볼까 생각 중이다</p></li><li><p><strong>와 오졌다 설레 미쳤어</strong></p><ul><li>Javascirpt가 시대가 흐름에 따라 확장성이라 해야하나 할 수 있는게 많아 졌는데 와우 그냥 다 할 수 있어 멋져 역동적이야 코오,,,</li><li>살짝 그래서 노마드 코더의 바닐라.JS 따라해볼까 생각중</li></ul></li></ul><h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><ul><li>&#x2F;&#x2F;<ul><li>한 줄 주석</li></ul></li><li>&#x2F;* *&#x2F;<ul><li>여러 줄 주석</li></ul></li></ul><h2 id="문자"><a href="#문자" class="headerlink" title="문자"></a>문자</h2><ul><li><p>문자는 ‘ ‘나 “ “ 중 하나로 감싸야한다.</p></li><li><p>문자를 더할 땐 + 사용</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;안녕&quot;</span> + <span class="string">&quot;요런 느낌이랄까?&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>.length : 문자열의 길이를 계산하는 메소드</p></li></ul><h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><ul><li>모든 intruction은 다른 줄에 선언되어야 한다<ul><li>그러고 싶지 않으면 ; 이용하자</li></ul></li><li>변수 생성, 초기화, 사용 단계로 사용하자<ul><li>기본이다!</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">221</span>;</span><br><span class="line"><span class="keyword">let</span> b = a - <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><ul><li>const : 상수</li><li>let : 바뀌어도 되는 변수</li><li>variable : 변수<ul><li>let처럼 바뀔 수 있음</li></ul></li><li>첫 사용은 const, 필요할 때만 let!</li></ul><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><ul><li>&#x3D; : 대입 연산자</li><li>&#x3D;&#x3D; : 동등 연산자<ul><li>값이 같은가?</li></ul></li><li>&#x3D;&#x3D;&#x3D; : 일치 연산자<ul><li>좌우 항이 일치하는가?</li></ul></li><li>!&#x3D; : 같지 않다</li><li>&amp;&amp; : AND 연산자</li><li>|| : OR 연산자</li><li>! : 값을 역전시킴, 부정하는 것이지<ul><li>0 도 관습적으로 false가 될 수 있다</li></ul></li></ul><h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (id == <span class="string">&quot;beomsu&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;아이디가 일치하는군&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;아이디가 일치하지 않습니다&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>사실 별 차이가 없다</li></ul><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;안녕?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>document는 javascript를 이용해 웹페이지 문자를 적는데 콘솔에서 하면 안보인다<ul><li>console.log로 대신할 수 있음</li></ul></li></ul><h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><p>기본 형식은 역시나 비슷하다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수명(인자<span class="number">1</span>,인자<span class="number">2.</span>.. 마지막 인자)&#123;</span><br><span class="line">  코드</span><br><span class="line">  <span class="keyword">return</span> 반환값</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><ul><li>배열 선언을 아래와 같이 하며 된다</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> somthing = <span class="string">&quot;something&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> daysOfWeek = [<span class="string">&quot;mon&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;sun&quot;</span>, <span class="literal">true</span>, something];</span><br></pre></td></tr></table></figure><ul><li>indexing<ul><li>daysOfWeek[2] –&gt; sun</li></ul></li></ul><h3 id="배열-가지고-놀아보기"><a href="#배열-가지고-놀아보기" class="headerlink" title="배열 가지고 놀아보기"></a>배열 가지고 놀아보기</h3><ul><li>.push()<ul><li>괄호 안의 값을 인덱스에 넣어줌</li></ul></li><li>.shift()<ul><li>인덱스의 첫번째 값을 삭제</li></ul></li><li>.pop()<ul><li>인덱스의 마지막 값을 삭제</li></ul></li><li>.sort()<ul><li>정렬 함수</li></ul></li><li>.reveser()<ul><li>역순 정렬</li></ul></li></ul><h2 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h2><p>여기부터 좀 재밌다</p><ul><li>처음에 봤을 땐 딕셔너리 같다 생각했는데 이 형식으로 객체를 저장하고 있다. 웃기네<ul><li>와 소름;; json이 javascript Object Notion이란 뜻인데 어쩐지 json이랑 똑같네 아주 그냥 표현하는게 신기하다</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beomsu = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;beomsu&quot;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">beomsu.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><p>위의 코드를 실행시키면 아래와 같은 화면을 확인할 수 있다.</p><ul><li>코드 리뷰<ul><li>name에 beomsu 저장</li><li>show라는 function 선언<ul><li>show 함수는 이 클래스의 name에 접근해 이름을 출력한다</li></ul></li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/37897508/81466619-02a84100-920e-11ea-835d-234d734b4598.png" alt="image"></p><h2 id="모듈"><a href="#모듈" class="headerlink" title="모듈"></a>모듈</h2><ul><li>자주 사용되는 코드를 별도의 파일로 만들어 필요할 때 가져다가 쓰는거지</li><li>이에 따라서 유지보수 및 메모리 낭비 거기에 웹브라우저에서 사용한다면 속도가 까지 빨라지는 거지</li></ul><ul><li>아래 js와 html 파일은 같은 디렉터리에 있어용</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beomsu = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;beomsu&quot;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      alert(beomsu.show());</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html 코드를 보면 head에서 script source를 받아 오는 걸 볼 수 있다. 저런 느낌으로 자주 사용하는 모듈을 받아오면 된다. 뭐 jquery이런 것들 말이다</li><li>대신 환경마다 소스를 받아오는 방법이 다르다<ul><li>예를 들어 node.js랑 web의 차이랄까</li></ul></li></ul><h2 id="DOM-Document-Object-Module"><a href="#DOM-Document-Object-Module" class="headerlink" title="DOM(Document Object Module)"></a>DOM(Document Object Module)</h2><ul><li>document로 javascript에서 css에 접근 할 수 있다.</li><li>JS에서 내 HTML의 모든 것들은 객체로 바꿔 버려 접근 가능하게 하는 것이지</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;CSS.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Hi this is my first test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CLICKED_CLASS</span> = <span class="string">&quot;clicked&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hasClass = title.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="variable constant_">CLICKED_CLASS</span>);</span><br><span class="line">  <span class="keyword">if</span> (!hasClass) &#123;</span><br><span class="line">    title.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable constant_">CLICKED_CLASS</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    title.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="variable constant_">CLICKED_CLASS</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  title.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClick);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: palegoldenrod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: tomato;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clicked</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: teal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린3일차</title>
      <link href="/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B03%EC%9D%BC%EC%B0%A8/"/>
      <url>/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B03%EC%9D%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="시간-출력-오류-수정"><a href="#시간-출력-오류-수정" class="headerlink" title="시간 출력 오류 수정"></a>시간 출력 오류 수정</h2><ul><li>분명히 시간과 함께 수정되도록 해놓았는데 [쓰레기 값].mp3로 저장되서 수정했다!</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> timeFormat = SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmm&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> time = timeFormat.format(java.util.Date())</span><br><span class="line"><span class="keyword">val</span> fileName: String = time + <span class="string">&quot;.mp3&quot;</span></span><br></pre></td></tr></table></figure><ul><li>SimpleDateFormat()을 이용해 시간 포맷을 설정했더니 해결되었다.</li></ul><h2 id="listview-listener-설정"><a href="#listview-listener-설정" class="headerlink" title="listview listener 설정"></a>listview listener 설정</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.playlist)</span><br><span class="line">view_mp3.adapter = ArrayAdapter(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, mp3List)</span><br><span class="line"></span><br><span class="line">view_mp3.onItemClickListener =</span><br><span class="line">    AdapterView.OnItemClickListener &#123; parent, view, position, id -&gt;</span><br><span class="line">        <span class="keyword">val</span> seletedVoice = parent.getItemAtPosition(position) <span class="keyword">as</span> String</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;<span class="subst">$&#123;Environment.getExternalStorageDirectory()&#125;</span>/Download/&quot;</span>+seletedVoice, Toast.LENGTH_SHORT).show()</span><br><span class="line"></span><br><span class="line">        audioPlay.setDataSource(<span class="string">&quot;<span class="subst">$&#123;Environment.getExternalStorageDirectory()&#125;</span>/Download/&quot;</span>+seletedVoice)</span><br><span class="line">        </span><br><span class="line">        audioPlay.prepare()</span><br><span class="line">        audioPlay.start()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>ArrayAdapter로 리스트뷰와 배열을 연결한다</p></li><li><p>onItemClickListener를 정의한다</p><ul><li>클릭한 아이템의 포지션을 문자열로 받는다<ul><li>받은 문자열의 이름을 toast로 알림</li><li>download 하위 파일 중 같은 이름의 mp3 파일을 찾아 재생</li></ul></li></ul></li><li><p>mediaplay에서 prepare 하지 않으면 start 못함</p></li></ul><h2 id="향후-계획"><a href="#향후-계획" class="headerlink" title="향후 계획"></a>향후 계획</h2><ul><li>재생도 되고 리스트뷰도 완성했는데 여기서 완성도를 더 높여야할까?<ul><li>찝찝할 거 같기도 하고 흠 고민 중이다ㅣ</li></ul></li><li>정보가 파편화되어있어서 공부하는데 어렵다<ul><li>docs 보면서 공부하는 즁</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린 2일차</title>
      <link href="/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B02%EC%9D%BC%EC%B0%A8/"/>
      <url>/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B02%EC%9D%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="2일-차를-시작하면서"><a href="#2일-차를-시작하면서" class="headerlink" title="2일 차를 시작하면서"></a>2일 차를 시작하면서</h2><p>글을 쓸 때마다 코드를 다 붙여 넣을 수 없으니 커밋을 할 때 기능 별로 나눠서 해야겠다란 생각이 들었다. 그냥 남기기 용도라 팀플 할 때 빼면 거의 신경 안썼는데 이런게 기본이지 않나 습관 들여야겠다.</p><h2 id="화면-추가-및-연결"><a href="#화면-추가-및-연결" class="headerlink" title="화면 추가 및 연결"></a>화면 추가 및 연결</h2><ul><li>원리는 간단하다. 액티비티 추가, manifest에 액티비티 추가, xml 파일 추가<ul><li>액티비티(기능), xml(화면), manifest(허락 받기?)</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button_list.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">var</span> intent = Intent(<span class="keyword">this</span>, PlaylistActivity::<span class="keyword">class</span>.java)</span><br><span class="line">    startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위의 코드는 mainActivity의 버튼 코드이다<ul><li>intent 안에 PlaylistActivity 추가</li><li>액티비티 추가</li></ul></li></ul><h2 id="레코딩-된-파일-읽어오기"><a href="#레코딩-된-파일-읽어오기" class="headerlink" title="레코딩 된 파일 읽어오기"></a>레코딩 된 파일 읽어오기</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlaylistActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mp3Path: String = Environment.getExternalStorageDirectory().absolutePath + <span class="string">&quot;/Download/&quot;</span></span><br><span class="line">    <span class="keyword">var</span> listFiles = File(mp3Path).listFiles()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.playlist)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> fileName: String? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> extName: String? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> mp3List = mutableListOf&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (file <span class="keyword">in</span> listFiles) &#123;</span><br><span class="line">            fileName = file.getName()</span><br><span class="line">            extName = fileName.substring(-<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> (extName == <span class="string">&quot;mp3&quot;</span>) &#123;</span><br><span class="line">                mp3List.add(fileName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button_back.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">var</span> intent = Intent(<span class="keyword">this</span>, MainActivity::<span class="keyword">class</span>.java)</span><br><span class="line">            startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>Download 폴더 내 파일들을 listfiles()로 가져온다</li><li>가져온 파일들 중 확장자(뒤의 3자리)가 mp3인 파일의 이름을 mp3List에 넣는다</li></ol><ul><li>이제 mp3 파일만 불러와서 출력하면 된다.</li></ul><h3 id="에러-사항"><a href="#에러-사항" class="headerlink" title="에러 사항"></a>에러 사항</h3><ul><li>파일이 배열에 추가가 안되길래 뭐지? 했는데 원래 코틀린에서 arraylist는 추가 불가능이란다<ul><li>그래서 mutablelist로 바꿔서 선언했다.</li></ul></li><li>리스트 뷰를 만드려고 했는데 계속 실패했다. <ul><li>리스트 뷰는 어댑터가 필요한데 어댑터에 대한 이해가 부족했다.</li></ul></li><li>일단 어댑터가 구현이 안되서 빼고 실행했는데 화면이 꺼져서 뭔가했더니 안드로이드가 원래 그런가 에러가 발생하면 그냥 안된다<ul><li>말하고 보니 당연한거같네</li></ul></li></ul><h2 id="앞으로-할일"><a href="#앞으로-할일" class="headerlink" title="앞으로 할일"></a>앞으로 할일</h2><ul><li>디버깅 할 때 편하게 중간 중간 진행사항 출력하게 만들어야겠다<ul><li>println같은 걸로</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린5일차</title>
      <link href="/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B05%EC%9D%BC%EC%B0%A8/"/>
      <url>/2022/03/10/kotlin__%EC%BD%94%ED%8B%80%EB%A6%B05%EC%9D%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="2주간-어데-도망갔나"><a href="#2주간-어데-도망갔나" class="headerlink" title="2주간 어데 도망갔나?"></a>2주간 어데 도망갔나?</h1><p>7월 말에 정보처리 산업기사 시험이 있어서 그거 빡 준비해야겠다는 생각에 계속 그 공부만 했다. 뭐 사실 핑계인거 같긴하지만 결론적으로 정보처리 붙었으니까 후회 없다! 그러고는 중간중간 유튭이나 구글링으로 어떻게 하면 더 잘만들까? 찾아보다보니 시간이 훅가버렸다</p><h1 id="진행-과정"><a href="#진행-과정" class="headerlink" title="진행 과정"></a>진행 과정</h1><p>1.0 베타 버전?을 다 만들었다. 내가 원했던건 간단하게 그냥 카운트 타이머 시간 경과를 그래픽으로 보여주고 싶었다.</p><h2 id="뭘-배웠냐"><a href="#뭘-배웠냐" class="headerlink" title="뭘 배웠냐?"></a>뭘 배웠냐?</h2><ul><li>안드로이드 스튜디오랑 친해졌다<ul><li>이렇게 돌아간다. 이런 기능이 있다(단축키를 좀 더 외웠다던가, 뜬금포 오류의 원인)</li></ul></li><li>파일 구조랑 친해졌다.<ul><li>maven, gradle 원리 같은 것들</li></ul></li><li>라이브러리랑 좀 놀아봤다.<ul><li>깃허브 돌아다니면서 코드를 보고 참고했다.</li><li>라이브러리를 받아와서 좀 써봤다.</li></ul></li><li>OOP에 대한 갈증이 생겼다.<ul><li>내가 봐도 지금 짠 코드 난장판이다 휴</li><li>이대로 협업하면 난리나는 거야 분발하자</li></ul></li></ul><h2 id="세부-기능"><a href="#세부-기능" class="headerlink" title="세부 기능"></a>세부 기능</h2><h3 id="TIMER"><a href="#TIMER" class="headerlink" title="TIMER"></a>TIMER</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startTimer</span><span class="params">(hours: <span class="type">Int</span>, minutes: <span class="type">Int</span>, seconds: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> seconds = seconds</span><br><span class="line">    <span class="keyword">var</span> minutes = minutes</span><br><span class="line">    <span class="keyword">var</span> hours = hours</span><br><span class="line"></span><br><span class="line">    timerTask = timer(period = <span class="number">1000</span>) &#123;</span><br><span class="line">        sumOfTime--</span><br><span class="line">        seconds--</span><br><span class="line">        <span class="keyword">if</span> (seconds &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            minutes--</span><br><span class="line">            seconds = <span class="number">59</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minutes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            hours--</span><br><span class="line">            minutes = <span class="number">59</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> timerSeconds = seconds.toString()</span><br><span class="line">        <span class="keyword">var</span> timerMinutes = minutes.toString()</span><br><span class="line">        <span class="keyword">var</span> timerHours = hours.toString()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (seconds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            timerSeconds = <span class="string">&quot;0<span class="variable">$seconds</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minutes &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            timerMinutes = <span class="string">&quot;0<span class="variable">$minutes</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hours &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            timerHours = <span class="string">&quot;0<span class="variable">$hours</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        runOnUiThread &#123;</span><br><span class="line"></span><br><span class="line">            timeText.setText(<span class="string">&quot;<span class="variable">$timerHours</span> : <span class="variable">$timerMinutes</span> : <span class="variable">$timerSeconds</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sumOfTime==<span class="number">0</span>)&#123;</span><br><span class="line">            timerTask!!.cancel()</span><br><span class="line">            timeText.setText(<span class="string">&quot;00 : 00 : 00&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btn_reset.setOnClickListener() &#123;</span><br><span class="line">        timerTask!!.cancel()</span><br><span class="line">        sumOfTime = <span class="number">0</span></span><br><span class="line">        setTimePicker()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3항 연산자를 써서 더 코드를 줄이고 싶은데 코틀린에 없다네? 뭐 대신 굳이의 영역이긴하더라</li><li>아쉬운대로 00:00:00 포맷을 맞추고 싶어서 string으로 바꿔서 적용했다.</li><li>아래 reset 기능도 만들었는데 맘에 안든다.<ul><li>저게 왜 저기 있어야 하나 싶은데 timer 인스턴스를 잘못만들었다. 담엔 이렇게 안할거다</li></ul></li></ul><h3 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.sfyc.ctpv.CountTimeProgressView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/countTimeProgressView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;443dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:backgroundColorCenter</span>=<span class="string">&quot; #FFFFFF&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:borderBottomColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:borderDrawColor</span>=<span class="string">&quot;#CDC8EA&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:borderWidth</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:countTime</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:markBallColor</span>=<span class="string">&quot;#002FFF&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:markBallFlag</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:markBallWidth</span>=<span class="string">&quot;3dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startAngle</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:textStyle</span>=<span class="string">&quot;jump&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:titleCenterColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:titleCenterSize</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:titleCenterText</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setProgressBar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    with(countTimeProgressView) &#123;</span><br><span class="line">        startAngle = <span class="number">0f</span></span><br><span class="line">        countTime = <span class="number">6000L</span></span><br><span class="line">        borderWidth = <span class="number">7f</span></span><br><span class="line">        borderBottomColor = Color.GRAY</span><br><span class="line">        borderDrawColor = Color.BLACK</span><br><span class="line">        backgroundColorCenter = Color.WHITE</span><br><span class="line">        markBallFlag = <span class="literal">true</span></span><br><span class="line">        markBallWidth = <span class="number">9f</span></span><br><span class="line">        markBallColor = Color.BLUE</span><br><span class="line">        titleCenterText = <span class="string">&quot;Time is Gold&quot;</span></span><br><span class="line">        titleCenterTextColor = Color.BLACK</span><br><span class="line">        titleCenterTextSize = <span class="number">50f</span></span><br><span class="line">        addOnEndListener(<span class="keyword">object</span> : CountTimeProgressView.OnEndListener &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">()</span></span> &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;Count Finished&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(overageTime: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (countTimeProgressView.isRunning) &#123;</span><br><span class="line">                    countTimeProgressView.cancelCountTimeAnimation()</span><br><span class="line">                    Log.e(<span class="string">&quot;overageTime&quot;</span>, <span class="string">&quot;overageTime = &quot;</span> + overageTime)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    countTimeProgressView.startCountTimeAnimation()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    countTimeProgressView.startCountTimeAnimation()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>xml에서 기본 세팅을 하지만 코틀린에서 재정의 할 수 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toDoList완성</title>
      <link href="/2022/03/10/kotlin_toDoList%EC%99%84%EC%84%B1/"/>
      <url>/2022/03/10/kotlin_toDoList%EC%99%84%EC%84%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="코드-리뷰"><a href="#코드-리뷰" class="headerlink" title="코드 리뷰"></a>코드 리뷰</h1><h2 id="What-you-learend-in-This-Project"><a href="#What-you-learend-in-This-Project" class="headerlink" title="What you learend in This Project"></a>What you learend in This Project</h2><ul><li>Javascript, HTML, CSS 과 조곰 친해졌다</li><li>Jascript의 기본 동작을 알게 됬다<ul><li>이 녀석은 이런 느낌으로 움직이구나</li><li>왜 쓰는 구나</li><li>sexy한 언어군</li></ul></li></ul><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;js-clock&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>00:00<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;js-form form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;what is your name?&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;js-greetings greetings&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;js-toDoForm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;write a todo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;js-toDoList&quot;</span> <span class="attr">id</span>=<span class="string">&quot;toDoList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spanc</span> <span class="attr">class</span>=<span class="string">&quot;js-weather&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">spanc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;clock.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;todo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;greeting.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bg.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;weather.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><h3 id="greeting-js"><a href="#greeting-js" class="headerlink" title="greeting.js"></a>greeting.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-form&quot;</span>); <span class="comment">// js-form 클래스를 받아옴</span></span><br><span class="line"><span class="keyword">const</span> input = form.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>); <span class="comment">// input tag 들을 받아옴</span></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-greetings&quot;</span>); <span class="comment">//  js-greetings 클래스를 받아옴</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_LS</span> = <span class="string">&quot;currentUser&quot;</span>; <span class="comment">// User 확인을 위한 변수</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SHOWING_CN</span> = <span class="string">&quot;showing&quot;</span>; <span class="comment">// css 변환을 위한 변수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveName</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// local storage에 currentUser로 saveName 함수에 입력받은 텍스트를 유저 이름으로 수정</span></span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">USER_LS</span>, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>(); <span class="comment">// placeholder 이벤트 막기</span></span><br><span class="line">  <span class="keyword">const</span> currentValue = input.<span class="property">value</span>; <span class="comment">// 현재 입력된 값 저장</span></span><br><span class="line">  <span class="title function_">paintGreeting</span>(currentValue); <span class="comment">// input 값 인수로 보내기</span></span><br><span class="line">  <span class="title function_">saveName</span>(currentValue); <span class="comment">// 현재 값을 local storage에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">askForName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  form.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable constant_">SHOWING_CN</span>);</span><br><span class="line">  form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, handleSubmit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintGreeting</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  form.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="variable constant_">SHOWING_CN</span>); <span class="comment">// 기존의 form의 input이 안보이게함</span></span><br><span class="line">  greeting.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="variable constant_">SHOWING_CN</span>); <span class="comment">// js-greeting h4 태그가 보임</span></span><br><span class="line">  greeting.<span class="property">innerText</span> = <span class="string">`Hello <span class="subst">$&#123;text&#125;</span>`</span>; <span class="comment">// js-greeting h4 태그에 text입력</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">USER_LS</span>); <span class="comment">// 저장된 유저 이름을 불러온다</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentUser === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">askForName</span>(); <span class="comment">// currentUser가 비어있다면 askForName 호출</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">paintGreeting</span>(currentUser); <span class="comment">// currentuser가 있다면 paintGreeting 호출</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">loadName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h3 id="bg-js"><a href="#bg-js" class="headerlink" title="bg.js"></a>bg.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;body&quot;</span>); <span class="comment">// body 태그에 접근한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMG_NUMBER</span> = <span class="number">4</span>; <span class="comment">// 이미지 최대 갯수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintImage</span>(<span class="params">imgNumber</span>) &#123;</span><br><span class="line">  <span class="comment">// 배경 이미지를 칠하는 함수</span></span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>(); <span class="comment">// 이미지 객체를 생성</span></span><br><span class="line">  image.<span class="property">src</span> = <span class="string">`images/<span class="subst">$&#123;imgNumber + <span class="number">1</span>&#125;</span>.jpg`</span>; <span class="comment">// 이미지 소스로 images 하위 폴더 이미지들을 추가</span></span><br><span class="line">  image.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;bgImage&quot;</span>); <span class="comment">//   이미지를 bgImage라는 클래스로 추가한다</span></span><br><span class="line">  body.<span class="title function_">prepend</span>(image); <span class="comment">// bgImage 클래스를 바디에 추가</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 랜덤으로 숫자를 반환하는 함수</span></span><br><span class="line">  <span class="keyword">const</span> number = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable constant_">IMG_NUMBER</span>);</span><br><span class="line">  <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> randomNumber = <span class="title function_">getRandom</span>();</span><br><span class="line">  <span class="title function_">paintImage</span>(randomNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h3 id="wether-js"><a href="#wether-js" class="headerlink" title="wether.js"></a>wether.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COORDS</span> = <span class="string">&quot;coords&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_KEY</span> = <span class="string">&quot;60b305147a7e043321d283d3c83b4fa2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> weather = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-weather&quot;</span>); <span class="comment">//js-weather class를 불러옴</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getWeather</span>(<span class="params">latitude, longitude</span>) &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://api.openweathermap.org/data/2.5/weather?lat=<span class="subst">$&#123;latitude&#125;</span>&amp;lon=<span class="subst">$&#123;longitude&#125;</span>&amp;appid=<span class="subst">$&#123;API_KEY&#125;</span>&amp;units=metric`</span></span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> json.<span class="title function_">json</span>(); <span class="comment">// json을 text로 읽어옴??</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">      <span class="keyword">const</span> temperture = json.<span class="property">main</span>.<span class="property">temp</span>; <span class="comment">// json에서 온도 점수를 가져온다</span></span><br><span class="line">      <span class="keyword">const</span> place = json.<span class="property">name</span>; <span class="comment">// json에서 위치 정보를 가져온다</span></span><br><span class="line">      weather.<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;temperture&#125;</span>&#x27;C @<span class="subst">$&#123;place&#125;</span>`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fetch로 url로 api를 받아온다</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveCoords</span>(<span class="params">coordsObj</span>) &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">COORDS</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(coordsObj)); <span class="comment">// local storage에 COORDS란 변수에 coordsObj를 json으로 바꾸어 저장</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleGeoSuccess</span>(<span class="params">position</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> latitude = position.<span class="property">coords</span>.<span class="property">latitude</span>; <span class="comment">//api에서 위치 정보를 가져옴</span></span><br><span class="line">  <span class="keyword">const</span> longitude = position.<span class="property">coords</span>.<span class="property">longitude</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> coordsObj =</span><br><span class="line">    <span class="comment">// latitude longitude 객체 선언</span></span><br><span class="line">    &#123;</span><br><span class="line">      latitude,</span><br><span class="line">      longitude,</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="title function_">saveCoords</span>(coordsObj);</span><br><span class="line">  <span class="title function_">getWeather</span>(latitude, longitude);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleGeoError</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">askForCoords</span>(<span class="params"></span>) &#123;</span><br><span class="line">  navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(handleGeoSuccess); <span class="comment">// handleGeoSuccess를 콜백함수로 현재 위치를 받아옴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadCoords</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loadedCoords = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">COORDS</span>); <span class="comment">// location 정보를 받아옴</span></span><br><span class="line">  <span class="keyword">if</span> (loadedCoords === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">askForCoords</span>(); <span class="comment">// 정보가 없다면 askForCoords로 이동</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parseCoords = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(loadedCoords); <span class="comment">//json parse</span></span><br><span class="line">    <span class="title function_">getWeather</span>(parseCoords.<span class="property">latitude</span>, parseCoords.<span class="property">longitude</span>); <span class="comment">// location  정보 바탕으로 날씨를 받아옴</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">loadCoords</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h3 id="clock-js"><a href="#clock-js" class="headerlink" title="clock.js"></a>clock.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clockContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.js-clock&quot;</span>); <span class="comment">// .js-clock을 index.html에서 불러온다</span></span><br><span class="line"><span class="keyword">const</span> clockTitle = clockContainer.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>); <span class="comment">// .js-clock의 child인 h1 tag를 불러온다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 현재 시간을 가져오는 함수</span></span><br><span class="line">  clockTitle.<span class="property">innerText</span> = <span class="string">` <span class="subst">$&#123;hours &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;hours&#125;</span>`</span> : hours&#125;</span> : <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    minutes &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;minutes&#125;</span>`</span> : minutes</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span> : <span class="subst">$&#123;seconds &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;seconds&#125;</span>`</span> : seconds&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ` `을 통해 shell 처럼 변수를 받아오고 쓸 수 있음</span></span><br><span class="line">  <span class="comment">// 삼항 연산자로 시 분 초가 10이하 일경우 0추가</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(getTime, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린 기초 문법</title>
      <link href="/2022/03/10/kotlin_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95/"/>
      <url>/2022/03/10/kotlin_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<ul><li>갑자기 군대가기 전에 앱 몇게 만들고 가고 싶어서 하게 됬다 별거 없는 동긴데 재밌어보여서 한 것도 크다.</li></ul><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ul><li><p>package:source files 위치에 source file이 위치해야한다</p><ul><li>자바랑 똑같다고 생각하자</li></ul></li><li><p>programe entry point</p><ul><li>컴파일하면 어디서부터 시작하는가?<ul><li>main 함수부터 실행한다.<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  println(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>function 정의는 어떻게 하나?</p><ul><li>fun sum(a:Int, b: Int) : Int{} 순으로 진행한다</li><li>unit을 쓰면 리턴 값 생략 가능!</li></ul></li><li><p>변수</p><ul><li>val : 자바의 final</li><li>var : 변수<ul><li>아래와 같이 사용한다<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a : <span class="built_in">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>string templates</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> s1 = = <span class="string">&quot;a is <span class="variable">$a</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>보니까 루비 느낌으로 객체로 인식하는거 같음. 변수.replace() 이렇게 사용하는 것들이 있네</p>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>나만의 앱만들기</title>
      <link href="/2022/03/10/kotlin_%EB%82%98%EB%A7%8C%EC%9D%98%EC%95%B1%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2022/03/10/kotlin_%EB%82%98%EB%A7%8C%EC%9D%98%EC%95%B1%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="휴-내-생각"><a href="#휴-내-생각" class="headerlink" title="휴,, 내 생각"></a>휴,, 내 생각</h2><ul><li><a href="https://github.com/GoBeromsu/Circular-Timer">소스 코드 레퍼지터리는 하이퍼 링크를 따라가면 볼 수 있다</a></li></ul><ul><li>에바 삽질을 너무 해버렸어 좀 배운 것들은 확실히 있는데 간단하게 만드려는 의도와 다르게 인터넷에서 배우다보니 나도 모르게 왜 안되지? 하면 데이터베이스 뿐 만아니라 mvmm 패턴도 같이 막 적용하려고 하다보니 걍 머리가 팡 터질 뻔 했다.</li><li>이제 Adapter 개념은 확실히 알 것 같다.</li><li>lifecycle 주기도 제대로 모르는데 이 곳 저 곳에서 배운 내 잘못이다. 휴</li><li>머리도 식힐겸 정리도 할 겸 글 쓴다.</li></ul><h2 id="circular-view"><a href="#circular-view" class="headerlink" title="circular view"></a>circular view</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">// oncreate가 붙은 함수는 생성 될 때 한 번 실행되는 메소드이다.</span></span><br><span class="line">    <span class="comment">// 커스텀한 뷰를 액티비티에 붙이기 위한 접착제이다</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: PlanAdapter.CustomViewHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater.from(parent.context).inflate(R.layout.[xml 파일 이름], parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> CustomViewHolder(view)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 객체 리스트의 개수를 반환</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [모델 또는 객체].size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">PlanAdapter</span>.<span class="type">CustomViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CustomViewHolder</span></span>(itemView: View) : RecyclerView.ViewHolder(itemView) &#123;</span><br><span class="line">      <span class="comment">// 레이아웃 내의 컴포넌트들을 재정의</span></span><br><span class="line">      <span class="comment">// circular view의 렉 문제 때문에 캐시를 이용하기 위함이라고도함</span></span><br><span class="line">      <span class="comment">// 요즘은 안드로이드 extension 때문에 findviewid 안써도 되서 행복이지</span></span><br><span class="line">        <span class="keyword">var</span> name = itemView.tv_name</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> newPlanActivityRequestCode = <span class="number">1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> planViewModel: PlanViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> adapter = CustomAdapter(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">        rv_planlist.adapter =adapter</span><br><span class="line">        rv_planlist.layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">        planViewModel = ViewModelProvider(<span class="keyword">this</span>,PlanViewModel.Factory(application)).<span class="keyword">get</span>(PlanViewModel::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>메인 액티비티에서는 만들어진 어댑터를 메인 엑티비티의 xml의 listview에 연결한다<ul><li>왜냐면 커스텀 어댑터는 3단계를 거친다.<ul><li>mainActivity xml – mainActivity 내 circularview - circular view에 들어갈 객체</li><li>저 객체를 자기 맘대로 재정의 하기 때문에 커스텀 어댑터라고한다</li></ul></li></ul></li><li>LayoutManger를 세팅하면 끝!<ul><li>상황에 따라서 어댑터에 배열 넣어서 뷰 구현하는 예제들 있는데 DB가 없어서 예제를 따라하는 건 간단하다</li><li>LayoutManager는 3개 있다.</li></ul></li></ul><h2 id="Adapter-또는-MainActivity가-아닌-곳에서-DB-접근"><a href="#Adapter-또는-MainActivity가-아닌-곳에서-DB-접근" class="headerlink" title="Adapter 또는 MainActivity가 아닌 곳에서 DB 접근"></a>Adapter 또는 MainActivity가 아닌 곳에서 DB 접근</h2><ul><li>fragment 쓰면 이럴 일은 없을 거 같은데? 공부가 좀 모자라다</li></ul><h3 id="interface를-이용하는-방법"><a href="#interface를-이용하는-방법" class="headerlink" title="interface를 이용하는 방법"></a>interface를 이용하는 방법</h3><ul><li>난 Delete를 구현하기 위해 이 방법을 사용했다. adapter에 delete 버튼 리스너를 넣을 생각이었기 때문이다.</li></ul><h4 id="DeleteBtnListener"><a href="#DeleteBtnListener" class="headerlink" title="DeleteBtnListener"></a>DeleteBtnListener</h4>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DeleteBtnListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteBtnClicked</span><span class="params">(plan:<span class="type">Plan</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  인터페이스를 선언하고 인터페이스 내에 사용할 메소드를 선언한다</p><h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), DeleteBtnListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> planViewModel: PlanViewModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 어댑터 정의</span></span><br><span class="line">      adapter = PlanAdapter(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">      <span class="comment">// viewModelProvider로 모델 받아오기</span></span><br><span class="line">      planViewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(PlanViewModel::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">      planViewModel.allPlan.observe(<span class="keyword">this</span>, Observer &#123; plan -&gt;</span><br><span class="line">          plan?.let &#123; adapter.setPlans(it) &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteBtnClicked</span><span class="params">(plan: <span class="type">Plan</span>)</span></span> &#123;</span><br><span class="line">        planViewModel.delete(plan)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>메인 액티비티에서는 인터페이스를 받은 후 인터페이스 메소드를 재정의 한다.</p></li><li><p>메소드 deleteBtnClicked를 보면 planViewModel 있음을 알 수 있다.</p></li><li><p>이 viewModel은 메인 액티비티에서 정의해서 쭉 사용할 viewModel이다</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"> adapter = PlanAdapter(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onCreate 같은 경우 액티비티가 생성될 때 처음 실행되는 메소드이다</li><li>아래에서 말하겠지만 PlanAdapter에서도 deleBtnListener를 상속받는데 메인 액티비티에서 재정의 된 리스너를 연결하는 것이다.</li></ul></li></ul><h4 id="Plan-Adapter"><a href="#Plan-Adapter" class="headerlink" title="Plan Adapter"></a>Plan Adapter</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlanAdapter</span></span>(<span class="keyword">val</span> context: Context, deletelistener: DeleteBtnListener) :RecyclerView.Adapter&lt;PlanAdapter.Holder&gt;() &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">var</span> DeleteBtnListener: DeleteBtnListener = deletelistener</span><br><span class="line"></span><br><span class="line">     <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span></span>(itemView: View) : RecyclerView.ViewHolder(itemView) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> content = itemView.tv_context</span><br><span class="line">        <span class="keyword">val</span> timeProgress = itemView.progress</span><br><span class="line">        <span class="keyword">val</span> start = itemView.bt_start</span><br><span class="line">        <span class="keyword">val</span> reset = itemView.bt_reset</span><br><span class="line">        <span class="keyword">val</span> delete = itemView.bt_delete</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(plan: <span class="type">Plan</span>)</span></span> &#123;</span><br><span class="line">            content.text = plan.content</span><br><span class="line"></span><br><span class="line">            timeProgress.setOnTouchListener(OnTouchListener &#123; v, event -&gt; <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">            delete.setOnClickListener(View.OnClickListener &#123;</span><br><span class="line">                DeleteBtnListener.deleteBtnClicked(plan)</span><br><span class="line">                notifyDataSetChanged()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이너 클래스로 holer가 생성된 것을 볼 수 있는데 recyclerview에서는 viewholder에 담아서 뷰에 뿌리기 때문에 필요하다</li><li>bind() 메소드를 보면 deleteBtnClicked()를 사용하는 것을 볼 수 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>코틀린4일차</title>
      <link href="/2022/03/10/kotlin_%EC%BD%94%ED%8B%80%EB%A6%B04%EC%9D%BC%EC%B0%A8/"/>
      <url>/2022/03/10/kotlin_%EC%BD%94%ED%8B%80%EB%A6%B04%EC%9D%BC%EC%B0%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Time-Picker-추가"><a href="#Time-Picker-추가" class="headerlink" title="Time Picker 추가"></a>Time Picker 추가</h2><ul><li>깔끔하게 시간을 설정하기 위해 time Picker을 이용하기로 했다.<ul><li>second까지 표현 가능하는 것을 원해서 gradle로 모듈을 추가로 받았다</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.kovachcode:timePickerWithSeconds:1.0.1&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> timePicker = MyTimePickerDialog(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        MyTimePickerDialog.OnTimeSetListener() &#123; timePicker: TimePicker, hoursOfDay: <span class="built_in">Int</span>, minute: <span class="built_in">Int</span>, seconds: <span class="built_in">Int</span> -&gt;</span><br><span class="line"></span><br><span class="line">            timeText.setText(</span><br><span class="line">                 String.format(<span class="string">&quot;%02d&quot;</span>, hoursOfDay) +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + String.format(<span class="string">&quot;%02d&quot;</span>, minute) +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + String.format(<span class="string">&quot;%02d&quot;</span>, seconds)</span><br><span class="line">            );</span><br><span class="line">        &#125;,</span><br><span class="line">        Calendar.HOUR_OF_DAY,</span><br><span class="line">        Calendar.MINUTE,</span><br><span class="line">        Calendar.SECOND,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    timePicker.show()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>일단은 실행하면 메인 화면에서 설정된 시간을 출력시키게 설정해 놓았다.</li><li>패키지를 받긴 했는데 오래되기도 하고 자바 코드라 코틀린으로 바꿔서 넣었다.</li></ul><h2 id="Setting된-시간-Count하기"><a href="#Setting된-시간-Count하기" class="headerlink" title="Setting된 시간 Count하기"></a>Setting된 시간 Count하기</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> timePicker = MyTimePickerDialog(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            MyTimePickerDialog.OnTimeSetListener() &#123; timePicker: TimePicker, hoursOfDay: <span class="built_in">Int</span>, minute: <span class="built_in">Int</span>, seconds: <span class="built_in">Int</span> -&gt;</span><br><span class="line">                sumOfTime = hoursOfDay * <span class="number">60</span> * <span class="number">60</span> + minute * <span class="number">60</span> + seconds</span><br><span class="line">                <span class="keyword">var</span> Timer = <span class="keyword">object</span> : CountDownTimer(sumOfTime!!.toLong(), <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTick</span><span class="params">(millisUntilFinished: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">                        timeText.setText(<span class="string">&quot;<span class="subst">$&#123;millisUntilFinished&#125;</span> 남았습니다&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span> &#123;</span><br><span class="line">                        Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;CountDown Finished.&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                            .show()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Timer.start()</span><br><span class="line">            &#125;,</span><br><span class="line">            Calendar.HOUR_OF_DAY,</span><br><span class="line">            Calendar.MINUTE,</span><br><span class="line">            Calendar.SECOND,</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>sumOfTime으로 시,분,초를 초로 환산해서 카운트 다운 하도록 했다.<ul><li>왜냐면 일단 계획이 Graphic으로 초를 퍼센트로 구현할 생각이라 일부러 합쳤다.</li></ul></li><li>CounDownTimer를 이용했다<ul><li>onTick은 틱당 할 행동</li><li>onFinish는 타이머 끝났을 때 할 행동이다</li></ul></li></ul><h2 id="functijon-분할"><a href="#functijon-분할" class="headerlink" title="functijon 분할"></a>functijon 분할</h2><ul><li>역시 자바나 코틀린이나 객체 지향이 최고 아닌가<ul><li>디버깅 할 때 귀찮기도 하고 function을 나눴다.</li></ul></li></ul><h3 id="SetTimer"><a href="#SetTimer" class="headerlink" title="SetTimer"></a>SetTimer</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setTimer</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> timePicker = MyTimePickerDialog(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        MyTimePickerDialog.OnTimeSetListener() &#123; timePicker: TimePicker, hoursOfDay: <span class="built_in">Int</span>, minute: <span class="built_in">Int</span>, seconds: <span class="built_in">Int</span> -&gt;</span><br><span class="line">            sumOfTime = hoursOfDay * <span class="number">60</span> * <span class="number">60</span> + minute * <span class="number">60</span> + seconds</span><br><span class="line">            storeTime(sumOfTime)</span><br><span class="line">            startTimer()</span><br><span class="line">        &#125;,</span><br><span class="line">        Calendar.HOUR_OF_DAY,</span><br><span class="line">        Calendar.MINUTE,</span><br><span class="line">        Calendar.SECOND,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    timePicker.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>timePicker를 이용했고 시간 설정 관련 기능을 모아두었다.</li></ul><h3 id="startTimer"><a href="#startTimer" class="headerlink" title="startTimer"></a>startTimer</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startTimer</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> countDownTime = sumOfTime</span><br><span class="line">    timerTask = timer(period = <span class="number">1000</span>) &#123;</span><br><span class="line"></span><br><span class="line">        countDownTime--</span><br><span class="line"></span><br><span class="line">        runOnUiThread &#123; timeText.setText(<span class="string">&quot;<span class="variable">$countDownTime</span>&quot;</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1초씩 COUNTDOWN하는 함수이다.</li><li>kotlin에서 지원하는 timer를 이용했다.</li></ul><h3 id="storeTime"><a href="#storeTime" class="headerlink" title="storeTime"></a>storeTime</h3><ul><li>sumOfTime라는 전역 변수에 시간을 저장해뒀다.<ul><li>나중에 DB까지 쓸 단계가 온다면 바꿀 생각이다</li></ul></li><li>확실히 깔꼼하군</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">storeTime</span><span class="params">(Time: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    sumOfTime = Time</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;<span class="subst">$&#123;sumOfTime&#125;</span>은 storeTime에서 호출됨&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">        .show()</span><br><span class="line">    <span class="keyword">return</span> sumOfTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="추가해야할-기능"><a href="#추가해야할-기능" class="headerlink" title="추가해야할 기능"></a>추가해야할 기능</h2><ul><li>Timer 기능 완성<ul><li>stop</li><li>initailize</li><li>카운트가 음수가 되지 않도록 설정</li></ul></li><li>그래픽 기능 설정</li></ul><h2 id="훔-오늘의-후기"><a href="#훔-오늘의-후기" class="headerlink" title="훔 오늘의 후기"></a>훔 오늘의 후기</h2><ul><li>생각보다 구현 속도가 빠르다</li><li>DB까지 추가해 볼까?</li><li>언눙 만들고 다른 것도 만들어보자</li><li>하다보니 점점 속도가 붙네</li><li>하루에 2시간 정도 괜찮다 취미는 역시 코딩인가</li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>range() 와 enumerate() 차이</title>
      <link href="/2022/03/10/python_gapWithRangeEnum/"/>
      <url>/2022/03/10/python_gapWithRangeEnum/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h2><p>파이썬에서 for문은 for [변수] in [list, tuple dic 등 객체] 형태로 사용된다<br>PS를 하다보면 인덱싱 할 일이 많은데 난 주로 주어진 리스트 등의 길이를 이용해서 인덱스에 접근했었다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>[i])</span><br></pre></td></tr></table></figure><p>그런데 for 문을 파이썬 스타일로 사용하려면 enumetriate()를 사용하는게 나은 선택이란 글을 보았다.</p><p>왜 enumerate()를 써야하는지, range()와의 차이점은 무엇인지 알아보자</p><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p>range()는 파이썬 기본 내장(built_in) 함수이다.<br>주로 range(stop),range(start,stop,step) 두 형태로 매개 변수를 받는다.</p><p><a href="https://docs.python.org/ko/3/library/functions.html#func-range">python docs</a>를 보면 range()는 함수보다는 범위와 불변 시퀀스형이라한다</p><p>즉 range()는 숫자의 시퀀스를 나타내기 위해 사용되는 수정할 수 없는 시퀀스형이다.</p><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p>enumerate는 “열거하다”란 뜻이다.<br>enumerate()는 아래와 같이 (sequence,count) 형태로 열거 객체를 튜플로 반환한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">sequence,start=<span class="number">0</span></span>):</span><br><span class="line">  n=start</span><br><span class="line">  <span class="keyword">for</span> elem <span class="keyword">in</span> sequence:</span><br><span class="line">    <span class="keyword">yield</span> n, elem</span><br><span class="line">    n+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>예를 들어 사계절이 저장된 리스트를 enumerate()에 넣어본다면</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seaons=[<span class="string">&#x27;spring&#x27;</span>,<span class="string">&#x27;summer&#x27;</span>,<span class="string">&#x27;fall&#x27;</span>,<span class="string">&#x27;winter&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seaons))</span><br></pre></td></tr></table></figure><p>[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)] 이런 식으로 객체를 반환한다.</p><h2 id="왜-enumerate-를-사용하는걸-권장하는가"><a href="#왜-enumerate-를-사용하는걸-권장하는가" class="headerlink" title="왜 enumerate()를 사용하는걸 권장하는가"></a>왜 enumerate()를 사용하는걸 권장하는가</h2><p><a href="https://stackoverflow.com/questions/24150762/pythonic-range-vs-enumerate-in-python-for-loop">스택 오버플로우</a>에 이에 대한 답변이 달려있다.</p><p>range()를 사용할 경우 arr[i]처럼 range()에서 반환되는 시퀀스를 iterable 객체에 다시 집어넣어야한다.</p><p>이 때 arr[i]는 리스트이기 때문에 <a href="https://learnbatta.com/blog/why-tuple-is-faster-than-list-in-python-22/">상대적으로 튜플을 사용한 것에 비해 처리 비용이 비싸다</a>.</p><p>또한 range(len()) 형태로 for 문을 사용하면 indexing 가능한(또는 Countable) 객체만 사용가능하다.</p><p>반면에 enumerate()를 사용한다면 모든 반복되는 객체에서 사용 가능하다.</p><p>list를 사용할 경우에 모든 객체들이 반복되는지 신뢰할 수 없지만, enumerate 같은 경우 호출된 객체의 모든 항목이 반복되는 것을 신뢰할 수 있다.</p><p>앞으로는 range(len())보다는 enuemrate를 사용해봐야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료형에 따른 연산속도 차이</title>
      <link href="/2022/03/10/python_%EC%9E%90%EB%A3%8C%ED%98%95%EC%97%90%EB%94%B0%EB%A5%B8%EC%97%B0%EC%82%B0%EC%86%8D%EB%8F%84%EC%B0%A8%EC%9D%B4/"/>
      <url>/2022/03/10/python_%EC%9E%90%EB%A3%8C%ED%98%95%EC%97%90%EB%94%B0%EB%A5%B8%EC%97%B0%EC%82%B0%EC%86%8D%EB%8F%84%EC%B0%A8%EC%9D%B4/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h2><p>PS를 하다보면 여러 값을 접근할 일이 많다.<br>list를 사용해서 인덱스에 접근하는 방식으로 주로 문제를 풀었는데, 어느 순간 시간 초과가 발생했다.<br>알고보니 파이썬에서는 자료형에 따라 연산 속도가 달라, 때에 따라 dictionary 등을 이용하면 시간을 단축 할 수 있다고한다. </p><h2 id="무엇을-사용해야하는가"><a href="#무엇을-사용해야하는가" class="headerlink" title="무엇을 사용해야하는가"></a>무엇을 사용해야하는가</h2><p>dictionary와 set의 인덱싱,저장,삭제,탐색의 시간 복잡도가 O(1)이다.<br>반면 list는 데이터 삽입,삭제에서 O(N)의 시간 복잡도를 가진다.</p><p>즉 꼭 인덱싱을 해야하는 일이아니라면 dictionary와 set을 쓰는게 더 효율적이다.</p><p>실제로 그러한지 <a href="https://www.acmicpc.net/problem/10809">백준 10809번 문제</a>로 테스트해 보았다.</p><p>각각의 코드는 변화를 최소화하고, 반복문의 수행 시간만 측정하였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## List로 짠 코드</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a,a+<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> (val[i] == <span class="built_in">chr</span>(j) <span class="keyword">and</span> arr[j-a]==-<span class="number">1</span>):</span><br><span class="line">            arr[j-a]=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">    <span class="built_in">print</span>(arr[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Dictionary로 짠 코드</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a,a+<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> val[i] == <span class="built_in">chr</span>(j) <span class="keyword">and</span> dic[<span class="built_in">chr</span>(j)]==-<span class="number">1</span>:</span><br><span class="line">            dic[<span class="built_in">chr</span>(j)] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(dic[value], end=<span class="string">&#x27; &#x27;</span>)    </span><br></pre></td></tr></table></figure><p>결과는 역시나 Dictionary가 4배 정도 빨랐다.</p><p><img src="/img/python_%EC%9E%90%EB%A3%8C%ED%98%95%EC%97%90%EB%94%B0%EB%A5%B8%EC%97%B0%EC%82%B0%EC%86%8D%EB%8F%84%EC%B0%A8%EC%9D%B4_speecheck.jpg" alt="사진"></p><h2 id="시간-복잡도를-신경-써야하는-이유"><a href="#시간-복잡도를-신경-써야하는-이유" class="headerlink" title="시간 복잡도를 신경 써야하는 이유"></a>시간 복잡도를 신경 써야하는 이유</h2><p>한 발자국 더 나아가서 왜 코드를 짤 때 시간 복잡도를 고려 해야하는지 생각해보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_unique</span>(<span class="params">alist:[<span class="built_in">int</span>]</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(alist)): <span class="comment">## O(N)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(alist)): <span class="comment">## O(N)</span></span><br><span class="line">      <span class="keyword">if</span> alist[i] == a[j]: <span class="comment">## O(1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> <span class="comment">## O(1)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment">## O(1)</span></span><br></pre></td></tr></table></figure><p>is_unique()의 시간 복잡도는 O(N) * O(N)*O(1)+O(1)인 O(N**2)이다.<br>is_unique()는 주어진 리스트의 길이가 늘어날 수록 시간도 4배 9배 16 배로 느려진다.</p><p>시간 복잡도의 합에서는 여러 항들 중 영향력이 가장 큰 항 하나가 시간 복잡도이다.</p><p>반면에 시간 복잡도의 곱에서는 항끼리 곱하기 때문에 시간 복잡도가 빠르게 증가한다.</p><p>그러므로 시간 복잡도를 최소한으로 코드를 짜는 것은 입력 값과 범위가 커질 수 록 더 효율적이다.</p><h2 id="자료형들의-시간-복잡도"><a href="#자료형들의-시간-복잡도" class="headerlink" title="자료형들의 시간 복잡도"></a>자료형들의 시간 복잡도</h2><p>파이썬에서는 자료형에 따라 다른 메소드가 존재하고, 각각의 시간 복잡도 또한 다르다. </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><table><thead><tr><th>기능</th><th>예시</th><th>시간 복잡도</th></tr></thead><tbody><tr><td>Index</td><td>L[i]</td><td>O(1)</td></tr><tr><td>Store</td><td>L[i]&#x3D;0</td><td>O(1)</td></tr><tr><td>Length</td><td>len(L)</td><td>O(1)</td></tr><tr><td>Append</td><td>L.append()</td><td>O(1)</td></tr><tr><td>Sort</td><td>L.sort()</td><td>O(N Log N)</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><table><thead><tr><th>기능</th><th>예시</th><th>시간 복잡도</th></tr></thead><tbody><tr><td>Length</td><td>len(s)</td><td>O(1)</td></tr><tr><td>Add</td><td>s.add(5)</td><td>O(1)</td></tr><tr><td>Containment</td><td>x in&#x2F;not in s</td><td>O(1)</td></tr><tr><td>Remove</td><td>s.remove(..)</td><td>O(1)</td></tr><tr><td>Discard</td><td>s.discard(..)</td><td>O(1)</td></tr><tr><td>Pop</td><td>s.pop()</td><td>O(1)</td></tr><tr><td>Union</td><td>s</td><td>t</td></tr><tr><td>Intersection</td><td>s &amp; t</td><td>O(len(s)+len(t))</td></tr><tr><td>Difference</td><td>s - t</td><td>O(len(s)+len(t))</td></tr></tbody></table><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><table><thead><tr><th>Operation</th><th>Example</th><th>Class</th></tr></thead><tbody><tr><td>Index</td><td>d[k]</td><td>O(1)</td></tr><tr><td>Store</td><td>d[k] &#x3D; v</td><td>O(1)</td></tr><tr><td>Length</td><td>len(d)</td><td>O(1)</td></tr><tr><td>Delete</td><td>del d[k]</td><td>O(1)</td></tr><tr><td>get&#x2F;setdefault</td><td>d.get(k)</td><td>O(1)</td></tr><tr><td>Pop</td><td>d.pop(k)</td><td>O(1)</td></tr><tr><td>Pop item</td><td>d.popitem()</td><td>O(1)</td></tr><tr><td>View</td><td>d.keys()</td><td>O(1)</td></tr><tr><td>Construction</td><td>dict(…)</td><td>O(len(…))</td></tr><tr><td>Iteration</td><td>for k in d:</td><td>O(N)</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt">자료형에 따른 시간 복잡도</a></p>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_MakesolvedAcBot</title>
      <link href="/2022/03/10/python_makesolvedacbot/"/>
      <url>/2022/03/10/python_makesolvedacbot/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="Solved-ac-slack-bot-만들기"><a href="#Solved-ac-slack-bot-만들기" class="headerlink" title="Solved ac slack bot 만들기"></a>Solved ac slack bot 만들기</h2><p>하루에 한 번 내가 그 날 푼 문제들을 알려주는 봇</p><p>내가 푼 문제들을 저장한 후 다음 날과 비교하여 달라졌으면 출력</p><ul><li>서버에서 푼 문제들을 받아와서 가공할 것</li><li>문제 정보 <ul><li>번호</li><li>이름</li></ul></li></ul><p>문제 정보를 받아와서 dictionary에 저장<br>    * key : 문제 번호<br>    * value : 문제 이름 </p><h3 id="데이터"><a href="#데이터" class="headerlink" title="데이터"></a>데이터</h3><h3 id="mazassumnida-분석"><a href="#mazassumnida-분석" class="headerlink" title="mazassumnida 분석"></a>mazassumnida 분석</h3><h2 id="What-is-github-action"><a href="#What-is-github-action" class="headerlink" title="What is github action"></a>What is github action</h2><ul><li>github 자체 CI&#x2F;CD 플랫폼</li><li>Package Registry 저장소<ul><li>소스코드를 빌드하고 난 artifact들을 저장하고 관리 배포함</li></ul></li><li>사용 신청을 해야함</li><li>리눅스, macOs, 윈도우 플랫 폼 제공</li><li>병렬로 워크플로우 실행 가능(MATRIX)</li></ul><h3 id="WorkFlow"><a href="#WorkFlow" class="headerlink" title="WorkFlow"></a>WorkFlow</h3><p>자동화된 전체 프로세스를 나타낸 순서도<br>workflow file을 전달하면 github actions가 실행</p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>여러 step을 그룹 지어주는 역할, 단일한 가상환경 제공<br>각 잡끼리 서로 다른 가상 환경 부여 가능<br>잡끼리 디펜던시를 설정, 병렬 실행 가능</p><ul><li>step <ul><li>job 안에서 순차적으로 실행되는 프로세스 단위</li><li>파일 시스템을 통하여 서로 정보를 공유할 수 있음</li><li>명령을 내리거나 action 실행 가능</li></ul></li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li><p>단순히 os에서 지원하는 명령 뿐만 아니라 미리 제공된 action 또는 사용자가 커스텀한 액션을 호출하는 매커니즘</p></li><li><p>도커 컨테이너나 자바스크립트를 통해서 실행됨</p></li></ul><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>정의한 workflow를 언제 실행시킬 것인가</p><h2 id="깃허브-액션-어떡할래"><a href="#깃허브-액션-어떡할래" class="headerlink" title="깃허브 액션 어떡할래?"></a>깃허브 액션 어떡할래?</h2><p><a href="https://jonnung.dev/devops/2020/01/31/github_action_getting_started/">이 글</a>을 보면 이전 스텝의 결과 값을 매개변수로 받을 수 있음</p><ol><li>어제까지 푼 문제 목록들을 저장소에 저장<ol><li>레퍼지터리 파일을 참조 가능<ol><li>레퍼지터리를 루트로해서 그냥 가져옴</li></ol></li><li>액션 내에서 파일을 저장소에 저장 가능</li></ol></li><li>오늘까지 푼 문제들과 비교</li><li>비교해서 추가된 문제들을 반환 받음</li><li>오늘까지 푼 문제들은 다시 저장 </li><li>슬랙으로 메시지 보냄</li></ol>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit 기초 및 실습</title>
      <link href="/2022/03/10/secure_Metasploit%EA%B8%B0%EC%B4%88%EB%B0%8F%EC%8B%A4%EC%8A%B5/"/>
      <url>/2022/03/10/secure_Metasploit%EA%B8%B0%EC%B4%88%EB%B0%8F%EC%8B%A4%EC%8A%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Metasploit이란"><a href="#Metasploit이란" class="headerlink" title="Metasploit이란?"></a>Metasploit이란?</h2><p>Metasploit framework는 ruby 기반 모듈 침투 테스트 플랫폼이다. 2003년 Perl 베이스의 포터블 네트워크 도구로 개발됐다. 인터프리터 언어 기반 포터블 네트워크 프레임워크를 목표로 한 점에서 무어로서는 유연한 시스템 유지 보수 및 침투 테스트가 목적이었음을 알 수 있다.</p><p>기본적으로 MetaSploit framework는 침투 테스트 및 익스플로잇 개발을 위한 준비된 테스트 환경에서 사용하는 도구이다. MetaSploit 이전에 시스템 테스트 상황에서는 시스템(프레임 워크)이 지원하는지 안 하는지 모를 다양한 도구로 직접 코드 작성 후 네트워크에 수동으로 모든 상황을 수행해야 했다. 하지만 Metasploit의 등장과 함께 이 문제들은 해결되었다.</p><p>특히 MetaSploit은 오픈 소스이기 때문에 쉽게 커스텀 될 수 있는데 이 때문에 2007년 루비 버전 MetaSploit 3.0 공개와 함께 보안 커뮤니티에서 주목받았고 오퍼레이팅 시스템으로 자주 사용되고 있다.</p><p>그 결과 초기에는 공격 코드들의 모음집에 가까웠지만, 현재에 와서는 광범위 영역 정보 탐색, 공격, 사전 침투에 관련한 보안 도구의 설계와 개발 능력을 갖춘 침투 테스트용 툴(모의해킹 툴)로 성장하였다.</p><h2 id="침투-테스트란-무엇인가"><a href="#침투-테스트란-무엇인가" class="headerlink" title="침투 테스트란 무엇인가?"></a>침투 테스트란 무엇인가?</h2><p>침투 테스트란 Penertratijon testing으로 불리며 일종의 모의 해킹이다. 클라이언트에게 승인을 받은 후 해커가 시스템 취약점을 침투하는 것과 같이 클라이언트의 IT 시스템을 공격하는 방법입니다. 침투 테스트는 네트워크 보안 프로토콜 확인 및 네트워크 공격 시뮬레이션을 목적으로 합니다 취약점 진단과는 다르게 잠재적 보안 문제와 시스템을 검토하는 것을 넘어 취약점이 어떻게 악용 될 수 있는지 공격을 통해 보여 줍니다</p><p><img src="https://user-images.githubusercontent.com/37897508/85993850-e9638a00-ba31-11ea-8e48-9f4fc471af7a.png" alt="침투테스트 과정"></p><p>침투 테스트의 과정은 위의 그림과 같습니다. 간단하게 용어 설명을 하자면</p><ul><li>범위 설정<ul><li>타겟 네트워크 환경의 범위를 관찰하고 이해하는 과정</li><li>감시자에게 주어진 네트워크에 따라 무엇을, 어떻게, 어떤 조건 하에 테스트할 지 테스트 가능한 수준과 어느 정도의 시간이 소요 되는지 결정</li></ul></li><li>정보 수집<ul><li>다양한 공개 리소스를 통해 정보를 수집</li></ul></li><li>타겟 발견<ul><li>타겟의 네트워크 상태, 운영체제, 네트워크 구조를 파악하는 단계</li></ul></li><li>취약점 매핑<ul><li>정보 수집과 타겟 발견 단계에서 얻게된 자료를 조합하여 타겟 시스템의 취약점을 찾아내는 단계</li></ul></li><li>타겟 익스 플로잇<ul><li>발견한 취약점을 살펴보고 exploit 공격을 통해 침투하는 단계</li><li>SQL Injection, XSS, BOF 등</li></ul></li><li>권한 상승<ul><li>익스플로잇에 성공하면 root 권한을 취득한다</li></ul></li><li>장악 유지<ul><li>백도어 설치, 타겟 시스템에 항상 가동되는 프로세스로 마이그레이션</li></ul></li><li>문서화와 보고<ul><li>전단계의 과정, 공격한 취약점을 발표하고 문서화 하느느 과정</li><li>이 과정을 통해 관리자가 보완해야하는 보완 정책이 무엇인지 파악한다</li><li>침투 테스트에서 사용된 로그를 삭제한다</li></ul></li></ul><h2 id="Metasploit-아키텍쳐-구조"><a href="#Metasploit-아키텍쳐-구조" class="headerlink" title="Metasploit 아키텍쳐 구조"></a>Metasploit 아키텍쳐 구조</h2><p><img src="https://user-images.githubusercontent.com/37897508/86011020-242be900-ba57-11ea-9e39-dbb946f78761.png" alt="structure"></p><p>Metasploit은 크게 Interface, Libaries, Module, Tool, Plugin으로 이루어져 있다.</p><ul><li>Interface<ul><li>사용자와 상호작용하기 위한 사용자 인터페이스</li></ul></li><li>Module<ul><li>모듈화된 기능을 정의 하는 부분(기능-운영체제-서비스)</li></ul></li><li>Libraries<ul><li>메타스플로잇의 뼈대 역할을 하는 핵심 라이브러리들의 모음</li></ul></li><li>기타<ul><li>프레임워크 플러그인, 보조 도구 등을 포함</li></ul></li></ul><h3 id="라이브러리"><a href="#라이브러리" class="headerlink" title="라이브러리"></a>라이브러리</h3><h4 id="Rex"><a href="#Rex" class="headerlink" title="Rex"></a>Rex</h4><p>Rex는 루비 확장 라이브러리 있다. 위의 사진에서 보다시피 MSF Core에 코드를 제공한다. 의존성 문제를 피하기 위해 루비에서 제공하는 기본 라이브러리를 가져다 쓴 후 추가로 필요한 기능들을 추가해 확장 라이브러리를 만들었다. 주로 프레임워크에 필요한 클래스와 모듈을 제공하는 역할을 한다. 하위의 위치한 모든 패키지들의 상위 클래스처럼 동작한다.</p><p>Rex의 기능적 구성은 범용 클래스, 스레드 팩토리, 스레드 안정성 및 동기화, 인코딩, 아키텍쳐 서브 시스템, 어셈블리, 소켓, 프로토콜, 호환성으로 구별되어있다.</p><ul><li>범용클래스<ul><li>기본적인 것들 파일 불러오는것 예외처리</li></ul></li><li>스레드 팩토리, 스레드 안전성 및 동기화<ul><li>루비 기본 스레드는 부족한게 있어서 프레임워크에 필요한 기능들을 추가했음</li></ul></li><li>인코딩</li><li>아키텍쳐 서브시스템, 어셈블리<ul><li>그 아키텍처에 맞게 어셈블리 정의가 다를 수 있는데 그걸 위해</li></ul></li><li>소켓, 프로토콜<ul><li>통신을 위해</li></ul></li><li>호환성<ul><li>운영체제 식별을 위함</li></ul></li></ul><h4 id="Framework-Core"><a href="#Framework-Core" class="headerlink" title="Framework Core"></a>Framework Core</h4><p>모듈과 플러그인에 인터페이스를 제공하기 위한 클래스의 모임이다. Rex 라이브러리에서 정의한 기능을 토대로 구성한다. Rex가 건물의 뼈대만 제공한다면 Framework core의 경우 건물의 안을 어떻게 정의 할 것인가 관한 것이다.</p><p>Framework Core의 핵심 클래스는 범용 클래스, 프레임워크 문맥, db 관리자, 이벤트 관리로 구성되어 있다.</p><ul><li>범용 클래스<ul><li>상수나 예외가 기술되어 있다</li><li>모듈의 유형 운영체제 시스템 브라우저 종류같은게 정의 되어있다.</li></ul></li><li>프레임워크 문맥<ul><li>프레임워크 핵심요소, 기능들을 한데 모아놓은 것</li></ul></li><li>db 관리자<ul><li>msfconsole 구동할 때 부터 시작해서 모듈 로드 및 실행 취약점 데이터 베이스 등 데이터베이스에 관한 전반적인 것 관리</li></ul></li><li>이벤트 관리<ul><li>모듈을 쓰다 보면 이벤트가 발생한다</li><li>스캐너의 상태를 확인하고 싶다? 이런 문제나 이벤트를 확인할 때 쓴다</li></ul></li></ul><h4 id="Framework-Base"><a href="#Framework-Base" class="headerlink" title="Framework Base"></a>Framework Base</h4><p>Framework Base는 framework에서 사용하는 세션을 구현한다. 코어의 작업 관리를 위한 래퍼 인터페이스를 제공한다. Rex가 추상적이라면 Base는 핵심 기능 코드들을 적어 놓았다.</p><ul><li>세션<ul><li>하나의 연결 상태를 의미한다</li><li>내가 어떤 시스템을 공격했는데 채널이 열린 상태에서 어떤 명령을 보내고 어떻게 처리할 것인가를 말해주는게 세션이다</li><li>세션의 종류는 다양하다. (interpreter,shell etc..)</li></ul></li><li>심플 프레임 워크<ul><li>개발자 입장에서 봤을 때 개발자가 쉽게 사용할 수 있게 해주는 프레임 워크</li><li>심플 프레임 워크를 통해 코드를 간단하게 구성할 수 있따</li></ul></li></ul><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>Metasploit의 상호작용은 거의 Module에 의해 수행된다. 크게 exploit, auxiliary, post 등으로 구성된다.</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>Exploit은 시스템 및 응용 프로그램의 취약점을 이요하는 공격 코드의 모음이다. 보통 플랫폼 - 서비스 - 코드 구성으로 계층적 구조이다. 여기서 플랫폼은 운영체제이다. 서비스는 해당 플랫폼의 속하는 서비스들의 모음이다. 취약점의 종류가 무엇인가? http인가? ftp 취약점인가?와 같이 서비스들 별로 구별되어 있다. 코드는 해당 서비스의 해당 운영체제를 공격할 코드의 모음집이다.</p><p>Exploit은 local vs remote, client side vs server side로 구분된다.</p><ul><li>Local vs Remote<ul><li>공격 대상이 어디에 있는가가 핵심이다.</li><li>Local<ul><li>취약점이 있는 파일을 공격함</li></ul></li><li>Remote<ul><li>웹 서버를 직접 공격</li><li>네트워크 거리 상 멀 수 있음</li></ul></li></ul></li><li>Client side vs server side<ul><li>피해자의 개입, 트리거가 누구에게 있는가가 핵심이다</li><li>server side<ul><li>공격자가 피해자 서버에 직접 공격하는 것</li></ul></li><li>client side<ul><li>공격자가 피해자가 공격 당하길 수동적으로 기다리는것</li><li>일종의 트랩</li></ul></li></ul></li></ul><h4 id="Auxiliary"><a href="#Auxiliary" class="headerlink" title="Auxiliary"></a>Auxiliary</h4><p>페이로드를 필요로 하지 않는 공격 또는 정보 수집을 목적으로 하는 코드의 모음이다. DOS,DDOS와 같이 취약점 공격 만으로 시스템을 못쓰게 만드는 공격이 Auxiliary에 속한다 그래서 페이로드의 경우 정보보안의 3 요소 비밀성, 무결성, 가용성 중 주로 가용성을 파괴시키는 공격이다. 보통은 정보 수집을 목적으로 주로 사용하고 익스플로잇 공격 성공률을 높여준다.</p><p>공격 구성은 유형- 서비스 - 코드 식인데 익스플로잇과 마찬가지로 계층 구조이다.</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>페이로드는 공격 목적을 의미한다 익스플로잇 코드의 경우 단계가 있다. 시스템을 장악하기 위해 포트가 열려있다면 확인 후 코드를 보내는 식으로 말이다. 즉 이 경우, 공격의 목적은 시스템 장악에 있다. 취약점이라 하는 것은 결국은 자물쇠를 따고 들어가는 것이기에 자물쇠를 뚫은 후 무엇을 할지도 정해져 있어야한다. 페이로드가 그 무엇 즉 목적 코드이다.</p><h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><p>익스플로잇 성공 후 대상 시스템에 대한 추가 공격을 위한 코드 모음이다. 로컬 익스플로잇에 자주 사용한다. 권한 상승, 정보 수집, 파일 업 다운로드 등이 있다. 플랫폼 - 유형 - 코드 구성이다</p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>사용자와 상호작용하기 위한 사용자 인터페이스이다. metasploit에는 msfconsole, armitage,msfweb 등이 있다.</p><ul><li>msfconsole<ul><li>콘솔 기반 인터페이스로 메타스플로잇의 대부분 기능을 지원함</li></ul></li><li>arimitage<ul><li>GUI 환경으로 구성되어 있다.</li></ul></li><li>msfweb<ul><li>이전 metasploit 버전에는 있었지만 현재는 없다. pro 버전이 웹 기반으로 돌아가는데 pro 버전을 의미한다.</li></ul></li></ul><h2 id="Metasploit-실습-환경-구축"><a href="#Metasploit-실습-환경-구축" class="headerlink" title="Metasploit 실습 환경 구축"></a>Metasploit 실습 환경 구축</h2><h3 id="Kali-Linux에서-Metasploit-설치"><a href="#Kali-Linux에서-Metasploit-설치" class="headerlink" title="Kali Linux에서 Metasploit 설치"></a>Kali Linux에서 Metasploit 설치</h3><p>칼리 리눅스에는 기본적으로 메타스플로잇이 깔려있다. 보통은 이미 설치되어 있기 때문에 업데이트만 해서 사용하기도 하지만 공식 사이트에서 최신 버전을 받아 실행할 수 있다. 받은 프로그램은 .run 확장자인데 그대로 실행하면 메타스플로잇이 설치된다</p><p><a href="https://easy7.tistory.com/363">https://easy7.tistory.com/363</a><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/%EB%A9%94%ED%83%80%EC%8A%A4%ED%94%8C%EB%A1%9C%EC%9E%87%EC%84%A4%EC%B9%98.JPG" alt="metasploitable"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/%EB%A9%94%ED%83%80%EC%8A%A4%ED%94%8C%EB%A1%9C%EC%9E%87%EC%84%A4%EC%B9%983.JPG" alt="metasploitable"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~ msfdb init //msfdb 초기화</span><br><span class="line">root@kali:~ msfdb start //msfbdb 시작</span><br><span class="line">root@kali:~ db_status // db 연결 확인</span><br><span class="line">root@kali:~ db_services // msf에서 포트 스캔 후 열린 포트와 해당 포트의 서비스 보여줌</span><br><span class="line">root@kali:~ cat /usr/share/metasploit-framework/config/database.yml // msf 데이터베이스 구성 상태 확인</span><br></pre></td></tr></table></figure><p>메타스플로잇의 경우 msfdb라고 전용 데이터 베이스가 있다. 보통은 공격 과정에서 얻는 메타데이터들이 저장된다. db는 postgresql로 구성되어 있고 실습 전 미리 msfdb init 커맨드를 사용해 초기화 후 사용하면 된다.</p><p><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/db%EC%B4%88%EA%B8%B0%ED%99%94.JPG" alt="metasploitable"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/db%EC%99%80%EC%97%B0%EA%B2%B0.JPG" alt="metasploitable"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/db_Status,db_services.JPG" alt="metasploitable"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/msfconsole%EC%8B%A4%ED%96%891.JPG" alt="metasploitable"></p><h3 id="Metasploitable-환경-구축"><a href="#Metasploitable-환경-구축" class="headerlink" title="Metasploitable 환경 구축"></a>Metasploitable 환경 구축</h3><h4 id="Metasploitable-설치"><a href="#Metasploitable-설치" class="headerlink" title="Metasploitable 설치"></a>Metasploitable 설치</h4><p>Metasploit이란 Metasploit 팀에서 개발한 의도적으로 취약한 linux 가상 시스템이다. 보안 툴을 테스트하고 공통적인 침투테스트 기술을 연습하는데 사용한다. 처음 공식 홈페이지에서 받은 zip 파일을 추출 후 vmx 파일을 실행시키면 된다 기본 로그인 및 암호는 msfadmin이다</p><p><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/Metasploitable.JPG" alt="metasploitable"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/Metasploitable_boot.JPG" alt="metasploitable_boot"><br><img src="/img/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/Metasploitable_ls.JPG" alt="metasploitable_ls"></p>]]></content>
      
      
      <categories>
          
          <category> secure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>칼리 리눅스 설치 및 초기 세팅</title>
      <link href="/2022/03/10/secure_%EC%B9%BC%EB%A6%AC%EB%A6%AC%EB%88%85%EC%8A%A4%EC%84%A4%EC%B9%98%EB%B0%8F%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85/"/>
      <url>/2022/03/10/secure_%EC%B9%BC%EB%A6%AC%EB%A6%AC%EB%88%85%EC%8A%A4%EC%84%A4%EC%B9%98%EB%B0%8F%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h1><h2 id="실습-환경"><a href="#실습-환경" class="headerlink" title="실습 환경"></a>실습 환경</h2><ul><li>Window 10</li><li>Kali-2018.2 version<ul><li>RAM : 8GB</li><li>HardDisk : 80GB</li></ul></li><li>VM Wokrstation Pro</li></ul><h2 id="시작-전-이건-알고-가자"><a href="#시작-전-이건-알고-가자" class="headerlink" title="시작 전 이건 알고 가자"></a>시작 전 이건 알고 가자</h2><h3 id="Kali-linux란-무엇인가"><a href="#Kali-linux란-무엇인가" class="headerlink" title="Kali-linux란 무엇인가"></a>Kali-linux란 무엇인가</h3><p>[^1]: 데비안은 free OS,안정성과 보안 중점 OS<br>[^2]: 12학번 선배에게 들으니 본인은 백트랙으로 실습했다 하더라</p><ul><li>데비안 계열 Linux[^1]</li><li>모의 해킹 툴<ul><li>OS를 설치하면 해킹 툴들과 사용법이 나와있음</li><li>공식 홈페이지에서 무료로 다운로드 가능</li><li>백트랙의 후속 버전[^2]</li></ul></li></ul><h3 id="설치-과정-중-에러"><a href="#설치-과정-중-에러" class="headerlink" title="설치 과정 중 에러"></a>설치 과정 중 에러</h3><h4 id="can-be-run-after-disabling-Device-x2F-Creditial-Guard-Error"><a href="#can-be-run-after-disabling-Device-x2F-Creditial-Guard-Error" class="headerlink" title="~ can be run after disabling Device&#x2F;Creditial Guard Error"></a>~ can be run after disabling Device&#x2F;Creditial Guard Error</h4><p><img src="https://user-images.githubusercontent.com/37897508/80946668-82f32e80-8e29-11ea-878f-e3419f0154df.PNG" alt="Error Message"></p><p>일종의 방화벽이 걸려있어서 생기는 에러이다. 나같은 경우 VM Workstation을 사용하는데 윈도우 자체에서 지원하는 VM 매니저가 이미 설치되어 있어서 오류가 뜨는거라 추측한다</p><p>[^3]: 하이퍼 바이저는 윈도우 VM 매니저이다.</p><ul><li>해결법<ul><li>가상화 보안 해제<ol><li>gpedit 실행</li><li>컴퓨터 구성 -&gt; 관리 템플릿 -&gt; 시스템 -&gt; Device Guard 접속</li><li>“가상화 기반 보안 켜기”를 “사용 안 함”으로 설정</li></ol></li><li>하이퍼 바이저 해제[^3]<ol><li>제어판 - 프로그램 - windows 기능 켜기&#x2F;끄기 - Hyper-V접근</li><li>Hyper-V 체크 해제</li></ol></li></ul></li></ul><h4 id="한글-입력이-안될-때"><a href="#한글-입력이-안될-때" class="headerlink" title="한글 입력이 안될 때"></a>한글 입력이 안될 때</h4><ul><li><p>지역 및 언어 - 입력 소스 설정 - 나사모양 - 변환 key 설정<br><img src="https://user-images.githubusercontent.com/37897508/81172174-b88a4a00-8fd8-11ea-954f-efefd80a2113.png" alt="설정"></p></li><li><p>터미널에서 하는법</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install fcitx-hangul</span><br><span class="line">$ apt-get install fcitx-lib*</span><br><span class="line">$ apt-get install fonts-nanum*</span><br><span class="line">$ init 6</span><br></pre></td></tr></table></figure><ul><li>위의 커맨드를 모두 입력했다면 입력기에서 설정해야한다<ul><li>입력기 설정 창 커맨드는 im-config</li><li>입력기 설정에서 기본 입력기를 fctix로 설정</li><li>fcitx-config-gtk3 입력 후 한글 추가 및 전환 키 입력</li></ul></li></ul><h3 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h3><ul><li>칼리 처음 실행하면 잠겨 있음<ul><li>2018 버전<ul><li>ID : root</li><li>PWD : toor</li></ul></li><li>2020 버전<ul><li>ID&#x2F;PWD : kali</li></ul></li></ul></li><li>VM에서 마우스 포인터 탈출하기<ul><li>ctrl + alt 누르면 된다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> secure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>칼리 리눅스 오류 해결</title>
      <link href="/2022/03/10/secure_%EC%B9%BC%EB%A6%AC%EB%A6%AC%EB%88%85%EC%8A%A4%EC%98%A4%EB%A5%98%ED%95%B4%EA%B2%B0/"/>
      <url>/2022/03/10/secure_%EC%B9%BC%EB%A6%AC%EB%A6%AC%EB%88%85%EC%8A%A4%EC%98%A4%EB%A5%98%ED%95%B4%EA%B2%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="ifconfig-실행-안되는-오류-해결-방법"><a href="#ifconfig-실행-안되는-오류-해결-방법" class="headerlink" title="ifconfig 실행 안되는 오류 해결 방법"></a>ifconfig 실행 안되는 오류 해결 방법</h2><p><img src="https://user-images.githubusercontent.com/37897508/86571785-f7bf2200-bfac-11ea-8460-635b42a8cdb2.png" alt="ipconfig"></p><p>실습을 진행 중 IP를 확인하려 했는데 ifconfig를 쳤더니 커맨드를 찾을 수 없다고 나왔다. 그래서 내가 착각했나..? 싶어 ipcofnig까지 쳤는데 역시나 찾을 수 없다고 나온다</p><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/home/kali# ip a</span><br></pre></td></tr></table></figure><p>위의 커맨드를 입력하면 IP를 확인할 수 있다 데이반 9 버전부터 ifconfig 커맨드가 실행되지 않는다고 한다. </p><h2 id="command-not-found-오류"><a href="#command-not-found-오류" class="headerlink" title="command not found 오류"></a>command not found 오류</h2><p>가끔 기본 커맨드임에도 불구하고 커맨드가 입력이 되지 않는 경우가 있다. command not found라고 쉘에 출력이되는데 이를 해결해보자</p><h3 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h3><p>리눅스에서 커맨드를 실행 시키는 방법은 alias처럼 일종의 단축키를 저장해두고 불러오는 방식이다. command not found는 이 저장된 단축키를 불러오는 중 경로가 잘못된 경우 발생한다.</p><p><img src="https://user-images.githubusercontent.com/37897508/86774904-ec91f200-c091-11ea-8dc3-8b96c534bf70.JPG" alt="캡처"></p><p>이제 문제를 해결해보자 vim이던 vi 던 편집기로 .bash_profile을 연 후 아래 경로로 수정한다.(아래 폴더들도 수정하면 된다)</p><ul><li>bashrc</li><li>bash_profile</li></ul><p><img src="https://user-images.githubusercontent.com/37897508/86774911-edc31f00-c091-11ea-8d0d-d195046fbd30.JPG" alt="command not found"></p><p>그 후 soruce [file] 명령어를 실행 시켜야한다. source 커맨드는 shell bulit-in command이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> .bashrc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> secure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>리눅스 쉘 스크립트 익히기 -1</title>
      <link href="/2022/03/10/shell_Script_1/"/>
      <url>/2022/03/10/shell_Script_1/</url>
      
        <content type="html"><![CDATA[<h2 id="Hacker-Rank로-쉘-스크립트를-배우다"><a href="#Hacker-Rank로-쉘-스크립트를-배우다" class="headerlink" title="Hacker Rank로 쉘 스크립트를 배우다"></a>Hacker Rank로 쉘 스크립트를 배우다</h2><p>알고리즘 연습용 사이트를 찾다가, 영어이긴 하지만 해커랭크에서는 문제를 많이 풀면 배찌? 등급도 나눠준다길래 동기부여에 좋을거 같아 시작했다.</p><p>막상 시작하니 해커랭크에서 알고리즘을 비롯한 SQL, Shell 등 챌린지도 있길래, 마침 쉘스크립팅 능력의 필요성을 느끼고 있어 시작하게 되었다.</p><h2 id="Linux-Shell-with-Hacker-Rank"><a href="#Linux-Shell-with-Hacker-Rank" class="headerlink" title="Linux Shell with Hacker Rank"></a>Linux Shell with Hacker Rank</h2><h3 id="Let’s-Echo"><a href="#Let’s-Echo" class="headerlink" title="Let’s Echo"></a>Let’s Echo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;HELLO&quot;</span></span></span><br></pre></td></tr></table></figure><p>명령어 echo는 출력 명령어이다.</p><h3 id="Looping-and-Skipping"><a href="#Looping-and-Skipping" class="headerlink" title="Looping and Skipping"></a>Looping and Skipping</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;1..99..2&#125;</span><br><span class="line">do</span><br><span class="line">    echo $var</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>변수를 사용할 때는 변수 앞에 $를 붙여야 인식한다</li></ul><h3 id="A-Personalized-Echo"><a href="#A-Personalized-Echo" class="headerlink" title="A Personalized Echo"></a>A Personalized Echo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read name</span><br><span class="line">echo Welcome $name</span><br></pre></td></tr></table></figure><ul><li>read는 입력 값을 받는 명령어이다<ul><li>read [var]</li></ul></li></ul><h3 id="The-World-of-Numbers"><a href="#The-World-of-Numbers" class="headerlink" title="The World of Numbers"></a>The World of Numbers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read varX</span><br><span class="line">read varY</span><br><span class="line"></span><br><span class="line">echo $(($varX + $varY))</span><br><span class="line">echo $(($varX - $varY))</span><br><span class="line">echo $(($varX * $varY))</span><br><span class="line">echo $(($varX / $varY))</span><br></pre></td></tr></table></figure><ul><li>(var)처럼 변수를 감싸서 변수를 연산을 인식 시킬 수 있다</li><li>expr 명령어나 사칙 연산 값을 변수에 담아서도 풀 수 있다.</li></ul><h3 id="Comparing-Numbers"><a href="#Comparing-Numbers" class="headerlink" title="Comparing Numbers"></a>Comparing Numbers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read valX</span><br><span class="line">read valY</span><br><span class="line"></span><br><span class="line">if [ $valX -eq $valY ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;X is equal to Y&quot;</span><br><span class="line">elif [ $valX -gt $valY ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;X is greater than Y&quot;</span><br><span class="line">elif [ $valX -lt $valY ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;X is less than Y&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>조건문 if [ 조건 ]를 쓸 땐 []의 앞뒤에 공백이 있어야한다<ul><li>이거 땜에 왜 안되지싶었다</li></ul></li><li>기본적인 형식은 아래와 같다</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 조건 ]</span><br><span class="line">then</span><br><span class="line">    [ statment ]</span><br><span class="line">elif [ 조건 2]</span><br><span class="line">then</span><br><span class="line">    [ statement ]</span><br><span class="line">else</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Getting-started-with-conditionals"><a href="#Getting-started-with-conditionals" class="headerlink" title="Getting started with conditionals"></a>Getting started with conditionals</h3><p>입력 값으로 Y와 y가 주어질 경우엔 YES 아닐 경우 NO를 출력하는 문제이다</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read val</span><br><span class="line"></span><br><span class="line">Lowercase()</span><br><span class="line">&#123;</span><br><span class="line"> echo $* | tr &quot;[A-Z]&quot; &quot;[a-z]&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $(Lowercase $val) == &quot;y&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;YES&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;NO&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>Lowercase()란 함수를 만들어 입력 값을 무조건 소문자로 바꾸게 만들었다<ul><li>tr은 translate의 약자로 지정한 문자를 삭제하거나 변환하는 명령어이다</li></ul></li><li>함수 내에 매개변수를 만들고 사용할 때 간편해서 이게 쉘스크립트의 매력인가 싶다.</li></ul><h3 id="More-on-Conditionals"><a href="#More-on-Conditionals" class="headerlink" title="More on Conditionals"></a>More on Conditionals</h3><h4 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h4><p>삼각형의 세 변을 나타내는 세 정수(X,Y, Z)가 주어졌을 때, 삼각형이 스칼렌인지, 이등변인지, 등변인지를 확인한다.</p><p>세 변이 모두 같으면 <strong>EQUATIONAL</strong> 을 출력합니다.<br>그렇지 않으면, 양쪽이 같으면 <strong>ISOSCELES</strong> 를 출력합니다.<br>그렇지 않으면 <strong>SCALENE</strong> 을 출력합니다.</p><h4 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read x</span><br><span class="line">read y</span><br><span class="line">read z</span><br><span class="line"></span><br><span class="line">if [ $x -eq $y -a $x -eq $z ]</span><br><span class="line">then</span><br><span class="line">    echo EQUILATERAL</span><br><span class="line">elif [ $x -eq $y -o $y -eq $z ]</span><br><span class="line">then</span><br><span class="line">    echo ISOSCELES</span><br><span class="line">else</span><br><span class="line">    echo SCALENE</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>논리 연산자 &amp; 와 | 는 각각 -a(AND), -o(OR)와 같다.<ul><li>논리 연산자를 조건문 내에서 여러 개 쓰고 싶다면 [ 조건문 1] &amp;&amp; [조건문 2] … &amp;&amp;[조건문 N] 형식으로 사용가능 하다</li></ul></li></ul><h3 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a>Arithmetic Operations</h3><h4 id="문제-1"><a href="#문제-1" class="headerlink" title="문제"></a>문제</h4><p>+,-,*,^, &#x2F; 및 괄호를 포함하는 수학식이 제공됩니다. 식을 읽고 평가하십시오. 소수점 이하 3자리로 반올림한 결과를 표시합니다.</p><h4 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">read val</span><br><span class="line"></span><br><span class="line">val=$&#123;val// /&#125;</span><br><span class="line"></span><br><span class="line">function Cut()&#123;</span><br><span class="line">    echo &quot;scale=$1;$&#123;2&#125;&quot; | bc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bRound=`Cut 4 $val`</span><br><span class="line"></span><br><span class="line">if [ $&#123;bRound: -1&#125; -eq 5 ];then</span><br><span class="line">    dest=`echo &quot;$&#123;#bRound&#125;-1&quot; | bc`</span><br><span class="line">    echo &quot;$&#123;bRound:0:$dest&#125;+0.001&quot; | bc</span><br><span class="line">else</span><br><span class="line">    Cut 3 $val</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li><p>${ <strong>String</strong> &#x2F; A &#x2F; B }</p><ul><li>A는 변환할 대상 문자열<ul><li>&#x2F; : 첫 번째로 만나는 A만 변환</li><li>&#x2F;&#x2F; : 문자열 내 모든 A 형식을 변환</li></ul></li><li>B는 변환할 문자열</li><li>띄어쓰기 때문에 인자를 다 못받아 내길래 띄어쓰기를 없애려고 사용하였다</li></ul></li></ul><ul><li>연산 명령어 bc를 이용했는데 5를 올리지 않고 버리길래 좀 헤맸다<ul><li>printf를 쓰면 간단하게 해결할 수 있는 문제였다<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read num</span><br><span class="line">echo $num | bc -l | xargs printf &quot;%.3f&quot;</span><br></pre></td></tr></table></figure></li><li>xargs는 앞선 명령의 결과를 입력으로 받아 인자를 연속적으로 사용할 수 있게한다</li></ul></li></ul><ul><li>bc는 연산 명령어이다<ul><li>echo <strong>Calculation Expression</strong> | bc 형식으로 사용한다</li><li>scale은 소숫점 몇 째자리에서 반올림 할 지 결정하는 옵션이다</li></ul></li><li>${<strong>#String Expression</strong> }에서 #은 문자열의 갯수를 세는 특수문자이다</li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>입양 시간 구하기 - 프로그래머스 SQL 고득점 KIT</title>
      <link href="/2022/03/10/sql-groupby-4/"/>
      <url>/2022/03/10/sql-groupby-4/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="입양-시간-구하기"><a href="#입양-시간-구하기" class="headerlink" title="입양 시간 구하기"></a>입양 시간 구하기</h1><h2 id="입양-시간-구하기-1"><a href="#입양-시간-구하기-1" class="headerlink" title="입양 시간 구하기 -1"></a>입양 시간 구하기 -1</h2><p>문제는 간단한데 함수를 몰라서 좀 헤맸다.</p><p>보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다. 09:00부터 19:59까지, 각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요. 이때 결과는 시간대 순으로 정렬해야 합니다.</p><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><ol><li>HOUR(각 시간대), COUNT(입양 건 수)를 출력하라</li><li>결과는 시간대 순으로 정렬하라</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(DATETIME) <span class="keyword">AS</span> <span class="keyword">HOUR</span>, <span class="built_in">COUNT</span>(<span class="keyword">HOUR</span>(DATETIME)) <span class="keyword">AS</span> COUNT <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(DATETIME) <span class="keyword">HAVING</span> <span class="keyword">HOUR</span><span class="operator">&gt;=</span><span class="number">9</span> <span class="keyword">AND</span> <span class="keyword">HOUR</span> <span class="operator">&lt;=</span> <span class="number">19</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(DATETIME) <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>시간 함수인 HOUR을 이용하면 시간대 별 속성을 만들 수 있다</p><h2 id="입양-시간-구하기-2"><a href="#입양-시간-구하기-2" class="headerlink" title="입양 시간 구하기 -2"></a>입양 시간 구하기 -2</h2><p>정보처리 기사에서 보지 못한 개념들이 나와 새로 배웠다</p><p>보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다. 0시부터 23시까지, 각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요. 이때 결과는 시간대 순으로 정렬해야 합니다.</p><h3 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h3><ol><li>0 ~ 23시까지의 필드를 만들 것</li><li>시간대 별로 입양 건수 출력하라</li><li>결과는 시간대 순으로 정렬하라</li></ol><p>처음엔 그냥 입양 시간 구하기-1처럼 HAVING을 사용하면 될 줄 알았는데 입양 한 건도 되지 않은 시간은 필드가 아예 없어서 새로 만들어야 했다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@hour</span> :<span class="operator">=</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> (<span class="variable">@hour</span> :<span class="operator">=</span> <span class="variable">@hour</span> <span class="operator">+</span><span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">HOUR</span>, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">WHERE</span> <span class="keyword">HOUR</span>(DATETIME)<span class="operator">=</span><span class="variable">@hour</span>) <span class="keyword">AS</span> COUNT <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">WHERE</span> <span class="variable">@hour</span> <span class="operator">&lt;</span><span class="number">23</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@hour</span> :<span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>@는 변수를 선언할 때 사용하며 @NAME 형식으로 사용한다.</li><li>:&#x3D;는 할당한다는 뜻이다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="variable">@hour</span> :<span class="operator">=</span> <span class="variable">@hour</span> <span class="operator">+</span><span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">HOUR</span>, <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">WHERE</span> <span class="variable">@hour</span> <span class="operator">&lt;</span><span class="number">23</span></span><br></pre></td></tr></table></figure><ul><li>(@hour :&#x3D; @hour + 1)은 hour에 1을 계속 더하겠다는 말이다.<ul><li>뒤이은 WHERE @hour &lt;23은 hour을 값을 제한 해준다</li><li>hour이 22가 되면 멈춰서, 23까지 필드를 만든다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>없어진 기록 찾기 - 프로그래머스 SQL 고득점 KIT</title>
      <link href="/2022/03/10/sql-join-1/"/>
      <url>/2022/03/10/sql-join-1/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="없어진-기록-찾기"><a href="#없어진-기록-찾기" class="headerlink" title="없어진 기록 찾기"></a>없어진 기록 찾기</h1><p>ANIMAL_INS 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. ANIMAL_INS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, INTAKE_CONDITION, NAME, SEX_UPON_INTAKE는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p><p>ANIMAL_OUTS 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다. ANIMAL_OUTS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, NAME, SEX_UPON_OUTCOME는 각각 동물의 아이디, 생물 종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다. ANIMAL_OUTS 테이블의 ANIMAL_ID는 ANIMAL_INS의 ANIMAL_ID의 외래 키입니다.</p><p>천재지변으로 인해 일부 데이터가 유실되었습니다. 입양을 간 기록은 있는데, 보호소에 들어온 기록이 없는 동물의 ID와 이름을 ID 순으로 조회하는 SQL문을 작성해주세요.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> OUTS.ANIMAL_ID,OUTS.NAME <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">AS</span> OUTS <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ANIMAL_INS <span class="keyword">AS</span> INS <span class="keyword">ON</span> OUTS.ANIMAL_ID <span class="operator">=</span> INS.ANIMAL_ID <span class="keyword">WHERE</span> INS.ANIMAL_ID <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> OUTS.ANIMAL_ID</span><br></pre></td></tr></table></figure><ul><li><p>개념만 보다가 직접 풀려니까 애매한게 느껴졌다 공부가 더 필요하다</p></li><li><p>LEFT JOIN</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ANIMAL_OUTS <span class="keyword">AS</span> OUTS <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ANIMAL_INS <span class="keyword">AS</span> INS <span class="keyword">ON</span> OUTS.ANIMAL_ID <span class="operator">=</span> INS.ANIMAL_ID </span><br></pre></td></tr></table></figure><p>SQL 문을 위와 같이 작성해보자. JOIN 결과를 보면 ANIMAL_OUTS 테이블이 왼쪽, ANIMAL_INS가 오른쪽에 나오는걸 알 수 있다.</p><p>즉 LEFT JOIN은 SELECT ~ FROM [TABLE 이름] 일 때 먼저 나온 테이블 결과 값을 어느 쪽에 출력할 것이냐 정하는거다</p><ul><li>ON</li></ul><p>JOIN을 사용하려면 무엇을 기준으로 조인할 것인지 정해야한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> OUTS.ANIMAL_ID <span class="operator">=</span> INS.ANIMAL_ID </span><br></pre></td></tr></table></figure><p>그래서 위의 SQL 문을 보면 ANIMAL_ID를 기준으로 조인한 것을 알 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>중성화 여부 파악하기 - 프로그래머스 SQL 고득점 KIT</title>
      <link href="/2022/03/10/sql-join-4/"/>
      <url>/2022/03/10/sql-join-4/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="중성화-여부-파악하기"><a href="#중성화-여부-파악하기" class="headerlink" title="중성화 여부 파악하기"></a>중성화 여부 파악하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>ANIMAL_INS 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. ANIMAL_INS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, INTAKE_CONDITION, NAME, SEX_UPON_INTAKE는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p><p>보호소의 동물이 중성화되었는지 아닌지 파악하려 합니다. 중성화된 동물은 SEX_UPON_INTAKE 컬럼에 ‘Neutered’ 또는 ‘Spayed’라는 단어가 들어있습니다. 동물의 아이디와 이름, 중성화 여부를 아이디 순으로 조회하는 SQL문을 작성해주세요. 이때 중성화가 되어있다면 ‘O’, 아니라면 ‘X’라고 표시해주세요.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_ID,NAME,<span class="keyword">CASE</span> <span class="keyword">WHEN</span>(SEX_UPON_INTAKE <span class="keyword">LIKE</span> <span class="string">&#x27;%NEUTERED%&#x27;</span> <span class="keyword">OR</span> SEX_UPON_INTAKE <span class="keyword">LIKE</span> <span class="string">&#x27;%SPAYED%&#x27;</span>) <span class="keyword">THEN</span> <span class="string">&#x27;O&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;X&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> 중성화 <span class="keyword">FROM</span> ANIMAL_INS <span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID</span><br></pre></td></tr></table></figure><ul><li>조건문을 사용할 줄 알아야한다.</li></ul><p>조건문은 SQL에서 2 가지가 있다. (CASE 와 If )<br>(나중에 공부하다 배우면 더 기술하겠음)</p><p>CASE의 경우 아래와 같은 형식으로 사용한다.<br>WHEN을 여러 개 사용해서 다중 조건문으로도 사용할 수 있다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> 조건문 <span class="keyword">THEN</span> 참인 경우의 값 <span class="keyword">ELSE</span> 거짓인 경우의 값 <span class="keyword">END</span> 컬럼 명</span><br></pre></td></tr></table></figure><p>If 문은 아래와 같다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF (조건문) 참일 경우의 값 ELSE 거짓일 경우의 값 END 컬럼명</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NULL 처리하기 - 프로그래머스 SQL 고득점 KIT</title>
      <link href="/2022/03/10/sql-null-3/"/>
      <url>/2022/03/10/sql-null-3/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="NULL-처리하기"><a href="#NULL-처리하기" class="headerlink" title="NULL 처리하기"></a>NULL 처리하기</h1><p>입양 게시판에 동물 정보를 게시하려 합니다. 동물의 생물 종, 이름, 성별 및 중성화 여부를 아이디 순으로 조회하는 SQL문을 작성해주세요. 이때 프로그래밍을 모르는 사람들은 NULL이라는 기호를 모르기 때문에, 이름이 없는 동물의 이름은 “No name”으로 표시해 주세요.</p><p>위 문제의 핵심은 NULL 값일 때 속성 NAME의 NULL을 “No name”으로 바꾸는 것이다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_TYPE,IFNULL(NAME,<span class="string">&#x27;No name&#x27;</span>),SEX_UPON_INTAKE <span class="keyword">FROM</span> ANIMAL_INS <span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID</span><br></pre></td></tr></table></figure><p>MYSQL에서는 IFNULL(속성,’치환 값’) 형식으로 NULL 값일 때 값을 치환 할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프로그래머스 고득점 KIT 중복 제거하기</title>
      <link href="/2022/03/10/sql-smm-4/"/>
      <url>/2022/03/10/sql-smm-4/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="프로그래머스-고득점-KIT-중복-제거하기"><a href="#프로그래머스-고득점-KIT-중복-제거하기" class="headerlink" title="프로그래머스 고득점 KIT 중복 제거하기"></a>프로그래머스 고득점 KIT 중복 제거하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>동물 보호소에 들어온 동물의 이름은 몇 개인지 조회하는 SQL 문을 작성해주세요. 이때 이름이 NULL인 경우는 집계하지 않으며 중복되는 이름은 하나로 칩니다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> NAME) <span class="keyword">FROM</span> ANIMAL_INS <span class="keyword">WHERE</span> NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>DISTINCT를 사용하면 오류가 떠서 뭔가 했는데, COUNT() 내에 사용해야했었다.</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DATETIME에서 DATE로 형 변환 - 프로그래머스 SQL 고득점 KIT</title>
      <link href="/2022/03/10/sql-str-5/"/>
      <url>/2022/03/10/sql-str-5/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h1 id="DATETIME에서-DATE로-형-변환"><a href="#DATETIME에서-DATE로-형-변환" class="headerlink" title="DATETIME에서 DATE로 형 변환"></a>DATETIME에서 DATE로 형 변환</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>ANIMAL_INS 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. ANIMAL_INS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME, INTAKE_CONDITION, NAME, SEX_UPON_INTAKE는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p><p>ANIMAL_INS 테이블에 등록된 모든 레코드에 대해, 각 동물의 아이디와 이름, 들어온 날짜1를 조회하는 SQL문을 작성해주세요. 이때 결과는 아이디 순으로 조회해야 합니다.</p><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_ID,NAME,DATE_FORMAT(DATETIME,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)<span class="keyword">AS</span> 날짜 <span class="keyword">FROM</span> ANIMAL_INS <span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID</span><br></pre></td></tr></table></figure><p>이 문제의 핵심은 날짜 형 변환을 할 수 있는가다<br>DATE_FORMAT(날짜,변환하고자하는 형)을 사용하면된다.</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>생각의 틈</title>
      <link href="/2022/03/10/write_%EC%83%9D%EA%B0%81%EC%9D%98%ED%8B%88/"/>
      <url>/2022/03/10/write_%EC%83%9D%EA%B0%81%EC%9D%98%ED%8B%88/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><p>생각의 틈이란 머리 속에 떠다니는 생각들을 정리하는 시간(틈)을 말한다. 많은 것을 배우고, 정보를 집어 삼키지만 그걸 천천히 돌아보는 시간을 얼마나 가졌는가<br>밤 산책을 할 때, 잠깐 하늘을 쳐다보고 있을 때, 유튜브를 보지않고 그냥 런닝머신을 걸을 때 무언가 머리가 명쾌해지는걸 느낀다.<br>사람 버전의 피버 모드인거 같은데 이 모드를 발동시키는 기준은 뭘까 생각해봤다.</p><p>아마 너무나 쉬운 일이라 내 정신력을 쓰지 않아도 되는 일을 할 때 피버모드가 시작되는 것 같다.<br>몸은 바쁘게 움직이고 있지만, 상대적으로 정신은 여유로워지니까 똑같은 질문이 와도 더 깊이 사고하게 되는거다<br>일종의 클루지이지 않을까? 인간은 무슨 일을 할 때 본능적으로 어떻게하면 효율적인가 생각하게 된다.<br>하지만 지금 하고 있는 일이 그럴 가치도 없을 만큼 잘하는 일(생각할 필요도 없는 쉬운 일)이라 머리가 쉬고 있을 때,<br>어려운 일(깊은 생각이 필요한 일)을 던져주면 오! 일이다! 하면서 달려들어서 해결해버리는거지</p><p>요즘 우리는 과몰입 상태에서 살아가고 있어 생각의 틈이 더 절실하다. 몰입시키는 것들이 너무 많다.<br>내 꿈과 목표를 성취하기 위해 의식적으로 몰입하는 것을 너머 인스타와 유튜브 알고리즘에 빠져버린다.<br>새로운 정보는 자극적이라 나도 모르게 푹 빠져버리고 미쳐버릴만큼 즐겁다. 인스타와 유튜브는 그런 정보를 제공하는 주체이다.</p><p>일단 몰입하면 집중의 대상인 그 하나만 생각하고 생각하며 파고든다. 안풀리는 문제를 푸려고 끙끙거리다보니 날이 샌거처럼 시간의 흐름도 잊는다.<br>몰입의 결과 우린 성취한다. 적어도 어느 정도 목표한 걸 이루게 된다. 그 성취에 기인해 짜릿한 쾌감을 얻는다.</p><p>인스타나 유튜브 등은 이러한 몰입 회로를 조작한다. 일단 몰입했는데 성취는 없으니 공허함을 느끼는 것 같다.<br>유튜브 알고리즘을 타고 다니다 보니 새벽 4시가 되었을 때 내가 한심해 보였었다. 당연히 내 양심이 이런 버그를 가만 두지 않고 마음 한 구석을 불편하게 한다.<br>우리 인간은 오버클럭하도록 설계되어 있지 않다. 강제적으로 몰입시키는 것들이 아니더라도, 목표에 너무나 빠지게 되면 우린 번아웃한다.</p><p>나를 둘러싸고 있는 가능성과 ToDo 리스트들이 많다. 아마도 난 그 가능성들에 몰입하겠지. 성장해야하니깐 말야.<br>바빠지고 힘들 수도 있다. 멈출 수 없을 것처럼 보일 수도 있고 말야. 그런 와중에도 의식적으로 생각의 틈을 만들자.<br>생각의 틈에 나를 밀어 넣어보자. 무엇을 할 때 행복한지, 무엇으로 살아나갈 것인지.<br>미래의 불확실함이 나를 불안하게 할 때 내 마음을 단단히 잡아줄거다</p>]]></content>
      
      
      <categories>
          
          <category> write </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>생각의 흐름을 검증하라</title>
      <link href="/2022/03/10/write_%EC%9C%A0%ED%9A%A8%EC%84%B1%EA%B2%80%EC%A6%9D/"/>
      <url>/2022/03/10/write_%EC%9C%A0%ED%9A%A8%EC%84%B1%EA%B2%80%EC%A6%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="유효성-검증이란"><a href="#유효성-검증이란" class="headerlink" title="유효성 검증이란"></a>유효성 검증이란</h2><p>유효성 검증이란 데이터의 값이 유효한가, 올바른가 체크하는 것을 의미한다. 의도하지 않은 데이터를 내가 원치 않는 곳으로 보내지 않기 위해서 한다</p><p>프로그래머로써 무언가를 개발할 때 유효성 검증은 필수적 요소이다. 결국은 내 생각을 구현하는 것이고, 빈틈은 항상 존재하기 때문이다.</p><h2 id="생각-확장"><a href="#생각-확장" class="headerlink" title="생각 확장"></a>생각 확장</h2><p>내 사고의 흐름 또한 유효성 검증이 필요하다. 인간이 맥락적 동물이기 때문이다 정직한 사람의 솔직한 말도 거짓일 수 있다.<br>인간의 기억은 융합되고, 사라지고, 변형되기 때문이다.<br>불확실함 속에서 살아가는 우리는 실수를 하고, 정확히 기억하지 못하며, 나도 모르는 흐름에 파묻힌다.</p><p>오늘 아침에 일을하던 도중 갑자기 머리가 아팠다. 점점 조여오는 아픔에 점심 먹고 침대에서 쉬어야겠다 자연스럽게 생각했다.<br>이게 함정이다. 머리가 아픈데 쉬면 머리가 안 아파진다는게 확실한가.<br>차라리 약을 먹고 계획했던 일을 하는 게 더 나은 선택이지 않을까?<br>머리가 아픈 이유도 모르는데 그냥 쉬는 게 답일리가 없다. 난 그저 평소처럼 잘 자고 아침 먹고 일을 했을 뿐인걸<br>이런 의문들에 결국 점심 먹고 런닝머신을 뛰고 운동을 한 시간 정도 했다. 차가운 물로 샤워까지 딱 하고 말이다.<br>그러고 앉아서 글을 쓰고 있다. 지금은 머리가 아픈지 모르겠다. 다행히 더 아프지도 않고 컨디션도 좋아졌다.</p><p>절대 침대에서 잠을 더 자는 게 나쁜 선택이란 소리가 아니다. 아프면 쉴 수 있다. 경험에 기반한 전략 중에 하나니깐 말이다<br>평소와 똑같은 하루를 보내는 중 뜬금없이 찾아온 고통에 그냥 쉬어야겠다 마음먹는 것 보다<br>왜 아픈가 의심하고, 해야 할 일을 하며 경과를 지켜보는 게 낫지 않을까 싶다. 내 하루의 맥락을 바꾸고 싶지 않은 거지.</p><p>누우면 자고 싶은게 사람 심리고, 지금 해야 할 일을 하지 않으면 저녁때 쯤의 난 더 바빠질 거니깐 말야<br>어쩔 수 없는 맥락의 동물이라면, 의도적인 맥락을 만들고, 자연스레 빠지는 생각의 함정을 꾸준히 의심해야 한다.<br>상황을 주도 하는건 나여야 한다. 일종의 사고의 유효성 검사를 하고 있는 거라 생각한다.<br>내 생각이 온전한 내 생각이 아닐 수도 있다. 다른 사람이나 미디어 등의 영향을 쉽게 받는 인간이기 때문이다<br>자연스레 이어지는 의식의 흐름 속에서 꾸준히 의심하라</p>]]></content>
      
      
      <categories>
          
          <category> write </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>좋은 글을 쓰는 방법 feat 기술 블로그</title>
      <link href="/2022/03/10/write_%EC%A2%8B%EC%9D%80%EA%B8%80%EC%93%B0%EB%8A%94%EB%B0%A9%EB%B2%95/"/>
      <url>/2022/03/10/write_%EC%A2%8B%EC%9D%80%EA%B8%80%EC%93%B0%EB%8A%94%EB%B0%A9%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<!-- 튜토리얼, 하우 투 가이드, 설명 ,레퍼런스 https://documentation.divio.com/tutorials/--><h2 id="글의-형식을-정하라"><a href="#글의-형식을-정하라" class="headerlink" title="글의 형식을 정하라"></a>글의 형식을 정하라</h2><p><img src="https://documentation.divio.com/_images/overview.png" alt="아무도 알려주지 않는 문서화의 비밀"></p><p>글을 쓰기에 앞서 내가 쓰는 글의 형식을 정해야한다. Daniele Procida님의 <a href="https://documentation.divio.com/_images/overview.png">아무도 알려주지 않는 문서화의 비밀</a>에선 기술 블로그의 형식은 4가지로 나눠진다.</p><ol><li>튜토리얼<ul><li><strong>핵심</strong> : 내가 배운 것을 초심자가 보고 따라할 수 있도록 하는 것</li><li>모호하거나 추상적인 개념 대신 정확한 단계로 설명할 것</li><li>내가 쓴 아무 문제 없이 튜토리얼은 작동해야한다</li></ul></li><li>하우 투 가이드<ul><li><strong>핵심</strong> : 구체적으로 어떻게 문제를 풀었는가</li><li>어떤 개념인지 설명하기보단 보여줘야할 목표나 결과에 집중한다<ul><li>이미 유저는 그 개념을 알고 들어왔거나, 따로 찾아볼 것이다.</li></ul></li></ul></li><li>해설(설명)<ul><li><strong>핵심</strong> : 단순 묘사 대신 대상을 분석하고 이해한 것 설명</li><li>여러 관점에서 살펴보고 내 의견을 나눈다</li><li>설명하는 것에 대한 뒷배경도 같이 곁들인다.<ul><li>왜 이런 생각을 하게 되었는가</li></ul></li><li>여러 옵션과 선택지들에 대해 토론하라<ul><li>왜 이 방법을 골라야하는가?</li></ul></li></ul></li><li>레퍼런스<ul><li><strong>핵심</strong> : 기술 묘사</li><li>명확하고 정확해야한다</li><li>코드 중심으로 묘사하라</li></ul></li></ol><p>처음엔 익숙하지 않아 깜박할 수 있다. 그래서 나같은 경우 scaffold를 수정하여 주석을 달았다. 포스트를 생성할 때마다 주석을 보고 내가 쓸 글의 형식이 무엇인지 생각하게 된다</p><p><img src="/img/%EC%A2%8B%EC%9D%80%EA%B8%80%EC%93%B0%EB%8A%94%EB%B0%A9%EB%B2%95_1.jpg" alt="문서 유형 4가지"></p><h2 id="글감을-정리하라"><a href="#글감을-정리하라" class="headerlink" title="글감을 정리하라"></a>글감을 정리하라</h2><p>키워드던 짧은 문장이던 상관 없으니 내가 써야할 글감을 적어두어야한다. 생각은 계속 흐른다.<br>스쳐지나가는 생각들을 적어두지 않으면 금방 잊혀진다.</p><p>초고까지 쓰지 않더라도 괜찮다. 적어둔 글감들은 나중에 글을 쓸 때 기억의 트리거로 작용한다.</p><p>구체적으로 기록할거라면 Notion을 추천한다. 일종의 온라인 커스텀 노트인데 자신의 기준대로 내용을 정리해둘 수 있다. 태그나 링크도 추가 할 수 있다. </p><p><img src="/img/%EC%A2%8B%EC%9D%80%EA%B8%80%EC%93%B0%EB%8A%94%EB%B0%A9%EB%B2%95_2.jpg" alt="Notion 예시 "></p><p>난 주로 아이폰 메모 앱으로 생각날 때 키워드만 적어놓고 글을 쓰면 지워버렸었다. UI가 단순하고 빠릿해서 자주 썼었다.</p><p>요즘은 구글 태스크를 이용한다. 구글 계정 내에서 연동되어 접근성이 뛰어나고, 가볍다. 구글 캘린더에 자동 지원이 되서 일정과 함께 관리할 수 있는데 편하다.</p>]]></content>
      
      
      <categories>
          
          <category> write </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>관계 데이터베이스 언어(SQL)(실기)</title>
      <link href="/2022/03/10/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%96%B8%EC%96%B4-SQL/"/>
      <url>/2022/03/10/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%96%B8%EC%96%B4-SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li>SQL<ul><li>관계 데이터 베이스에서 사용되는 대표적인 언어</li><li>관계 대수와 관계 해석을 기초로함</li></ul></li></ul><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><ul><li>관계 데이터 베이스에서 사용될 테이블, 스키마, 도메인, 인덱스 , 뷰등을 정의하거나 수정, 제거하기 위해 사용되는 언어</li></ul><h4 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h4><ul><li>정의 및 생성을 하기위해 사용하는 명령어</li><li>괄호의 의미<ul><li>{} : 반복</li><li>[] : 생략 가능</li><li>| : 선택</li></ul></li></ul><ul><li><p>CREATE TABLE 테이블_이름 : 테이블 생성</p></li><li><p>{속성<em>이름 데이터</em>타입} : 테이블을 구성하는 속성 수 만큼 속성 이름과 데이터 타입 기입</p><ul><li>[NOT NULL]<ul><li>테이블 생성 시 특정 속성 값에 ‘NULL’이 없도록 지정할 때 사용하며 생략 가능</li></ul></li></ul></li><li><p>PRIMARY KEY(속성이름)</p><ul><li>기본 키 속성 지정할 때 사용</li></ul></li><li><p>UNIQUE(속성_이름)</p><ul><li>대체키 지정 시 사용</li><li>속성의 모든 값이 고유한 값을 가지도록 지정할 때 사용</li></ul></li><li><p>FOREIGN KEY(속성 이름)</p><ul><li>외래키를 지정할 때 사용</li><li>FOREIGN KEY(속성 이름)<ul><li>외래키로 사용될 속성 이름 기입</li></ul></li><li>REFERENCES 참조 테이블(속성 이름)<ul><li>참조 테이블(속성 이름)</li><li>참조할 테이블 이름과 속성 이름 기입</li></ul></li></ul></li><li><p>CONSTRAINT 제약 조건<em>이름 CHECK(속성</em>이름 &#x3D; 범위 값)</p><ul><li>테이블을 생성할 때 특정 속성에 대해 속성 값의 범위를 지정할 때 사용</li></ul></li><li><p>외래키 지정 옵션</p><ul><li>ON DELETE<ul><li>참조 테이블 튜플 삭제시 기본 테이블은 어떤 형태로 대처할지 선택</li></ul></li><li>ON UPDATE<ul><li>“” 변경되면 기본 테이블은 어떤 형태로 대처할지 선택</li></ul></li><li>CASCADE<ul><li>참조 테이블의 튜플에 삭제 변화가 있는 경우 기본 테이블도 같이 연쇄적으로 삭제&#x2F;변화가 되도록 할 때 사용</li></ul></li><li>SET NULL<ul><li>참조 테이블의 튜플에 삭제 변화가 있는 경우 기본 테이블의 관련된 속성 값을 NULL 값으로 변경할 때 사용</li></ul></li><li>SET DFUALT<ul><li>참조 테이블의 튜플에 삭제 변화가 있는 경우 기본 테이블의 관련 속성 값을 기본 값으로 변경할 때 사용</li></ul></li><li>NO ACTION<ul><li>참조 테이블의 튜플에 삭제 변화가 있는 경우 기본 테이블에 아무런 변화가 없도록 지정할 때 사용</li></ul></li></ul></li><li><p>DATA TYPE</p><ul><li>데이터의 유형을 말한다.</li><li>데이터 타입의 종류<ul><li>정수<ul><li>INT</li></ul></li><li>실수<ul><li>FLOAT REL</li></ul></li><li>고정길이 문자<ul><li>CHAR()</li></ul></li><li>가변길이 문자<ul><li>VARCHAR</li></ul></li><li>시간<ul><li>TIME</li></ul></li><li>날짜<ul><li>DATE</li></ul></li></ul></li></ul></li><li><p>스키마 정의</p><ul><li>CREATE SCHEMA 스키마_이름 AUTHORIZATIO 사용자;</li></ul></li><li><p>도메인 정의</p><ul><li>CREATE DOMAIN 도메인_이름 데이터_타입 [DEFAULT 기본값][ constraint 제약조건_이름] CHECK(VALUE IN(범위 값))</li></ul></li><li><p>인덱스 정의</p><ul><li>CREATE [UNIQUE] INDEX 인덱스_이름 ON 테이블_이름(속성_이름 [ASC|DESC])[CLUSTER];</li><li>UNIUQE<ul><li>중복을 허용하지 않도록 인덱스 생성</li></ul></li><li>ON 테이블_이름(속성_이름)<ul><li>지정된 테이블의 속성으로 인덱스를 만듬</li></ul></li></ul></li></ul><h4 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h4><ul><li><p>기존에 만들어진 테이블에 새로운 속성을 추가하거나 기존 속성을 변경 삭제할 때 사용하는 명령어</p></li><li><p>ALTER TABLE 테이블 이름 - ADD 속성_이름 데이터*타입 [DEFAULT];</p></li><li><p>ALTER TABLE 테이블 이름 - ALTER 속성_이름 [SET DEFAULT];</p></li><li><p>ALTER TABLE 테이블 이름 - DROP 속성_이름 [CASCADE | RESTRICT];</p></li></ul><h4 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h4><ul><li>DROP TABLE 테이블_이름 [CASCAD|RESTRICT];</li><li>DROP SCHEMA 스키마_이름 [CASCAD|REASTRICT];</li><li>DROP DOMAIN 도메인_이름 [CASCAD|REASTRICT];</li><li>DROP VIEW 뷰_이름 [CASCAD|REASTRICT];</li><li>DROP INDEX 인덱스_이름;</li><li>DROP CONSTRAINT 제약조건_이름’</li></ul><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>데이터베이스 내의 자료를 실제 사용자가 이용하기 위한 언어</li></ul><h4 id="SELECT-검색문"><a href="#SELECT-검색문" class="headerlink" title="SELECT(검색문)"></a>SELECT(검색문)</h4><ul><li>SELET [DISTINCT] 속성_이름 FROM 테이블_이름 [WHERE 조건]GROUP BY 속성_이름 [HAVING 그룹 조건]][ORDER BY 속성_이름 [ASC | DESC]];<ul><li>WHERE<ul><li>검색에 필요한 조건 기술</li><li>관계 연산자와 논리 연산자 등의 다양한 연산자를 이용할 수 있음</li><li>BETWEEN A AND B<ul><li>A와 B 사이 값 고르기</li></ul></li></ul></li><li>GROUP BY<ul><li>작업의 효율을 위해 한 속성 값을 그룹으로 분류하고자 할 때 사용</li><li>HAVING : GROUP BY에 의해 그룹으로 분류한 후 조건을 제시할 때 사용</li></ul></li><li>ORDER BY<ul><li>검색하고자 하는 속성 값을 정렬하여 검색하고자 하는 경우 사용</li><li>생략시 오름차순 정렬, 정렬 기준은 2가지 이상 주어질 수 있음</li></ul></li></ul></li></ul><ul><li><p>집계 함수를 이용한 검색문</p><ul><li>SUM(속성_이름)</li><li>AVG(속성_이름)</li><li>MAX(속성_이름)</li><li>MIN(속성_이름)</li><li>COUNT(속성_이름)</li></ul></li><li><p>AS</p><ul><li>속성 이름 기술</li></ul></li><li><p>하위 질의문</p><ul><li>질의문 안의 질의문</li><li>WHERE 속성 IN(질의문)</li><li>EXISTS( 질의문 )</li></ul></li><li><p>부분 매치 질의문</p><ul><li>조건문 작성 시 자료의 일부를 가지고 비교하여 검색하는 질의문</li><li>% : 여러 문자</li><li>_ : 한 자리</li><li>%과 _ 사용시 &#x3D; 대신 LIKE 사용</li></ul></li><li><p>NULL 과 비교시 IS 사용</p></li><li><p>JOIN 질의문</p><ul><li>테이블1 JOIN 테이블2 ON [조인 조건]</li><li>JOIN ~ ON 질의문</li><li>JOIN ~ USING(속성)</li></ul></li></ul><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><ul><li>INSERT INTO 테이블_이름[(속성_이름…)] VALUES (자료…);<ul><li>테이블의 모든 속성 값을 가지고 있는 경우 속성 이름을 생략해도 괜찮다</li></ul></li><li>VALUES<ul><li>각 속성에 삽입될 실제 자료</li></ul></li></ul><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><ul><li>UPDATE 테이블<em>이름 SET 속성</em>이름 &#x3D; 변경 내용 [WHERE 조건];<ul><li>UPDATE 테이블_이름</li><li>SET 속성_이름&#x3D;변경 내용</li></ul></li></ul><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><ul><li>DELETE FROM 테이블_이름 [WHERE 조건];</li></ul><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><ul><li>COMMIT<ul><li>데이터베이스 내의 연산이 성공적으로 종료되어 연산에 의한 수정 내용을 지속적으로 유지하기 위한 명령어</li><li>SQL에 의해 수정된 내용을 유지시키는 명령어</li></ul></li><li>ROLLBACK<ul><li>연산이 비정상적으로 종료되거나 정상적으로 수행이 되었다하더라도 수행되기 이전 상태로 되돌리기 위한 명령어</li><li>연산 내용을 취소할 때 사용</li></ul></li><li>GRANT<ul><li>관리자가 사용자에게 데이터베이스에 대한 권한을 부여하기 위한 명령어<ul><li>GRANT 권한 내용 ON 테이블 _이름 TO 사용자 [WITH GRANT OPTION];</li><li>WITH GRANT OPTION이란<ul><li>사용자가 관리자로부터 받은 권한을 다른 사용자에게 줄 수 있는 권한까지 주는 것</li></ul></li></ul></li></ul></li><li>REVOKE<ul><li>관리자가 사용자에게 부여했던 권한을 취소하기 위해 사용되는 명령어</li><li>REVOKE 권한 내용 ON 테이블_이름 FROM 사용자 [CASCADE]</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>기억장치 관리</title>
      <link href="/2022/03/10/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98%EA%B4%80%EB%A6%AC/"/>
      <url>/2022/03/10/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98%EA%B4%80%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="기억-장치-관리의-개요"><a href="#기억-장치-관리의-개요" class="headerlink" title="기억 장치 관리의 개요"></a>기억 장치 관리의 개요</h1><h2 id="기억-장치-계층-구조의-특징"><a href="#기억-장치-계층-구조의-특징" class="headerlink" title="기억 장치 계층 구조의 특징"></a>기억 장치 계층 구조의 특징</h2><ul><li>상위 계층 : 레지스터 &gt; 캐시 &gt; 주기억장치 &gt; 보조기억장치</li><li>상위 계층 일수록 접근속도 증가, 접그시간 빠름, 기억 용량 적고 고가</li><li>주 기억 장치는 워드와 바이트로 구성되어 주소로 접근 가능</li><li>레지스터 캐시 기억장치 주기억장치는 cpu가 직접 액세스 할 수 있음</li><li>보조기억장치는 cpu가 직접 액세스 불가능, 주기억장치에 적재된 후 cpu에 액세스 가능</li></ul><h2 id="기억-장치-관리의-전략"><a href="#기억-장치-관리의-전략" class="headerlink" title="기억 장치 관리의 전략"></a>기억 장치 관리의 전략</h2><h3 id="반입-fetch-전략"><a href="#반입-fetch-전략" class="headerlink" title="반입(fetch)전략"></a>반입(fetch)전략</h3><ul><li>보조기억장치에 보관중인 프로그램이나 데이터를 언제 주기억장치로 적재할 것인가 결정하는 전략<ul><li>요구 반입 : 참조 요구할 때 적재한다</li><li>예상 반입 : 참조 될 프로그램이나 데이터를 미리 예상하여 적재</li></ul></li></ul><h3 id="배치-placement-전략"><a href="#배치-placement-전략" class="headerlink" title="배치(placement) 전략"></a>배치(placement) 전략</h3><ul><li><p>새로 반입되는 프로그램이나 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정하는 전략</p><ul><li>최초 적합 : 빈 영역 중 첫 번째 분할 영역에 배치</li><li>최적 적합 : 단편화를 가장 작게 남기는 분할 영역에 배치</li><li>최악 적합 : 단편화를 가장 많이 남기는 분할 영역</li></ul></li></ul><h3 id="교체-replacement-전략"><a href="#교체-replacement-전략" class="headerlink" title="교체(replacement) 전략"></a>교체(replacement) 전략</h3><ul><li>주기억장치의 모든 영역이 이미 사용중인 상태에서 이미 사용중인 영역 중에서 어느 영역을 교체하여 사용할 것인지를 결정하는 전략</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>관계형 데이터베이스</title>
      <link href="/2022/03/10/%EA%B4%80%EA%B3%84%ED%98%95%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
      <url>/2022/03/10/%EA%B4%80%EA%B3%84%ED%98%95%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="관계형-데이터베이스의-구조"><a href="#관계형-데이터베이스의-구조" class="headerlink" title="관계형 데이터베이스의 구조"></a>관계형 데이터베이스의 구조</h1><h2 id="관계형-데이터-베이스의-개요"><a href="#관계형-데이터-베이스의-개요" class="headerlink" title="관계형 데이터 베이스의 개요"></a>관계형 데이터 베이스의 개요</h2><ul><li><p>개체나 관계를 릴레이션이라는 표로 표현한다.</p></li><li><p>장점 : 변환이 용이</p></li><li><p>단점 : 성능이 다소 떨어짐</p></li></ul><h2 id="관계형-데이터베이스의-Relation-구조"><a href="#관계형-데이터베이스의-Relation-구조" class="headerlink" title="관계형 데이터베이스의 Relation 구조"></a>관계형 데이터베이스의 Relation 구조</h2><ul><li>릴레이션은 릴레이션 스키마와 릴레이션 인스턴스로 이루어진다.</li></ul><h3 id="튜플"><a href="#튜플" class="headerlink" title="튜플"></a>튜플</h3><ul><li>릴레이션을 구성하는 각각의 행을 의미한다.(행은 가로야)</li><li>속성의 모임으로 구성되어있다.</li><li>파일 구조에서 레코드와 같은 의미이다.(좋은 표현인거 같다.)</li><li>튜플의 수 &#x3D; 카디널리티, 기수, 대응수</li></ul><h3 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h3><ul><li>데이터 베이스를 구성하는 가장 작은 논리적 단위이다.</li><li>파일 구조상의 데이터 항목 또는 데이터 필드에 해당된다.</li><li>개체의 특성을 기술한다.</li><li>속성의 수 &#x3D; degree, 차수</li></ul><h3 id="도메인"><a href="#도메인" class="headerlink" title="도메인"></a>도메인</h3><ul><li>하나의 속성이 취할 수 있는 같은 타입의 원자값들의 집합</li></ul><h2 id="릴레이션의-특징"><a href="#릴레이션의-특징" class="headerlink" title="릴레이션의 특징"></a>릴레이션의 특징</h2><ul><li>튜플은 중복이 안된다</li><li>튜플 사이에는 순서가 없다.</li><li>릴레이션은 실시간으로 바뀐다.</li><li>릴레이션 스키마를 구성하는 속성의 순서도 중요하지 않다.</li><li>속성은 유일하나 속성의 값은 중복 가능</li></ul><h1 id="관계형-데이터-베이스의-제약-조건"><a href="#관계형-데이터-베이스의-제약-조건" class="headerlink" title="관계형 데이터 베이스의 제약 조건"></a>관계형 데이터 베이스의 제약 조건</h1><h2 id="키-key-의-개념-및-종류"><a href="#키-key-의-개념-및-종류" class="headerlink" title="키(key)의 개념 및 종류"></a>키(key)의 개념 및 종류</h2><ul><li><p>튜플을 구별할 수 있게 하는 <strong>속성</strong> 이다.</p></li><li><p>기본 키로 사용될 수 있는 속성</p></li><li><p>릴레이션 당 적어도 하나의 후보키가 존재</p></li><li><p>후보키의 필수적 속성</p><ul><li>유일성 : 하나의 키 값으로 하나의 튜플 만을 유일하게 식별할 수 있어야한다.</li><li>최소성 : 모든 레코드들을 유일하게 식별하는 데 꼭 필요한 속성으로만 구성</li></ul></li></ul><h3 id="기본키"><a href="#기본키" class="headerlink" title="기본키"></a>기본키</h3><ul><li>후보키 중에서 선택한 주 키(primally key)이다.</li><li>한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성</li><li>null 값을 못 가짐</li><li>기본키로 정의된 속성에는 동일한 값이 <strong>중복되어 저장될 수 없다.</strong></li></ul><h3 id="대체키"><a href="#대체키" class="headerlink" title="대체키"></a>대체키</h3><ul><li>후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키들을 말한다.</li><li>보조키라고도 한다.</li></ul><h2 id="슈퍼키"><a href="#슈퍼키" class="headerlink" title="슈퍼키"></a>슈퍼키</h2><ul><li>릴레이션 내에 속성들의 집합으로 구성된 키</li><li>유일성은 만족시키지만 최소성은 만족시키지 못함</li></ul><h2 id="외래키"><a href="#외래키" class="headerlink" title="외래키"></a>외래키</h2><ul><li>외래키는 참조되는 릴레이션의 기본키와 대응되어 릴레이션 간에 참조관계를 표현하는데 중요한 도구이다.</li><li>외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없다.</li></ul><h2 id="무결성"><a href="#무결성" class="headerlink" title="무결성"></a>무결성</h2><h3 id="개체-무결성"><a href="#개체-무결성" class="headerlink" title="개체 무결성"></a>개체 무결성</h3><ul><li>릴레이션에서 기본키를 구성하는 속성은 NULL값이나 중복값을 가질 수 없다.</li></ul><h3 id="참조-무결성"><a href="#참조-무결성" class="headerlink" title="참조 무결성"></a>참조 무결성</h3><ul><li>외래키의 값은 NULL이거나 참조 릴레이션의 기본키 값과 동일해야한다.</li><li>참조할 수 없는 외래키 값을 가질 수 없다.</li></ul><h1 id="관계-대수-및-관계해석"><a href="#관계-대수-및-관계해석" class="headerlink" title="관계 대수 및 관계해석"></a>관계 대수 및 관계해석</h1><h2 id="관계-대수의-개요"><a href="#관계-대수의-개요" class="headerlink" title="관계 대수의 개요"></a>관계 대수의 개요</h2><ul><li><p>절차적 언어이다.</p></li><li><p>릴레이션을 처리하기 위해 연산자와 연산규칙을 제공하는 언어</p></li><li><p>피연산자와 결과 모두 릴레이션이다.</p></li><li><p>질의에 대한 해를 구하기 위해 수행해야할 연산의 순성를 명시</p></li><li><p><strong>순수 관계 연산자</strong> :Select, Project, Join, Division</p></li><li><p><strong>일반 집합 연산자</strong> : UNION, INTERSECTION, DIFFERENCE,CARTENSIAN PRODUCTION</p></li></ul><h3 id="순수-관계-연산자"><a href="#순수-관계-연산자" class="headerlink" title="순수 관계 연산자"></a>순수 관계 연산자</h3><ul><li><p>Select</p><ul><li>조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만든다.</li><li>릴레이션의 행에 해당하는 튜플을 구하는거라 <strong>수평연산</strong> 이라고도 한다</li><li>연산자 기호는 시그마</li></ul></li><li><p>Proejct</p><ul><li>수직 연산</li><li>조건을 만족하는 어트리뷰트만 추출</li><li>연산자 기호는 파이</li></ul></li><li><p>Join</p><ul><li>공통 속성을 중심으로 두개의 릴레이션을 합치는 연산자</li><li>기호는 세모 두개 붙인거</li></ul></li><li><p>Division</p><ul><li>특이한 놈임</li><li>체감상 나누기와 중복 제거가 합쳐진 느낌</li></ul></li></ul><h3 id="일반-집합-연산자"><a href="#일반-집합-연산자" class="headerlink" title="일반 집합 연산자"></a>일반 집합 연산자</h3><ul><li>합병 조건 : 두 릴레이션 간에 속성의 수가 같고, 각각의 속성이 취할 수 있는 도메인의 범위가 같아야한다.</li></ul><h2 id="관계해석"><a href="#관계해석" class="headerlink" title="관계해석"></a>관계해석</h2><ul><li>관계 데이터 모델의 제안자인 코드가 predicate calculus에 기반을 두고 관계 데이터 베이스를 위해 제안함</li><li>종류 : 튜플 관계해석, 도메인 관계해석</li><li>비절차적 특성을 가지고 있다. –&gt; 원하는 정보가 무엇인지만 파악하는것 (종류만 봐도 감 오잖아 튜플 도메인 순서가 없거든)</li><li>관계 대수로 표현한 식은 관계해석으로 표현할 수 있다..</li><li>질의어로 표현한다.</li><li>관계 데이터의 연산을 표현하는 방법, 원하는 정보를 정의할 때는 계산 수식 사용</li></ul><h1 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h1><h2 id="정규화의-개요"><a href="#정규화의-개요" class="headerlink" title="정규화의 개요"></a>정규화의 개요</h2><ul><li>종속성 이론을 이용하여 잘못 설계된 관계형 스키마를 더 작은 속성으로 쪼개어 바람직한 스키마로 만들어가는 과정</li><li>하나의 종속성이 하나의 릴레이션에 표현될 수 있도록 <strong>분해</strong>하는 과정</li><li>논리적 설계 단계에서 수행</li></ul><h2 id="정규화의-목적"><a href="#정규화의-목적" class="headerlink" title="정규화의 목적"></a>정규화의 목적</h2><ul><li>데이터 구조의 안정성을 최대화</li><li>어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만든다.</li><li>효과적인 검색 알고리즘</li><li>중복을 배제! 각종 Anomaly 예방 차원</li><li>데이터 삽입시 릴레이션을 재구성할 필요성을 줄임</li></ul><h2 id="Anomal-이상-dml-rosua-alc-whdfb"><a href="#Anomal-이상-dml-rosua-alc-whdfb" class="headerlink" title="Anomal(이상)dml rosua alc whdfb"></a>Anomal(이상)dml rosua alc whdfb</h2><ul><li>삽입 이상<ul><li>데이터 삽입시 원하지 않는 값들도 함께 삽입되는 현상</li></ul></li><li>삭제 이상<ul><li>한 <strong>튜플</strong> 을 삭제 할 때 원치 않는 값들도 같이 삭제되는 <strong>연쇄 삭제 현상</strong> 이 일어나는 현상</li></ul></li><li>갱신 이상<ul><li><strong>속성</strong> 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 <strong>모순</strong> 이 생기는 현상</li></ul></li></ul><h2 id="정규화의-원칙"><a href="#정규화의-원칙" class="headerlink" title="정규화의 원칙"></a>정규화의 원칙</h2><ul><li>정보의 무손실 표현</li><li>분리의 원칙 : 하나의 독립된 관계썽은 하나의 독립된 릴레이션으로 분리시켜야 한다.</li><li>데이터의 중복성 감소</li></ul><h1 id="SQL의-개념"><a href="#SQL의-개념" class="headerlink" title="SQL의 개념"></a>SQL의 개념</h1><h2 id="SQL의-개요"><a href="#SQL의-개요" class="headerlink" title="SQL의 개요"></a>SQL의 개요</h2><ul><li>sequel(IBM 연구소에서 개발)에서 유래한다.</li><li>국제 표준 데이터베이스 언어</li><li>관계 대수와 관계 해석을 기초로 한 혼합 데이터 언어</li><li>질의어지만 데이터 구조 정의, 데이터 조작, 데이터 제어 기능을 모두 갖추고 있음</li></ul><h2 id="SQL의-분류"><a href="#SQL의-분류" class="headerlink" title="SQL의 분류"></a>SQL의 분류</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><ul><li>논리적 데이터 구조와 물리적 데이터 구조의 사상을 정의</li><li>데이터 베이스 관리자나 데이터베이스 설계자가 사용한다.</li></ul><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>CREATE</td><td>SCHEMA, DOMAIN,TABLE, VIEW, INDEX 정의</td></tr><tr><td>ALTER</td><td>TABLE에 대한 정의를 변경하는데 사용</td></tr><tr><td>DROP</td><td>SCHEMA DOMAIN TABLE VIEW INDEX 삭제</td></tr></tbody></table><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li><p>데이터 베이스 사용자가 응용프로그램이나 질의어를 통하여 실질적으로 데이터 처리하는데 사용되는 언어</p></li><li><p>데이터 베이스 사용자와 데이터 베이스 관리 시스템 간의 인터페이스 제공</p></li></ul><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>SELECT</td><td>테이블에서 조건에 맞는 튜플을 <strong>검색</strong></td></tr><tr><td>INSERT</td><td>테이블에 새로운 튜플을 삽입한다.</td></tr><tr><td>DELETE</td><td>테이블에서 조건에 맞는 튜플을 삭제한다.</td></tr><tr><td>UPDATE</td><td>테이블에서 조건의 맞는 튜플의 내용을 변경한다.</td></tr></tbody></table><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><ul><li>데이터의 보안 무결성 회복 병행 수행 제어 등을 정의하는데 사용되는 언어</li><li>데이터 베이스 관리자가 데이터 관리를 목적으로 사용한다</li></ul><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>COMMIT</td><td>명령에 의해 수행된 결과를 실제 물리적 디스크로 저장하고 데이터 베이스 조작 작업이 정상적으로 완료되엇음을 관리자에게 알려준다.</td></tr><tr><td>ROLLBACK</td><td>데이터 베이스 조작 작업이 비정상적으로 종료되었을 때 원래의 상태로 복구한다.</td></tr><tr><td>GRANT</td><td>데이터베이스 사용자에게 사용 권한을 부여한다.</td></tr><tr><td>REVOKE</td><td>데이터 베이스 사용자의 사용 권한을 취소한다.</td></tr></tbody></table><h1 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h1><ul><li>사용자에게 접근이 허용된 자료를 제한적으로 보여주기 위해 하나 이상의 기본 테이블로 부터 유도된 이름을 가지는 <strong>가상의 테이블</strong></li><li>물리적 저장장치에 존재하지 않지만, 사용자에게는 있는 것으로 간주된다.</li><li>데이터 보정작업, 처리과정 시험 등 임시적인 작업을 위한 용도로 활용된다.</li><li>VIEW는 JOIN문의 사용 최소화로 사용상의 편의성을 제공한다</li></ul><h2 id="VIEW의-특징"><a href="#VIEW의-특징" class="headerlink" title="VIEW의 특징"></a>VIEW의 특징</h2><ul><li>논리적 독십성 제공</li><li>관리가 용이하고 명령문이 간단함</li><li>VIEW에 나타나지 않는 데이터를 효율적인 기법으로 사용할 수 있다.</li><li>기본 테이블의 기본키를 포함한 속성 집합으로 뷰를 구성해야만 삽입, 삭제, 갱신, 연산이 가능하다</li><li>일단 정의된 뷰는 다른 뷰 정의에 기초가 될 수 있다.</li><li>VIEW를 삭제하면 그 VIEW를 기초로 정의된 다른 뷰들도 삭제된다.</li></ul><h2 id="VIEW의-장단점"><a href="#VIEW의-장단점" class="headerlink" title="VIEW의 장단점"></a>VIEW의 장단점</h2><ul><li><p>장점</p><ul><li>논리적 데이터 독립성 제공</li><li>동시에 여러 사용자의 상이한 응용이나 요구를 지원</li><li>사용자의 데이터 관리를 간단하게 해준다.</li><li>접근 제어를 통한 <strong>자동 보안</strong> 이 제공된다.</li></ul></li><li><p>단점</p><ul><li>독립적인 인덱스를 가질 수 없다.</li><li>ALTER VIEW문을 사용할 수 없다. –&gt; 뷰의 정의를 변경할 수 없다.</li><li>뷰로 구성된 내용에 대한 삽입 삭제 갱신 연산에 제약이 따른다</li></ul></li></ul><h2 id="VIEW-정의문"><a href="#VIEW-정의문" class="headerlink" title="VIEW 정의문"></a>VIEW 정의문</h2><ul><li>SELECT문을 부질의로 사용하여 SELECT문의 결과로 VIEW를 생성한다.</li><li>부질의로서의 SELECT문에는 UION ORDER BY절을 사용 할 수 없다.</li></ul><h2 id="VIEW-삭제문"><a href="#VIEW-삭제문" class="headerlink" title="VIEW 삭제문"></a>VIEW 삭제문</h2><ul><li>ALTER를 사용 못하니까 DROP 후 다시 생성한다.</li></ul><h1 id="시스템-카탈로그"><a href="#시스템-카탈로그" class="headerlink" title="시스템 카탈로그"></a>시스템 카탈로그</h1><h2 id="시스템-카탈로그의-의미"><a href="#시스템-카탈로그의-의미" class="headerlink" title="시스템 카탈로그의 의미"></a>시스템 카탈로그의 의미</h2><ul><li>시스템 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 <strong>시스템 데이터 베이스</strong> 이다.</li><li>시스템 카탈로그 내의 각 테이블은 사용자를 포함하여 DBMS에서 지원하는 모든 데이터 객체에 대한 정의나 명세에 관한 정보를 유지 관리하는 시스템 데이터 베이스이다.</li><li>DDL의 결과로 데이터 베이스 구조 및 통계정보를 저장한다.</li><li>카탈로그들이 생성되면 자료 사전(DATA DICTIONARY)에 저장된다.</li><li>걍 META DATA라고도 함</li></ul><h2 id="카탈로그의-특징"><a href="#카탈로그의-특징" class="headerlink" title="카탈로그의 특징"></a>카탈로그의 특징</h2><ul><li><p>카탈로그도 시스템 테이블로 구성되어 있어 일반사용자도 SQL로 내용을 볼 수 있다.</p></li><li><p>INSERT, DELETE UPDATE로 카탈로그를 갱신하는 것은 허용되지 않는다.</p></li><li><p>카탈로그는 DBMS가 자가 생성하고 유지한다.</p></li><li><p><strong>분산 시스템</strong> 의 경우에는 모든 제어 정보도 가진다.</p></li></ul><h2 id="카탈로그-x2F-데이터-사전을-참조하기-위한-DBMS-내의-모듈-시스템"><a href="#카탈로그-x2F-데이터-사전을-참조하기-위한-DBMS-내의-모듈-시스템" class="headerlink" title="카탈로그 &#x2F; 데이터 사전을 참조하기 위한 DBMS 내의 모듈 시스템"></a>카탈로그 &#x2F; 데이터 사전을 참조하기 위한 DBMS 내의 모듈 시스템</h2><ul><li><p>DDL Compiler</p><ul><li>DDL을 메타데이터를 갖는 테이블(카탈로그) 데이터 사전에 저장시킴</li></ul></li><li><p>DML Compiler</p><ul><li>응용 프로그램에 삽입된 DML 문을 주 언어로 표현한 프로시저 호출로 변환하여 질의 처리기와 상호 통신한다.</li></ul></li><li><p>DATA Directory</p><ul><li>데이터 사전에 수록된 데이터를 실제로 접근하는데 필요한 정보를 관리 유지하는 시스템</li><li>데이터 디렉터리는 시스템만 접근 할 수 있다.</li></ul></li><li><p>질의 최적화기</p><ul><li>사용자의 요구를 효율적인 형태로 변화하고 질의를 처리하는 좋은 전략을 모색</li></ul></li><li><p>트랙잭션 처리기</p><ul><li>복수 사용자 환경에서 평행으로 동시에 일어나는 트랜잭션 문제를 해결하여, 각각의 사용자가 데이터베이스 자원을 베타적으로 이용할 수 있도록 한다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>논리회로</title>
      <link href="/2022/03/10/%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C/"/>
      <url>/2022/03/10/%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="조합-논리회로"><a href="#조합-논리회로" class="headerlink" title="조합 논리회로"></a>조합 논리회로</h1><ul><li>가산기,감산기,디코더,인코더,멀티플렉서 –&gt; 조합 논리회로</li></ul><h2 id="반가산기"><a href="#반가산기" class="headerlink" title="반가산기"></a>반가산기</h2><ul><li>2진수 두개를 덧셈하는데 합(S)과 자리올림수(C)구하는 조합논리회로<ul><li>SUM &#x3D; XOR 게이트</li><li>CARRY &#x3D; AND 게이트</li></ul></li></ul><h2 id="전가산기"><a href="#전가산기" class="headerlink" title="전가산기"></a>전가산기</h2><ul><li>뒷자리에서 올라오는 CARRY포함해서 2진수 3자리를 더하는 회로(늘어날 수 있다)<ul><li>SUM &#x3D; A B C 의 XOR 게이트</li><li>CARRY &#x3D; A B 의 AND 게이트 + A B 의 XOR 게이트와 CARRY의 AND 게이트</li></ul></li></ul><h1 id="순서-논리회로"><a href="#순서-논리회로" class="headerlink" title="순서 논리회로"></a>순서 논리회로</h1><h2 id="순서-논리회로의-특징"><a href="#순서-논리회로의-특징" class="headerlink" title="순서 논리회로의 특징"></a>순서 논리회로의 특징</h2><ul><li>외부 입력과 현재 상태에 따라 출력이 결정되는 회로</li><li>논리 게이트 외에 메모리 요소와 귀환 기능을 포함하므로 <strong>기억 기능 존재</strong></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>데이터 모델링 및 설계</title>
      <link href="/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/"/>
      <url>/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터-모델의-개념"><a href="#데이터-모델의-개념" class="headerlink" title="데이터 모델의 개념"></a>데이터 모델의 개념</h1><h2 id="데이터-모델의-정의"><a href="#데이터-모델의-정의" class="headerlink" title="데이터 모델의 정의"></a>데이터 모델의 정의</h2><ul><li>현실 세계의 정보를 단순화, 추상화 하여 체계적으로 표현한 개념적 모형</li><li>데이터, 데이터의 관계, 데이터의 의미 및 일관성, 제약조건 등을 기술하기 위한 개념적 도구들의 모임</li><li><strong>Shema</strong> 를 논리적으로 묘사하기 위해 사용되는 지능적 도구</li><li><strong>DB 설계과정</strong> 에서 데이터 구조를 논리적으로 표현하기 위해 사용되는 도구</li></ul><h2 id="데이터-모델의-종류"><a href="#데이터-모델의-종류" class="headerlink" title="데이터 모델의 종류"></a>데이터 모델의 종류</h2><h3 id="개념적-데이터-모델"><a href="#개념적-데이터-모델" class="headerlink" title="개념적 데이터 모델"></a>개념적 데이터 모델</h3><ul><li>현실 세계의 것을 추상적 개념으로 표현하는 과정</li><li><strong>속성</strong> 들로 기술된 개체 타입과 개체 타입들 간의 관계[^1]를 이용하여 현실 세계를 표현</li></ul><p>[^1]: E-R 모델이 그 예시</p><ul><li>정보 모델이라고 하기도 함(인간의 이해를 돕기 위함)</li></ul><h3 id="논리적-데이터-모델"><a href="#논리적-데이터-모델" class="headerlink" title="논리적 데이터 모델"></a>논리적 데이터 모델</h3><ul><li>개념적 구조(개념적 모델링 과정에서 얻음)를 컴퓨터 처리할 수 있도록 변환하는 과정</li><li>특정 DBMS는 특정 논리적 데이터 모델 하나만 선정하여 사용한다.</li><li>단순 데이터 모델하면 논리적 데이터 모델을 의미한다.</li><li><strong>필드</strong> 로 기술된 데이터 타입과 이 데이터 타입들 간의 관계를 이용해 현실세계 표현</li></ul><h2 id="데이터-모델에-표시할-요소-lt-구-연-제-gt"><a href="#데이터-모델에-표시할-요소-lt-구-연-제-gt" class="headerlink" title="데이터 모델에 표시할 요소 &lt;구 연 제!&gt;"></a>데이터 모델에 표시할 요소 &lt;구 연 제!&gt;</h2><h3 id="구조-STRUCTURE"><a href="#구조-STRUCTURE" class="headerlink" title="구조(STRUCTURE)"></a>구조(STRUCTURE)</h3><ul><li>논리적으로 표현된 개체 타입들 간의 관계로 데이터 구조 및 정적 성질 표현</li></ul><h3 id="연산-OPERATION"><a href="#연산-OPERATION" class="headerlink" title="연산(OPERATION)"></a>연산(OPERATION)</h3><ul><li>DB에 저장된 실제 데이터를 처리하는 작업에 대한 명세, DB를 조작하는 기본 도구</li></ul><h3 id="연산조건-CONSTRAINT"><a href="#연산조건-CONSTRAINT" class="headerlink" title="연산조건(CONSTRAINT)"></a>연산조건(CONSTRAINT)</h3><ul><li>DB에 저장될 수 있는 실제 데이터의 논리적인 제약 조건</li></ul><h2 id="데이터-모델의-구성요소"><a href="#데이터-모델의-구성요소" class="headerlink" title="데이터 모델의 구성요소"></a>데이터 모델의 구성요소</h2><h3 id="개체-Entity"><a href="#개체-Entity" class="headerlink" title="개체(Entity)"></a>개체(Entity)</h3><ul><li>DB에 표현하려는 것, 대상체</li><li>속성으로 구성되어 있다</li><li>File system의 레코드에 대응하는 것, 정보 제공하는 역할 수행</li><li>독립적으로 존재하거나 그 자체로 구별 가능</li></ul><h3 id="속성-Attribute"><a href="#속성-Attribute" class="headerlink" title="속성(Attribute)"></a>속성(Attribute)</h3><ul><li>데이터의 가장 작은 논리적 단위</li><li>파일 구조상의 데이터 항목 또는 데이터 필드에 해당</li><li>개체를 구성</li></ul><h3 id="관계-Relationship"><a href="#관계-Relationship" class="headerlink" title="관계(Relationship)"></a>관계(Relationship)</h3><ul><li>개체 간의 관계, 속성 간의 관계</li></ul><h1 id="개체-관계-모델"><a href="#개체-관계-모델" class="headerlink" title="개체 - 관계 모델"></a>개체 - 관계 모델</h1><h2 id="개체-관계-모델의-개요-feat-E-R모델"><a href="#개체-관계-모델의-개요-feat-E-R모델" class="headerlink" title="개체 - 관계 모델의 개요 feat E-R모델"></a>개체 - 관계 모델의 개요 feat E-R모델</h2><ul><li>E-R 모델<ul><li>개념적 데이터 모델의 가장 대표적인 것</li><li>1976년 피터 첸에 의해 제안됨</li></ul></li><li>개체와 개체 간의 관계를 기본 요소로 이용<ul><li>현실 세계의 무질서한 데이터 —&gt; 개념적인 논리 데이터</li></ul></li><li>개체 타입(Entity TYPE)과 이들 간의 관계 타입(Relation TYPE)을 이용해 현실 세계를 개념적으로 표현</li><li>객체 관계 속성으로 묘사</li><li>특정 DBMS를 고려한 것은 아님</li></ul><h1 id="망-네트워크-형-데이터-모델"><a href="#망-네트워크-형-데이터-모델" class="headerlink" title="망(네트워크)형 데이터 모델"></a>망(네트워크)형 데이터 모델</h1><h2 id="망형-데이터-모델-Network-Data-Model-개요"><a href="#망형-데이터-모델-Network-Data-Model-개요" class="headerlink" title="망형 데이터 모델(Network Data Model) 개요"></a>망형 데이터 모델(Network Data Model) 개요</h2><ul><li>CODASYL이 제안</li><li>그래프를 이용해 데이터 논리구조 표현</li><li>상위(Owner)과 하위(member) 레코드 사이에서 다 대 다 대응 관계를 만족하는 구조</li><li><strong>대표적 DBMS</strong> : DBTG, EDBS,TOTAL</li></ul><h2 id="망형-데이터-모델의-표현"><a href="#망형-데이터-모델의-표현" class="headerlink" title="망형 데이터 모델의 표현"></a>망형 데이터 모델의 표현</h2><ul><li>Entity : 동종의 Entity 그룹</li><li>Entity SET : 주종 관계에 있는 Entity군들의 그룹</li><li>SET Membership Type : 일 대 다(1:N) 관계에 연관된 레코드<ul><li>OWNER : 트리 구조의 PARENT</li><li>MEMEBER : 트리 구조의 Children</li></ul></li></ul><h2 id="망형-데이터-모델의-특징"><a href="#망형-데이터-모델의-특징" class="headerlink" title="망형 데이터 모델의 특징"></a>망형 데이터 모델의 특징</h2><ul><li>레코드 타입과 링크들의 집합으로 구성</li><li>레코드 타입의 집합</li><li>레코드 타입들을 연결하는 링크 집합이 존재</li><li>상위 하나의 레코드에 대하여 하위 레코드가 복수 대응 ,그 역도 마찬가지</li><li>링크들로 표현한 관계성에는 제한이 없다</li><li>한 레코드 타입에서 자기 자신으로 가는 링크 없다(재귀 X)</li><li>모든 링크는 함수적이다.</li><li>세트의 이름은 링크로 표현된다.</li><li>owner와 membebr 레코드 타입은 서로 동일한 형태가 불가능</li></ul><h1 id="데이터베이스-설계"><a href="#데이터베이스-설계" class="headerlink" title="데이터베이스 설계"></a>데이터베이스 설계</h1><h2 id="데이터베이스의-설계의-개념-및-고려사항"><a href="#데이터베이스의-설계의-개념-및-고려사항" class="headerlink" title="데이터베이스의 설계의 개념 및 고려사항"></a>데이터베이스의 설계의 개념 및 고려사항</h2><ul><li><p>사용자의 요구 분석 - DB구조에 맞게 변형 - DBMS 통해 DB 구현 느낌임</p></li><li><p>DB 설계순서</p><ul><li>요구 분석 - 개념적 설계 - 논리적 설계 - 물리적 설계 - 구현</li></ul></li><li><p><strong>데이터 베이스 설계시 고려사항</strong></p><ul><li>무결성 : 연산 후에도 저장된 데이터가 제약 조건 항상 만족</li><li>일관성 : 데이터 간, 특정 질의에 대한 응답이 일정</li><li>회복 : 시스템 장애 발생이 ROLL BACK가능</li><li>보안 : 불법적인 데이터 노출,변경,손실로부터 보호가능</li><li>효율성 : 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 가능</li><li>데이터베이스 확장 : DB운영에 영향을 주지 않으면서 지속적으로 데이터 추가 가능 해야함</li></ul></li></ul><h2 id="요구-조건-분석"><a href="#요구-조건-분석" class="headerlink" title="요구 조건 분석"></a>요구 조건 분석</h2><ul><li>DB 사용자에 따른 수행 업무와 필요한 데이터의 종류,용도,처리 형태,흐름, 제약 조건 등을 수집한다.</li><li>수집한 정보로 요구 조건 명세 작성</li></ul><h2 id="개념적-설계-정보-모델링-개념화"><a href="#개념적-설계-정보-모델링-개념화" class="headerlink" title="개념적 설계(정보 모델링, 개념화)"></a>개념적 설계(정보 모델링, 개념화)</h2><p>현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정</p><ul><li><strong>개념 스키마 모델링</strong>, <strong>트랜젝션 모델링</strong> 병행</li><li>요구 조건 명세로 DBMS에 E-R 다이어 그램 작성</li><li>DBMS에 독립적인 개념 스키마 설계</li></ul><h2 id="논리적-설계-데이터-모델링"><a href="#논리적-설계-데이터-모델링" class="headerlink" title="논리적 설계(데이터 모델링)"></a>논리적 설계(데이터 모델링)</h2><ul><li>필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계로 표현되는 논리적 구조의 데이터로 모델화</li><li>개념 스키마 평가 및 정재, DBMS에 따라 서로 다른 논리적 스키마 설계</li><li>트랜잭션의 인터페이스 설계</li><li>관계형 DB라면 테이블을 설계</li></ul><h2 id="물리적-설계-데이터-구조화"><a href="#물리적-설계-데이터-구조화" class="headerlink" title="물리적 설계(데이터 구조화)"></a>물리적 설계(데이터 구조화)</h2><ul><li>데이터 베이스 파일의 저장 구조 및 액세스 경로를 결정한다.</li><li>저장 레코드의 형식, 순서, 접근 경로와 같은 정보를 사용하여 데이터가 컴퓨터에 저장되는 방법 묘사</li><li>필수적 요소 : 저장 레코드의 양식 설계, 레코드 집중의 분석 및 설계, 접근 경로 설계</li><li>기본적인 데이터 단위 &#x3D; 저장 레코드</li><li>저장 레코드의 집합</li><li>DB 시스템 성능에 중대한 영향을 미침</li></ul><h3 id="물리적-설계-옵션-선택시-고려사항"><a href="#물리적-설계-옵션-선택시-고려사항" class="headerlink" title="물리적 설계 옵션 선택시 고려사항"></a>물리적 설계 옵션 선택시 고려사항</h3><ul><li><strong>반응 시간</strong><ul><li>트랜잭션을 수행을 요구한 시점부터 처리 결과를 얻을 때 까지의 경과 시간</li></ul></li><li><strong>공간 활용도</strong><ul><li>데이터베이스 파일과 액세스 경로 구조에 의해 사용되는 저장 공간의 양</li></ul></li><li><strong>트랜잭션 처리량</strong><ul><li>단위 시간 동안 데이터베이스 시스템에의해 처리될 수 있는 트랜잭션의 평균개수</li></ul></li></ul><h2 id="데이터-베이스-구현"><a href="#데이터-베이스-구현" class="headerlink" title="데이터 베이스 구현"></a>데이터 베이스 구현</h2><ul><li>논리적 설계단계와 물리적 설계 단계에서 도출된 데이터베이스 스키마를 파일로 생성하는 단계</li><li>사용하려는 DBMS의 DDL이용하여 Schema 기술 후 컴파일 하여 빈 DB파일 생성</li><li>생성된 DB파일에 데이터 입력</li><li>응용프로그램을 위한 트랜잭션 작성</li><li>데이터베이스 접근을 위한 응용 프로그램 작성</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스(실기)</title>
      <link href="/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8B%A4%EA%B8%B0/"/>
      <url>/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8B%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="데이터베이스의-개념"><a href="#데이터베이스의-개념" class="headerlink" title="데이터베이스의 개념"></a>데이터베이스의 개념</h2><ul><li>데이터베이스란?<ul><li>어느 한 조직에서 업무 처리를 위해 공용으로 사용하기 위해 통합 및 저장된 운영 데이터의 집합</li><li>통합된 데이터<ul><li>중복을 최소화한 데이터의 집합</li></ul></li><li>저장된 데이터<ul><li>사용자가 언제든지 이용할 수 있도록 저장된 데이터의 집합</li></ul></li><li>공용 데이터<ul><li>여러 사용자가 공유할 수 있도록 만든 데이터의 집합</li></ul></li><li>운영 데이터<ul><li>중복 최소화 및, 여러 사용자간에 공유함에 있어 문제가 발생하지 않도록 관리를 필요로하는 데이터</li><li>이용가치가 있는 데이터의 집합</li></ul></li></ul></li><li>데이터베이스의 특징<ul><li>계속적인 변화<ul><li>항상 최신 정보를 유지할 수 있도록 삽입 삭제 갱신이 이루어짐</li></ul></li><li>동시 공유<ul><li>여러 사용자가 동시에 접근하여 이용</li></ul></li><li>실시간 접근성<ul><li>질의(query)에 대해 실시간 처리 및 응답</li></ul></li><li>내용에 의한 참조<ul><li>데이터의 물리적 주소나 위치가 아닌 데이터 내용으로 검색</li></ul></li><li>데이터 중복의 최소화<ul><li>동일 데이터의 중복성을 최소화 해야함</li></ul></li></ul></li><li>데이터 베이스의 구성요소<ul><li>개체, 속성, 관계로 이루어짐</li><li>개체<ul><li>현실 세계의 대상체</li><li>실세계 존재하는 유형 혹은 무형 정보의 대상, 서로 구별이 되는 하나의 대상</li><li>개체는 하나 이상의 속성으로 구성</li></ul></li><li>속성<ul><li>데이터베이스를 구축하는 가장 작은 논리 단위</li><li>개체의 특성, 상태 기술</li><li>속성만으로는 개체를 구분하기 어렵다</li></ul></li><li>관계<ul><li>두 개이상의 개체 사이 또는 속성 간의 상호 연관성을 말함</li><li>관계의 종류<ul><li>1 : 1<ul><li>두 개체 간의 구성 원소가 각각 하나씩 대응되는 경우</li></ul></li><li>1 : N<ul><li>두 개체 간의 구성 원소 중 하나의 원소와 여러 개의 원소가 대응되는 경우</li></ul></li><li>N : M<ul><li>두 개체 간의 구성 언소들이 상호 여러 개의 원소들과 대응되는 경우</li></ul></li></ul></li></ul></li><li>시스템 카탈로그<ul><li>데이터베이스에 저장되어 있는 테이블, 인덱스, 뷰, 제약조건, 사용자 등 개체들에 대한 정보와 정보들 간의 관계를 저장 한 것</li><li>데이터 사전이라고도함</li><li>카탈로그에 저장된 데이터를 메타 데이터라 함</li><li>시스템 카탈로그 갱신은 사용자가 sql 문을 실행하면 시스템에 의해 자동적으로 이루어진다</li></ul></li></ul></li></ul><h2 id="데이터베이스-관리-시스템"><a href="#데이터베이스-관리-시스템" class="headerlink" title="데이터베이스 관리 시스템"></a>데이터베이스 관리 시스템</h2><ul><li>DBMS<ul><li>데이터의 중복성과 종속성 등의 문제를 최소화하기 위함</li><li>사용자와 데이터베이스 간의 중계 역할을 한다</li><li>데이터 베이스의 내용을 정의 조작 제어</li><li>모든 사용자나 응용 프로그램들이 데이터 베이스를 공유할 수 있도록 관리 운영하는 소프트웨어 시스템</li></ul></li><li>DBMS 필수 기능<ul><li>정의<ul><li>저장될 데이터의 형태 구조등 데이터베이스 저장에 관한 여러 가지 사항을 정의하는 기능</li></ul></li><li>조작<ul><li>데이터베이스의 자료를 사용자가 이용할수 있도록 검색,갱신,삽입, 삭제하는 기능</li></ul></li><li>제어<ul><li>데이터의 정확성과 안정성 유지를 위한 관리 기능</li><li>데이터의 무결성 유지, 보안, 병행 수행 제어 제공</li></ul></li></ul></li><li>데이터베이스 언어<ul><li>DDL<ul><li>데이터베이스 구조를 정의 수정 삭제 등을 위해 사용되는 언어</li></ul></li><li>DML<ul><li>데이터베이스 내의 자료를 검색,삽입,갱신,삭제하기 위해 사용되는 언어</li></ul></li><li>DCL<ul><li>데이터베이스의 데이터에 대해 무결성 유지 병행 수행 제어, 보호와 관리를 위한 언어</li></ul></li></ul></li></ul><h2 id="데이터베이스-구조-스키마"><a href="#데이터베이스-구조-스키마" class="headerlink" title="데이터베이스 구조(스키마)"></a>데이터베이스 구조(스키마)</h2><ul><li>데이터 베이스의 표현<ul><li>논리적 구조</li><li>물리적 구조</li></ul></li><li>스키마<ul><li>데이터베이스의 전체적인 구조와 제약조건에 대한 명세를 기술 정의한 것</li><li>내부스키마<ul><li>물리적 저장장치 관점에서 본 데이터베이스의 물리구조</li></ul></li><li>개념 스키마<ul><li>논리적 관점에서 본 전체적인 데이터 구조</li></ul></li><li>외부 스키마<ul><li>전체 데이터 중 사용자가 사용하는 한 부분에서 본 논리구조를 말함</li><li>서브 스키마</li></ul></li></ul></li><li>데이터베이스 관리자(DBA)<ul><li>데이터 베이스 구성요소를 결정</li><li>저장 구조와 접근 방법을 선정</li><li>보안, 권한 부여, 유효성 검사 등을 수행</li><li>스키마를 정의</li><li>예방 회복 절차 수립 등을 모색</li><li>무결성 유지를 위한 관리</li></ul></li><li>데이터 관리자(DA)<ul><li>기업이나 조직 내에서 데이터 정의와 체계화, 감독 및 보안 업무를 담당하는 관리자</li></ul></li></ul><h2 id="데이터베이스-설계"><a href="#데이터베이스-설계" class="headerlink" title="데이터베이스 설계"></a>데이터베이스 설계</h2><ul><li>데이터베이스 설계 과정<ul><li>요구사항 분석 - 설계 - 구현 - 운영 및 개선(유지보수)</li><li>요구 사항 분석<ul><li>데이터 베이스 정의, 명세서 작성</li></ul></li><li>설계<ul><li>개념적 설계 - 논리적 설계 - 물리적 설계</li><li>개념적 설계<ul><li>구현할 데이터베이스 정함</li><li>데이터베이스 구성요소 결정</li><li>수행할 작업과 관계를 설계하는 과정</li><li>E-R 모델 이용</li></ul></li><li>논리적 설계<ul><li>스키마 정의</li><li>개념적 설계에서 만들어진 구조를 데이터 모델로 변환하는 단계</li></ul></li><li>물리적 설계<ul><li>내부 저장 장치 구조와 접근 경로 등을 설계하는 과정</li></ul></li><li>구현<ul><li>설계 과정에서 얻어진 것을 토대로 실제 데이터 베이스를 만드는 과정</li><li>유지 봉수의 용이성, 간결 명료하게 구현해야함</li></ul></li><li>데이터 아키텍쳐<ul><li>기업의 데이터 측면에서 기업 시스템을 처음부터 끝까지 시스템의 본질인 데이터를 구조적 체계적으로 관리하고 설계하는 모든 과정을 말함</li></ul></li><li>운영 및 개선(유지 보수)<ul><li>구현된 데이터베이스를 실제로 운영하는 단계</li></ul></li></ul></li></ul></li></ul><h2 id="E-R-모델"><a href="#E-R-모델" class="headerlink" title="E-R 모델"></a>E-R 모델</h2><ul><li>E-R 모델<ul><li>개념적 설계 단계에서 사용되는 설계 기법</li><li>데이터 베이스의 전반적인 구조를 이해하기 쉽도록 표현한 모델</li></ul></li></ul><h2 id="관계-데이터-모델"><a href="#관계-데이터-모델" class="headerlink" title="관계 데이터 모델"></a>관계 데이터 모델</h2><ul><li><p>관계 데이터 모델</p><ul><li>자료의 저장 형태를 2차원 구조의 표로 표현하는 방법</li></ul></li><li><p>관계 데이터 모델의 용어</p><ul><li>릴레이션<ul><li>자료 저장의 형태가 2차원 구조의 테이블로 표현</li></ul></li><li>속성<ul><li>릴레이션을 구성하는 각 열</li></ul></li><li>튜플<ul><li>릴레이션의 한 행을 구성하는 속성들의 집합</li><li>Record</li></ul></li><li>도메인<ul><li>하나의 속성이 가질 수 있는 값들의 범위</li></ul></li><li>릴레이션 스키마<ul><li>릴레이션의 이름과 속성 이름의 집합</li></ul></li><li>릴레이션 인스턴스<ul><li>릴레이션에서 어느 시점까지 입력된 튜플들의 집합</li></ul></li><li>차수(degree)<ul><li>릴레이션을 구성하는 속성의 수</li></ul></li><li>카디널리티<ul><li>릴레이션에 입력된 튜플의 수</li></ul></li></ul></li></ul><ul><li><p>릴레이션의 특징</p><ul><li>튜플들은 모두 상이하다</li><li>튜플들은 유일하며 순서가 없다</li><li>속성 간에도 순서가 없다</li><li>속성 값은 원자값으로 구성되며 분해가 불가능하다</li></ul></li><li><p>Mapping Rule</p><ul><li>개념적 데이터베이스 모델링 결과를 관계형 데이터 베이스 이론에 근거하여 데이터 베이스 구조로 변환하는 과정</li><li>E-R 모델 –&gt; 릴레이션</li></ul></li></ul><h2 id="키와-무결성-제약-조건"><a href="#키와-무결성-제약-조건" class="headerlink" title="키와 무결성 제약 조건"></a>키와 무결성 제약 조건</h2><ul><li><p>키(KEY)</p><ul><li>관계 데이터베이스에서 <strong>튜플</strong> 을 식별하기 위해 사용하는 속성이나 속성의 집합</li><li>데이터베이스의 참조 또는 검색 시에 사용</li></ul></li><li><p>키의 종류</p><ul><li>후보키<ul><li>릴레이션에서 각 튜플을 유일하게 식별할 수 있는 속성이나 속성의 집합</li><li>유일성과 최소성을 모두 만족</li></ul></li><li>기본키<ul><li>후보키 중 튜플을 식별하기위해 특별히 선택된 키</li><li>중볼 될수 없으며, NULL 값이 올 수 없다.</li><li>유일성과 최소성을 만족해야함</li></ul></li><li>대체키<ul><li>후보키 중 기본키를 제외한 속성</li></ul></li><li>외래키<ul><li>하나의 테이블에서 원하는 자료를 얻지 못하는 경우 다른 테이블을 참조하기 위해 사용되는 속성, 외래 식별자</li><li>NULL 가능</li><li>참조하는 릴레이션의 기본키와 같아야한다.</li></ul></li><li>슈퍼키<ul><li>한 릴레이션 내의 튜플들을 식별할 수 있는 후보키와 다른 속성들과의 모든 조합</li><li>최송성은 만족하지 않음</li></ul></li></ul></li><li><p>식별 관계와 비식별 관계</p><ul><li>식별 관계<ul><li>외래키가 기본키인 경우</li></ul></li><li>비식별 관계<ul><li>외래키가 일반속성인 경우</li></ul></li></ul></li></ul><ul><li>무결성 제약조건<ul><li>개체 무결성<ul><li>기본키는 NULL 값이 올 수 없으며, 중복 될 수 없음을 나타냄</li><li>개체 무결성은 개체를 식별하기 위해서 오류가 없도록 하기 위한 제약 조건</li></ul></li><li>참조 무결성<ul><li>외래키는 NULL 값이 올 수 있으며, 참조 릴레이션의 기본키와 같아야하는 제약조건</li><li>테이블 참조시 오류가 없도록 하기 위한 제약 조건</li></ul></li><li>도메인 무결성<ul><li>릴레이션에서 속성값의 범위가 정의된 경우 그 속성 값은 정해진 범위 이내의 값으로 구성해야하는 제약조건</li></ul></li><li>고유 무결성<ul><li>특정 속성에 대해 고유한 값을 가지도록 조건이 주어진 경우, 그 속성값은 모두 달라야한다</li></ul></li><li>NULL 무결성<ul><li>특정 속성 값에 NULL이 올 수 없다는 조건이 주어진 경우, 그 속성 값은 NULL 값이 올 수 없다는 제약조건</li></ul></li><li>키 무결성<ul><li>하나의 릴레이션에는 최소한 하나의 키가 존재해야하는 제약 조건</li></ul></li></ul></li></ul><h2 id="관계-데이터-연산"><a href="#관계-데이터-연산" class="headerlink" title="관계 데이터 연산"></a>관계 데이터 연산</h2><ul><li><p>관계 대수</p><ul><li>순수 관계 연산자<ul><li>select, project, join, division</li></ul></li><li>일반 집합 연산자<ul><li>합집합, 교집합, 차집합, 카디션 프로덕트</li></ul></li></ul></li><li><p>select</p><ul><li>릴레이션에서 조건을 만족하는 수평적 부분집합(튜플)을 구하는 연산</li><li>조건을 만족하는 튜플들로 테이블을 만듬</li></ul></li><li><p>project</p><ul><li>릴레이션에서 수직접 부분 집합(속성의 값)을 구하는 연산으로 원하는 속성만 추출하기 위한 연산</li></ul></li><li><p>join</p><ul><li>두 테이블로부터 조건에 맞는 관련된 튜플들을 하나의 튜플로 결합하여 하나의 테이블로만드는 연산</li><li>동일 조인, 자연 조인, 외부 조인, 세타조인 등 여러가지 종류가 있다</li><li>동일 조인<ul><li>관계 연산자 중 “&#x3D;”만을 사용하여 조건을 표현</li><li>가장 기본이 되는 조인</li><li>중복이 되는 속성도 포함</li></ul></li><li>자연 조인<ul><li>동일 조인에서 중복되는 속성을 제거하여 표현</li></ul></li><li>세타 조인<ul><li>관계 연산자 중 “&#x3D;”외의 연산자를 이용해 조건 수식을 표현하여 조인하는 연산</li><li>중복 속성도 표현</li></ul></li><li>외부 조인<ul><li>조건에 맞지 않는 튜플도 결과 테이블에 포함시켜 조인하는 방법</li><li>해당 장료가 없는 부분은 NULL 값이 된다</li></ul></li></ul></li><li><p>Division</p><ul><li>A와 B 테이블에서 B 테이블의 조건을 만족하는 튜플들을 테이블 A에서 추출하는 연산</li><li>연산에 사용된 속성은 결과에서 제외</li></ul></li></ul><ul><li>관계 해석<ul><li>릴레이션에서 결과를 얻기 위한 과정을 표현</li><li>연산자 없이 정의하는 방법을 이ㅛㅇ하는 비절차적 언어</li><li>튜플 관계 해석과 도메인 관계 해석이 있다.</li><li>표기 형식 : {결과값|조건}</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>데이터베이스의 개념</title>
      <link href="/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98%EA%B0%9C%EB%85%90/"/>
      <url>/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98%EA%B0%9C%EB%85%90/</url>
      
        <content type="html"><![CDATA[<h1 id="데이터-베이스란"><a href="#데이터-베이스란" class="headerlink" title="데이터 베이스란?"></a>데이터 베이스란?</h1><p>특정 조직의 업무를 수행하는데 필요한 데이터의 모임</p><ul><li>통합된 데이터<ul><li>중복 배제</li></ul></li><li>저장된 데이터<ul><li>저장 매체에 저장되어 있어야 한다</li></ul></li><li>운영 데이터<ul><li>존재 가치가 확실하고 없어서는 안될 중요한 자료</li></ul></li><li>공용 데이터<ul><li>여러 응용 시스템이 공동 소유 및 유지하는 자료</li></ul></li></ul><h2 id="데이터-베이스의-특징"><a href="#데이터-베이스의-특징" class="headerlink" title="데이터 베이스의 특징"></a>데이터 베이스의 특징</h2><ul><li>실시간 접근성<ul><li>수시적, 비정형적 질의에 대하여 실시간 처리에 의한 응답이 가능해야한다</li></ul></li><li>계속적인 변화<ul><li>데이터 베이스의 상태는 동적이다, 즉 새로운 데이터의 삽입 삭제 갱신으로 항상 최신 데이터를 유지해야한다.</li></ul></li><li>동시 공용<ul><li>다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야한다</li></ul></li><li>내용에 의한 참조<ul><li>데이터 레코드의 주소나 위치가 아닌 사용자가 요구하는 데이터의 내용으로 데이터를 찾음</li><li>사용자 친화적</li></ul></li></ul><h1 id="데이터-베이스-시스템"><a href="#데이터-베이스-시스템" class="headerlink" title="데이터 베이스 시스템"></a>데이터 베이스 시스템</h1><ul><li>데이터베이스를 이용 및 관리하는데 필요한 컴퓨터 중심의 시스템</li><li>구성 요소<ul><li>데이터베이스</li><li>스키마</li><li>DBMS</li><li>데이터베이스 언어</li><li>데이터베이스 컴퓨터</li><li>데이터 베이스 사용자</li></ul></li></ul><h1 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h1><p>DBMS는 기존 파일 시스템의 종속성과 중복성 문제를 해결하기 위한 시스템을 갖추고 사용자와 데이터 베이스 사이에서 인터페이스 역할을 해준다</p><h2 id="종속성과-중복성의-문제점"><a href="#종속성과-중복성의-문제점" class="headerlink" title="종속성과 중복성의 문제점"></a>종속성과 중복성의 문제점</h2><h3 id="종속성"><a href="#종속성" class="headerlink" title="종속성"></a>종속성</h3><p>응용 프로그램과 데이터 파일이 상호 의존적 관계일 때는 데이터 파일의 접근 방법이나 저장되는 방법이 바뀔 경우 응용 프로그램도 변경해야한다</p><h3 id="중복성"><a href="#중복성" class="headerlink" title="중복성"></a>중복성</h3><ul><li>일관성<ul><li>중복 데이터의 증가로 데이터의 일관성이 사라짐</li></ul></li><li>보안성<ul><li>중복된 모든 데이터들에게 일관된 보안수준을 유지하기 어렵다</li></ul></li><li>경제성<ul><li>저장 공간 낭비와 동일한 데이터의 반복작업으로 비용이 증가한다</li></ul></li><li>무결성<ul><li>제어의 분산으로 데이터의 정확성을 유지할 수 없다</li></ul></li></ul><h2 id="DBMS의-필수-기능"><a href="#DBMS의-필수-기능" class="headerlink" title="DBMS의 필수 기능"></a>DBMS의 필수 기능</h2><ul><li>정의<ul><li>데이터베이스에 저장될 데이터의 형과 구조에 대한 정보를 명시 할 수 있어야한다</li></ul></li><li>조작<ul><li>사용자와 데이터베이스 사이의 인터페이스 수단을 제공하는 기능</li></ul></li><li>제어<ul><li>데이터베이스의 갱신,삽입,삭제 작업이 정확하게 수행되어 데이터의 무결성이 유지되도록 제어해야한다</li><li>허가된 사용자만 데이터 접근 할 수 있도록 보안 유지 및 권한을 검사할 수 있어야한다.</li><li>여러 사용자의 동시 접근 상황에서 처리 결과의 정확성을 유지하도록 병행 제어를 할 수 있어야 한다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataBase</title>
      <link href="/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%ED%95%84%EA%B8%B0/"/>
      <url>/2022/03/10/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%ED%95%84%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="DataBase의-개념"><a href="#DataBase의-개념" class="headerlink" title="DataBase의 개념"></a>DataBase의 개념</h1><h2 id="데이터-베이스의-정의"><a href="#데이터-베이스의-정의" class="headerlink" title="데이터 베이스의 정의"></a>데이터 베이스의 정의</h2><ol><li>통합된 데이터(intergrated) : 자료의 중복 배제</li><li>저장된 데이터(stored) : 저장 매체에 저장</li><li>운영 데이터(opreational) : 조직의 운영에 필수적</li><li>공용 데이터 (shared) : 여러 응용 시스템들 공동 소유 및 접근</li></ol><h2 id="데이터-베이스의-특징"><a href="#데이터-베이스의-특징" class="headerlink" title="데이터 베이스의 특징"></a>데이터 베이스의 특징</h2><ol><li>실시간 접근성(real-time accessibility) : 수시적 비정형 질의에대한 실시간 응답</li><li>계속적인 변화(continous Evolution) : DB는 동적이다</li><li>동시 공용(concurrent sharing)</li><li>내용에 의한 참조(content reference) : 주소,위치에 의한 참조아님</li></ol><h2 id="데이터-베이스-시스템"><a href="#데이터-베이스-시스템" class="headerlink" title="데이터 베이스 시스템"></a>데이터 베이스 시스템</h2><h3 id="시스템의-구성요소"><a href="#시스템의-구성요소" class="headerlink" title="시스템의 구성요소"></a>시스템의 구성요소</h3><ul><li>데이터베이스</li><li>스키마</li><li>DBMS</li><li>데이터 베이스 언어</li><li>데이터베이스 컴퓨터</li><li>데이터베이스 사용자</li></ul><h1 id="DBMS의-기능"><a href="#DBMS의-기능" class="headerlink" title="DBMS의 기능"></a>DBMS의 기능</h1><h2 id="DBMS의-정의"><a href="#DBMS의-정의" class="headerlink" title="DBMS의 정의"></a>DBMS의 정의</h2><ul><li>DB를 관리해주는 소프트웨어</li><li>기존의 File system이 가지던 데이터 <strong>종속성</strong> 과 <strong>중복성</strong> 문제 해결위해 제안<ul><li>모든 응용프로그램이 DB를 공용할 수 있도록 관리</li></ul></li></ul><h2 id="종속성과-중복성으로-인한-문제점"><a href="#종속성과-중복성으로-인한-문제점" class="headerlink" title="종속성과 중복성으로 인한 문제점"></a>종속성과 중복성으로 인한 문제점</h2><h3 id="종속성으로-인한-문제점"><a href="#종속성으로-인한-문제점" class="headerlink" title="종속성으로 인한 문제점"></a>종속성으로 인한 문제점</h3><ul><li>파일의 저장 방법이나 저장된 데이터 접근 방법을 변경 할 때 응용프로그램도 같이 변경해야한다.</li></ul><h3 id="중복성으로-인한-문제점"><a href="#중복성으로-인한-문제점" class="headerlink" title="중복성으로 인한 문제점"></a>중복성으로 인한 문제점</h3><ul><li>일관성 : 내용이 일치하지 않을 수 있다.</li><li>보안성 : 중복된 모든 데이터에 동등한 보안 수쥰 유지 어려움</li><li>경제성 : 저장공간 낭비와 데이터 반복 작업으로 인한 비용 증가</li><li>무결성 : 제어의 분산으로 데이터 저확성 유지 못함</li></ul><h2 id="DBMS의-필수-기능"><a href="#DBMS의-필수-기능" class="headerlink" title="DBMS의 필수 기능"></a>DBMS의 필수 기능</h2><h2 id="정의-조직-Definition"><a href="#정의-조직-Definition" class="headerlink" title="정의(조직)(Definition)"></a>정의(조직)(Definition)</h2><ul><li>DB에 저장될 데이터의 TYPE과 구조에 대한 정의, 이용 방식, 제약 조건 등을 명시(정의)</li></ul><h2 id="조작-Manipulation"><a href="#조작-Manipulation" class="headerlink" title="조작(Manipulation)"></a>조작(Manipulation)</h2><ul><li>사용자와 DB 사이에 interface 수단을 제공하는 기능</li></ul><h2 id="제어-control"><a href="#제어-control" class="headerlink" title="제어(control)"></a>제어(control)</h2><ul><li>갱신 삽입 삭제 작업의 체계적인 처리로 데이터 무결성 유지되도록 제어</li><li>보안 유지 및 권한 검사</li><li>여러 사용자의 동시 접근에도 처리 결과가 항상 정확성을 유지하도록 <strong>병행 제어</strong>(concurrency control) 가능</li></ul><h1 id="스키마-Shema"><a href="#스키마-Shema" class="headerlink" title="스키마(Shema)"></a>스키마(Shema)</h1><h2 id="스키마의-정의"><a href="#스키마의-정의" class="headerlink" title="스키마의 정의"></a>스키마의 정의</h2><ul><li>스키마는 DB의 구조와 제약 조건에 관한 전반적인 명세(specification)을 기술한 meta-data의 집합</li><li>DB를 구성하는 데이터 개체(entity),속성(attribute), 관계(relationship) 등 전반적으로 정의</li><li><strong>사용자의 관점</strong> 에 따라 외부 스키마, 개념 스키마, 내부 스키마로 나누어진다.</li></ul><h2 id="스키마의-특징"><a href="#스키마의-특징" class="headerlink" title="스키마의 특징"></a>스키마의 특징</h2><ul><li>Data-Dictionary[^1]에 저장되며, meta-data라 불리기도함</li></ul><p>[^1]: DB에 저장되는 모든 데이터 개체에 대한 정보를 유지 관리하는 시스템으로, 시스템 카탈로그라고 불림</p><ul><li>현실 세계의 특정한 한 부분의 표현, 특정 데이터 모델을 이용해 제작</li><li>시간에 따라 불변</li><li>데이터의 구조적 특성을 의미하며, 인스턴스에 의해 구성된다</li></ul><h2 id="스키마의-3-계층"><a href="#스키마의-3-계층" class="headerlink" title="스키마의 3 계층"></a>스키마의 3 계층</h2><p>보통 DBMS는 사용자의 요구를 외부 스키마 - 개념 스키마 - 내부적 스키마 형태로 변환한다</p><h3 id="외부-스키마-x3D-서브-스키마-x3D-사용자-뷰"><a href="#외부-스키마-x3D-서브-스키마-x3D-사용자-뷰" class="headerlink" title="외부 스키마 &#x3D; 서브 스키마 &#x3D; 사용자 뷰"></a>외부 스키마 &#x3D; 서브 스키마 &#x3D; 사용자 뷰</h3><ul><li>개인의 입장에서 필요로 하는 데이터의 논리적 구조를 정의</li><li>전체 DB의 한 논리적인 부분으로 볼 수 있으므로 <strong>서브 스키마</strong> (Sub shema)라고 한다.</li><li>하나의 데이터베이스 시스템에는 여러 개의 외부 스키마 존재 가능 &amp;&amp; 하나의 외부 스키마를 여러 사용자가 공용 가능</li><li>같은 데이터베이스에서 서론 다른 관점을 정의할 수 있도록 허용한다.[^2]</li></ul><p>[^2]: 여러 응용 프로그램을 의미하는 것 같음, 관점 &#x3D; 프로그램</p><h3 id="개념-스키마-x3D-전체적인-뷰"><a href="#개념-스키마-x3D-전체적인-뷰" class="headerlink" title="개념 스키마 &#x3D; 전체적인 뷰"></a>개념 스키마 &#x3D; 전체적인 뷰</h3><ul><li>DB의 전체적인 논리적 구조</li><li>일반적으로 스키마라 한다면 개념 스키마 이다.</li><li>기관이나 조직체 관점에서 DB를 정의한 것이다.</li><li>DBA가 관리한다</li><li>개체 간의 관계와 제약 조건을 나타냄, 접근권한 보안 및 무결성 규칙에 관한 명세 정의</li></ul><h3 id="내부-스키마-x3D-저장-스키마"><a href="#내부-스키마-x3D-저장-스키마" class="headerlink" title="내부 스키마 &#x3D; 저장 스키마"></a>내부 스키마 &#x3D; 저장 스키마</h3><ul><li>물리적 저장장치의 입장에서 본 데이터 베이스 구조</li><li>저장될 레코드의 물리적인 구조를 정의, 저장 데이터의 항목 표현 방법, 내부 레코드의 물리적 순서 등을 나타낸다.</li><li>시스템 프로그래머나 시스템 설계자가 보는 관점의 스키마</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>리눅스 마스터 2급(리눅스 운영 및 관리)</title>
      <link href="/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9A%B4%EC%98%81%EB%B0%8F%EA%B4%80%EB%A6%AC/"/>
      <url>/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9A%B4%EC%98%81%EB%B0%8F%EA%B4%80%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="권한-및-그룹-설정"><a href="#권한-및-그룹-설정" class="headerlink" title="권한 및 그룹 설정"></a>권한 및 그룹 설정</h2><ul><li>리눅스 시스템은 모든 파일과 디렉터리에 접근권한과 소유권이 부여됨</li><li>ls -l 명령어로 파일 속성을 볼 수 있음</li></ul><h3 id="소유권-관련-명령어"><a href="#소유권-관련-명령어" class="headerlink" title="소유권 관련 명령어"></a>소유권 관련 명령어</h3><ul><li>chown<ul><li>파일과 디렉터리의 사용자 소유권과 그룹 소유권을 변경한다</li></ul></li><li>chgrp<ul><li>파일이나 디렉터리의 그룹 소유권을 변경한다</li></ul></li></ul><h3 id="허가권-관련-명령어"><a href="#허가권-관련-명령어" class="headerlink" title="허가권 관련 명령어"></a>허가권 관련 명령어</h3><ul><li><p>ls -l 명령어로 파일 유형과 허가권을 알 수 있음</p></li><li><p>파일 허가권의 첫 번째 자리는 파일 유형을 기호로 정의 한다</p></li><li><p>파일은 일반 파일 디렉터리 파일 특수 파일로 나뉜다</p></li><li><p>파일 권한에는 읽기,쓰기,실행이 있다.</p></li><li><p>읽기,쓰기,실행의 접근 제한 표시는 하이픈(-)으로 나타낸다.</p></li><li><p>chmod</p><ul><li>파일이나 디렉터리의 접근 허가권을 변경하는 명령어</li></ul></li><li><p>umask</p><ul><li>새로 생성되는 파일이나 디렉터리의 <strong>기본 허가권</strong> 값을 지정한다</li><li>파일의 기본 권한은 666, 디렉터리의 기본 권한은 777이다.</li><li>디폴트 권한 값에서 umask를 뺀 값을 기본 허가권으로 설정</li></ul></li></ul><h3 id="특수-권한"><a href="#특수-권한" class="headerlink" title="특수 권한"></a>특수 권한</h3><ul><li>SetUID, SetGID<ul><li>프로세스가 실행되는 동안 해당 프로세스의 root 권한을 임시로 가져오는 기능</li><li>프로세스가 사용자보다 높은 수준의 접근을 요구할 때 파일 접근 제한 때문에 원할한 기능을 제공할 수 없기 때문에 이러한 문제점을 해결하기 위한 방법</li><li>사용자가 사용할 때 SetUID는 사용자 권한으로, SetGID의 경우 그룹권한으로 파일을 실행시킨다</li></ul></li><li>Sticky bit<ul><li>일반적으로 공용 디렉터리를 사용할 때 sticky bit를 설정하여 사용한다.</li><li>사용자 권한을 지정하기 어려운 프로그램들이 일시적으로 특정 디렉터리에 파일을 생성하고 삭제하도록 이용된다</li><li>설정된 디렉터리에는 누구든 접근 가능하고 파일을 생성할 수 있다.</li><li>sticky bit가 설정되어 있는 디렉터리 안의 내용은 해당 파일의 소유자나 root만이 변경 가능하다</li></ul></li></ul><h3 id="디스크-쿼터"><a href="#디스크-쿼터" class="headerlink" title="디스크 쿼터"></a>디스크 쿼터</h3><ul><li>파일 시스템마다 사용자나 그룹이 생성할 수 있는 파일의 용량 및 개수를 제한하는 것이다.<ul><li>보통 블록 단위의 용량 제한과 inode[^1]의 개수를 제한한다</li></ul></li></ul><p>[^1]: inode란 파일에 대한 정보를 가지고 있는 메타 데이터이다</p><ul><li>쿼터는 사용자별, 파일 시스템별로 동작된다</li><li>그룹 단위로도 용량을 제한할 수 있으며 웹호스팅 서비스를 하는 경우에 유용하다</li></ul><h4 id="디스크-쿼터-지정단계"><a href="#디스크-쿼터-지정단계" class="headerlink" title="디스크 쿼터 지정단계"></a>디스크 쿼터 지정단계</h4><ol><li>파일 &#x2F;etc&#x2F;fstab에 디스크 쿼터 관련 설정</li><li>재마운팅 실행 후 확인</li><li>마운트 된 커터를 끄고 생성된 쿼터 파일 삭제</li><li>쿼터 데이터베이스 생성</li><li>사용자별 쿼터 지정</li><li>쿼터 현재 상태 점검</li></ol><h4 id="디스크-쿼터-관련-명령어"><a href="#디스크-쿼터-관련-명령어" class="headerlink" title="디스크 쿼터 관련 명령어"></a>디스크 쿼터 관련 명령어</h4><ul><li>quotaoff<ul><li>쿼터 서비스 비활성화</li></ul></li><li>quotacheck<ul><li>파일 시스템의 디스크 사용 상태를 검색</li></ul></li><li>edquota<ul><li>편집기를 이용하여 사용자나 그룹에 디스크 사용량을 할당하는 명령어</li></ul></li><li>setquota<ul><li>편집기가 기반이 아닌 명령행에서 직접 사용자나 그룹에 디스크 사용량을 할당하는 명령어</li></ul></li></ul><h2 id="파일-시스템의-관리"><a href="#파일-시스템의-관리" class="headerlink" title="파일 시스템의 관리"></a>파일 시스템의 관리</h2><h3 id="파일-시스템의-개요와-종류"><a href="#파일-시스템의-개요와-종류" class="headerlink" title="파일 시스템의 개요와 종류"></a>파일 시스템의 개요와 종류</h3><h4 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h4><ul><li>운영체제가 파일을 시스템의 디스크상에 구성하는 방식</li><li>컴퓨터에서 파일이나 자료를 쉽게 발견 및 접근할 수 있도록 보관 또는 조직하는 체제이다</li><li>하드디스크나 cd-rom 과 같은 물리적 저장소를 관리한다</li><li>파일 서버상의 자료로의 접근을 제공하는 방식과 가상의 형태로서 접근 수단만이 존재하는 방식도 파일 시스템의 범위에 포함된다</li></ul><h4 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h4><h4 id="리눅스-전용-디스크-기반-파일-시스템"><a href="#리눅스-전용-디스크-기반-파일-시스템" class="headerlink" title="리눅스 전용 디스크 기반 파일 시스템"></a>리눅스 전용 디스크 기반 파일 시스템</h4><ul><li><p>Extended File System</p></li><li><p>ext</p><ul><li>리눅스 초기에 사용되던 파일 시스템이며 호환성이 없음</li><li>ext2의 원형</li><li>2GByte의 데이터와 파일명을 255자까지 지정가능</li></ul></li><li><p>ext2</p><ul><li>고용량 디스크 사용을 염두하고 설계된 파일 시스템</li><li>쉽게 호환되며 업그레이드도 쉽게 설계되어 있음</li></ul></li><li><p>ext3</p><ul><li>리눅스의 대표적인 저널링을 지원하도록 확장된 파일 시스템</li><li>ACL(Access control list)를 통한 접근 제어 지원</li></ul></li><li><p>ext4</p><ul><li>파일에 디스크 할당시 물리적으로 연속적인 블록을 할당</li><li>64비트 기억 공간 제한을 없앰</li><li>16 TeraByte 파일을 지원</li></ul></li></ul><h4 id="저널링-파일-시스템"><a href="#저널링-파일-시스템" class="headerlink" title="저널링 파일 시스템"></a>저널링 파일 시스템</h4><ul><li>jfs<ul><li>journaling file system의 약자</li><li>IBM 사의 독자적인 저널링 파일 시스템</li><li>GPL로 공개하여 련재 리눅스용으로 개발</li></ul></li><li>XFS<ul><li>고성능 저널링 시스템</li><li>64비트 주소를 지원하며 확장성 있는 자료 구조와 알고리즘 사용</li><li>데이터 읽기&#x2F;쓰기 트랜잭션으로 성능 저하를 최소화</li><li>64비트 파일 시스템으로 큰 용량의 파일도 다룰 수 있음</li></ul></li><li>ReiserFS<ul><li>독일의 한스 라이저가 개발한 파일 시스템</li><li>모든 파일 객체들을 b트리에 저장</li><li>간결한 색인화된 디렉터리 지원</li></ul></li></ul><h4 id="네트워크-파일-시스템"><a href="#네트워크-파일-시스템" class="headerlink" title="네트워크 파일 시스템"></a>네트워크 파일 시스템</h4><ul><li><p>SMB</p><ul><li>server message block</li><li>삼바 파일 시스템[^2]을 마운트 지정</li><li>윈도우 계열 OS 환경에서 사용되는 파일&#x2F;프린터 공유 프로토콜</li><li>리눅스, 유닉스 계정 OS와 윈도우 OS와의 자료 및 하드웨어 공유</li></ul></li><li><p>CIFS</p><ul><li>Common Internet file system</li><li>SMB를 확장한 파일 시스템</li><li>SMB를 기초로 응용하여 라우터를 뛰어 넘어 연결할 수 있는 프로토콜</li><li></li></ul><p>[^2]: SMB 네트워크 프로토콜을 재구성한 자유 소프트웨어</p></li><li><p>NFS</p><ul><li>Network File System</li><li>씬마이크로파일시스템이 개발한 네트워크 공유 프로토콜</li><li>파일 공유 및 파일 서버로 사용됨</li><li>공유된 영역을 마운트할 때 지정</li><li>하드웨어, 운영체제 또는 네트워크 구조가 달라도 공유 가능</li><li>NFS 서버의 특정 디렉터리를 마운트하여 사용할 수 있음</li></ul></li></ul><h4 id="기타-지원-가능한-파일-시스템"><a href="#기타-지원-가능한-파일-시스템" class="headerlink" title="기타 지원 가능한 파일 시스템"></a>기타 지원 가능한 파일 시스템</h4><ul><li>FAT<ul><li>windows NT가 지원하는 파일 시스템 중 가장 간단한 시스템</li><li>FAT으로 포맷된 디스크는 클러스터 단위로 할당</li><li>클러스터 크기는 볼륨 크기에 따라 결정</li><li>읽기 전용, 숨김, 시스템 및 보관 파일 특성만 지우너</li><li>삼바 파일 시스템을 마운트 지정</li></ul></li><li>VFAT<ul><li>Virtual FAT</li><li>FAT 파일 시스템이 확장된 것으로 FAT보다 제한이 적음</li><li>파일 이름도 최고 255자까지 만들 수 있음</li><li>공백이나 여러 개의 구두점도 포함</li></ul></li><li>FAT32<ul><li>SMB를 확장한 파일 시스템</li><li>32GB보다 큰 파티션을 만들 수 없고 파티션에 4GB를 초과하는 파일을 저장할 수 없음</li></ul></li><li>NTFS<ul><li>윈도우에서 사용하는 파일 시스템</li><li>안정성이 뛰어나고 대용량 파일도 저장</li><li>파일 크기 및 볼륨은 이론상으로 최대 16EB이나 실질적으로는 2TB</li></ul></li><li>ISO 9660<ul><li>CD-ROM의 표준 파일 시스템</li><li>1988년에 재정된 푲ㄴ</li></ul></li><li>UDF<ul><li>universal disk format의 약자로 최신 파일 시스템 형식</li><li>광학 매체용 파일 시스템 표준</li><li>dvd에 사용, iso 9660 대체를 위해 만들어짐</li></ul></li><li>HPFS<ul><li>OS&#x2F;2의 운영체제를 위해 만들어진 파일 시스템</li></ul></li></ul><h4 id="관련-명령어"><a href="#관련-명령어" class="headerlink" title="관련 명령어"></a>관련 명령어</h4><ul><li>mount&#x2F;unmount<ul><li>마운트는 특정 디바이스를 특정 디렉터리처럼 사용하기 위해 장치와 디렉터리를 연결하는 것</li><li>리눅스는 PNP 기능을 지원하지만 지원하는 하드웨어가 많지 않으므로 시스템 부팅 후에 수동으로 마운트해서 사용을 하고 사용이 끝난 후에는 언마운트를 시킨다</li><li>파일 &#x2F;etc&#x2F;mtab은 현재 마운트된 블록 시스템 정보를 표시한다</li></ul></li><li>eject<ul><li>이동식 보조기억장치 등과 같은 미디어를 해제하고 장치를 제거하는 명령어</li></ul></li><li>fdisk<ul><li>새로운 파티션 생성, 기존 파티션의 삭제, 파티션의 타입 결정 등의 작업을 수행 할 수 있다</li><li>한 번에 한 디스크에 대해서만 작업을 수행 할 수 있다</li></ul></li><li>mkfs<ul><li>리눅스 파일 시스템을 생성한다</li><li>fdisk로 하드디스크 파티션을 나눈 후 해당 파티션에 맞는 파일 시스템을 생성</li></ul></li><li>mke2fs<ul><li>ext2,ext3,ex4 타입의 리눅스 파일 시스템을 생성하는 명령어이다</li></ul></li><li>fsck<ul><li>파일 시스템의 무결성을 점검하고 대화식으로 복구하는 명령어</li><li>디렉터리 &#x2F;lost+found는 fsck에서 사용하는 디렉터리</li></ul></li><li>e2fsck<ul><li>ext2 ext3 ext4 타입의 리눅스 파일 시스템을 복구하는 명령어</li></ul></li><li>du<ul><li>disk usage의 약자</li><li>디렉터리별로 디스크 사용량을 확인 할 수 있다.</li></ul></li><li>df<ul><li>시스템에 마운트된 하드 디스크의 남은 용량을 확인할 때 사용하는 명령어</li><li>기본적으로 1024byte 블록 단위로 출력</li></ul></li></ul><h2 id="셸-개념-및-종류"><a href="#셸-개념-및-종류" class="headerlink" title="셸 개념 및 종류"></a>셸 개념 및 종류</h2><h3 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h3><ul><li>명령어 해석기</li><li>로그인 할 때 실행되어 사용자 별로 사용 환경 설정을 가능하게 함</li><li>강력한 스크립트 언어</li><li>입출력 방향 재지정과 파이프 기능 제공</li><li>포어&#x2F;백그라운드 프로세스를 실행한다</li></ul><h3 id="종류-1"><a href="#종류-1" class="headerlink" title="종류"></a>종류</h3><ul><li>본 셸계열과 C셸 계열로 나뉜다</li><li>사용자 프롬프트가 $ 이면 본 셸 계열, % 이면 C 셸 계열을 사용하고 있다는 것이다</li><li>대부분의 셸은 본 셸 계열의 기능을 포함하여 확대 발전한 형태이다</li><li>C셸은 본 셸의 모든 기능과 명령어 히스토리 별명 작업 제어 기능을 추가로 가지고 있다.</li></ul><h3 id="셸-확인-및-변경"><a href="#셸-확인-및-변경" class="headerlink" title="셸 확인 및 변경"></a>셸 확인 및 변경</h3><h4 id="로그인-쉘-확인"><a href="#로그인-쉘-확인" class="headerlink" title="로그인 쉘 확인"></a>로그인 쉘 확인</h4><ul><li>파일 &#x2F;etc&#x2F;shell 에서 사용할 수 있는 셸들을 확인할 수 있다.</li><li>파일 &#x2F;etc&#x2F;passwd 파일에서 계쩡마다 할당된 셸을 확인 할 수 있다.</li><li>명령어 echo $SHELL은 현재 로그인한 사용자가 사용하고 있는 쉘을 확인할 수 있다.</li></ul><h4 id="쉘-변경"><a href="#쉘-변경" class="headerlink" title="쉘 변경"></a>쉘 변경</h4><ul><li>로그인 쉘 변경은 반영구적인 쉘 변경 방법으로 관리자가 쉘 변경 후 다음 변경을 하기전까지 지정된 쉘을 사용한다</li><li>명령어 chsh: 일반 사용자 환경에서 쉘 변경시 사용한다</li><li>명령어 usermod: 관리자 환경에서 지정된 계정자의 정보를 변경할 때 사용하는 명령어이다</li></ul><h2 id="쉘-환경-설정"><a href="#쉘-환경-설정" class="headerlink" title="쉘 환경 설정"></a>쉘 환경 설정</h2><h3 id="환경-변수와-쉘-변수"><a href="#환경-변수와-쉘-변수" class="headerlink" title="환경 변수와 쉘 변수"></a>환경 변수와 쉘 변수</h3><ul><li>근데 이거 구분이 당연한게 지연변수와 전역변수 뜻을 알면 그냥 그렇군 정도</li></ul><h4 id="환경-변수"><a href="#환경-변수" class="headerlink" title="환경 변수"></a>환경 변수</h4><ul><li>전체 쉘에서 사용 가능한 전역 변수</li><li>서브 쉘에 기능 상속 가능</li><li>환경 변수 확인 명령 env</li></ul><h4 id="쉘-변수-지역-변수"><a href="#쉘-변수-지역-변수" class="headerlink" title="쉘 변수(지역 변수)"></a>쉘 변수(지역 변수)</h4><ul><li>현재 로그인한 쉘에서만 사용 가능한 지역 변수</li><li>서브 쉘에 기능 상속 불가능</li><li>쉘 변수 확인 명령어 set</li></ul><h4 id="환경-설정-파일"><a href="#환경-설정-파일" class="headerlink" title="환경 설정 파일"></a>환경 설정 파일</h4><ul><li>쉘 시작 시 자동으로 실행되는 고유의 시작 파일이 있다.<ul><li>이 파일은 사용자 운영환경을 설정한다</li></ul></li><li>배쉬셀의 시작 파일은 &#x2F;etc&#x2F;profile, &#x2F;etc&#x2F;bashrc, <del>&#x2F;.bash_profile,</del>&#x2F;.bashrc 이다.</li><li>쉘 파일은 전역적 파일과 지역적 파일로 나뉜다</li><li>파일 &#x2F;etc&#x2F;profile.d는 몇몇 응용 프로그램들이 시작시 자동 실행할 스크립트 파일 경로를 넣어둔다.</li></ul><h3 id="bash-shell의-주요-기능"><a href="#bash-shell의-주요-기능" class="headerlink" title="bash shell의 주요 기능"></a>bash shell의 주요 기능</h3><h4 id="history-기능"><a href="#history-기능" class="headerlink" title="history 기능"></a>history 기능</h4><ul><li>일정 개수 이상 사용했던 명령어를 .bash_history에 저장해 두고 다시 불러서 사용할 수 있게 하는 기능이다.</li><li>대부분의 쉘은 이전에 입력했던 명령어를 반복하거 약간 변형하여 다시 사용할 수 있도록 하는 기능이다</li></ul><h4 id="alias-기능"><a href="#alias-기능" class="headerlink" title="alias 기능"></a>alias 기능</h4><ul><li>자주 사용하는 명령어를 특정 문자로 입력해 두고 간편하게 사용할 수 있게 하는 기능이다.</li></ul><h2 id="프로세스-개념-및-유형"><a href="#프로세스-개념-및-유형" class="headerlink" title="프로세스 개념 및 유형"></a>프로세스 개념 및 유형</h2><h3 id="개념-1"><a href="#개념-1" class="headerlink" title="개념"></a>개념</h3><ul><li>프로세스는 cpu와 메모리를 할당받아 실행 중인 프로그램이다</li><li>프로세스들마다 고유의 프로세스 ID를 할당받는다</li></ul><h3 id="프로세스-유형"><a href="#프로세스-유형" class="headerlink" title="프로세스 유형"></a>프로세스 유형</h3><h4 id="포어그라운드-프로세스"><a href="#포어그라운드-프로세스" class="headerlink" title="포어그라운드 프로세스"></a>포어그라운드 프로세스</h4><ul><li>사용자와 상호작용하는 프로세스</li><li>터미널에 직접 연결되어 입출력을 주고 받는 프로세스</li><li>명령 입력 후 수행 종료까지 기다려야 하는 프로세스</li><li>화면에서 실행되는 것이 보이는 프로세스</li><li>응용프로그램이나 명령어 등</li></ul><h4 id="백그라운드-프로세스"><a href="#백그라운드-프로세스" class="headerlink" title="백그라운드 프로세스"></a>백그라운드 프로세스</h4><ul><li>사용자와 직접적인 대화를 하지 않고 뒤에서 실행되는 프로세스</li><li>사용자의 입력에 관계없이 실행되는 프로세스</li><li>실행은 되지만 화면에 나타나지 않고 실행되는 프로세스</li><li>시스템 프로그램, 데몬 등</li></ul><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><ul><li>새로운 프로세스를 만들 때 기존 픞로세스를 복제하는 방식을 사용</li><li>새로운 프로세스를 위한 메모리르 할당한다</li><li>새로 생성된 프로세스는 원래의 프로세스와 똑같은 코드를 가지고 있다.</li><li>원본 프로세스를 부모 프로세스라 부르고 새로 복제된 프로세스를 자식 프로세스라고 부른다</li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><ul><li>호출하는 프로세스가 새로운 프로세스로 변경되는 방식</li><li>새로운 프로세스를 위한 메모리를 할당하지 않는다</li><li>호출한 프로세스의 메모리에 새로운 프로세스 코드를 덮어씌워버린다</li></ul><h4 id="데몬"><a href="#데몬" class="headerlink" title="데몬"></a>데몬</h4><ul><li>리눅스 시스템이 부팅 시 자동으로 실행되는 백그라운드 프로세스</li><li>메모리에 상주하면서 사용자의 특정 요청이 오면 즉시 실행되는 대기 중이 서버프로세스이다</li><li>주기적으로 지속적인 서비스 요청을 처리하기 위해 사용된다</li><li>사용자들은 이 프로세스들을 볼 수 있는 권한이 없다.</li></ul><h2 id="프로세스-유틸리티"><a href="#프로세스-유틸리티" class="headerlink" title="프로세스 유틸리티"></a>프로세스 유틸리티</h2><h3 id="프로세스-관련-명령어"><a href="#프로세스-관련-명령어" class="headerlink" title="프로세스 관련 명령어"></a>프로세스 관련 명령어</h3><ul><li>ps<ul><li>현재 실행중인 프로세스의 상태를 보여주는 명령어이다.</li><li>cpu사용도가 낮은 순서로 출력된다</li></ul></li><li>pstree<ul><li>실행 중인 프로세스들을 트리구조로 나타낸다</li></ul></li><li>jobs<ul><li>작업이 중지된 상태, 백그라운드로 진행 중인 상태, 변경되었지만 보고되지 않은 상태 등을 표시한다</li><li>백그라운드로 실행중인 프로세스를 확인한다.<ul><li>[숫자]는 작업 번호이다</li><li>출력된 목록에서 +는 현재 작업 실행, -는 앞으로 실행될 작업을 나타낸다</li></ul></li></ul></li><li>kill<ul><li>프로세스를 종료 시킨다</li></ul></li><li>killall<ul><li>같은 데몬의 여러 프로세서를 한 번에 종료 시킬 때 사용한다</li><li>프로세스 명으로 연관된 프로세스들을 종료시킨다</li></ul></li><li>nice<ul><li>프로세스 사이의 우선순위를 확인하고 우선순위를 변경할 수 있는 명령어이다</li><li>조정할 수 있는 NI 값의 범위는 -20 ~19(우선 순위 높음 -&gt; 낮음)이다</li><li>우선순위 0의 값을 가지며 값이 작을수록 우선순위가 높다</li><li>옵션 -n을 사용하지 않으면 디폴트는 10을 사용한다</li><li>조정수치가 생략되면 명령의 우선권은 10 만큼 증가한다</li><li>명령어 ‘nice -10 bash’는 bash 프로세스 NI 값을 10만큼 증가시키는 것이다<ul><li>값이 증가한다는 것은 우선순위를 낮추는 것이다</li></ul></li><li>nice [옵션] 프로세스명</li></ul></li><li>renice<ul><li>이미 실행중인 프로세스의 우선순위를 변경한다</li><li>nice는 기존 NI값을 증감하지만 명령어 renice는 지정한 NI값을 설정한다</li><li>nice는 NI 값에 -(대쉬 바)를 쓰지 않는다</li><li>renice [옵션] NI갑 PID</li></ul></li><li>top<ul><li>리눅스 시스템의 운영 상태를 실시간으로 모니터링하거나 프로세스 상태를 확인 할 수 있다.</li></ul></li><li>nohup<ul><li>프로세스가 중단되지 않고 백그라운드로 작업을 수행할 수 있게 한다.</li><li>사용자가 로그아웃하거나 작업 중인 터미널 창이 닫혀도 실행 중인 프로세스를 백그라운드 프로세스로 계속 작업할 수 있도록 한다</li><li>용량이 큰 데이터 압축 해제와 같이 실행시간이 오래 걸리는 프로세드들에 대해 nohup으로 처리하여 작업하면 작업 중단 없이 해당 업무를 완료할 수 있다.</li><li>백그라운드로 실행 될 수 있도록 명령행 뒤에 &amp;를 명시한다</li></ul></li></ul><h3 id="스케줄링과-cron"><a href="#스케줄링과-cron" class="headerlink" title="스케줄링과 cron"></a>스케줄링과 cron</h3><ul><li>주기적으로 반복되는 일은 자동적으로 실행 될 수 있도록 설정한다&#x2F;</li><li>스케줄링 데몬은 cround이며 관련 파일은 &#x2F;etc&#x2F;crontab이다</li><li>파일 &#x2F;etc&#x2F;crontab&#x2F;은 7개의 필드로 구성되어 있다.</li><li>명령어 crontab은 사용자가 주기적인 작업을 등록할 수 있게 한다</li></ul><h2 id="에디터-종류"><a href="#에디터-종류" class="headerlink" title="에디터 종류"></a>에디터 종류</h2><h3 id="개요-1"><a href="#개요-1" class="headerlink" title="개요"></a>개요</h3><ul><li>리눅스에서 지원하는 편집기로는 vi, emacs, pico, gedit, xedit 등이 있다.</li><li>리눅스 편집기는 편집기를 통해 파일을 수정한다.</li></ul><h3 id="종류-2"><a href="#종류-2" class="headerlink" title="종류"></a>종류</h3><ul><li>pico<ul><li>워싱턴 대학의 Aboil Kasar가 개발한 유닉스 기반의 텍스트 에디터이다.</li><li>메뉴 선택 방식의 텍스트 편집기로 기본 인터페이스가 윈도우의 메모장과 유사하여 간단하다</li><li>자유 소프트웨어 라이선스가 아니기 때문에 소스 수정이 불가능</li><li>다른 편집기에 비해 사용하기 쉽고 사용하기 편리하지만 기능이 부족하고 업데이트가 잘되지 않는다.</li><li>GNU 프로젝트에서는 pico의 복제 버전 에디터인 nano를 개발하였다.</li><li>vi 편집기처럼 입력모드와 명령모드가 존재하지 않고 바로 텍스트 입력이 가능하다</li></ul></li><li>emacs<ul><li>리차드 스톨만이 매크로 기능이 있는 텍스트 교정 및 편집기로 개발하였다</li><li>최초의 개발자는 리차드 스톨만이며, 이후 제임스 고슬링이 LSP 언러를 기반하여 emacs에 다양한 기능을 개발하여 추가하였다.</li><li>LISP에 기반을 둔 환경 설정 언어를 가지고 있다.</li></ul></li><li>vi<ul><li>1976년 빌 조이가 초기 BSD 릴리즈에 포함될 편집기로 만들었다.</li><li>리눅스 배포판과 유닉스에 기본적으로 포함되어 있다.</li><li>다른 편집기들과 다르게 모드형 편집기이다.</li><li>명령모드, 입력모드, 편집 모드로 구성되어 있다.</li></ul></li><li>vim<ul><li>브람 무레나르가 만든 편집기앋.</li><li>vi 편집기와 호환되면서 독자적으로 다양한 기능을 추가하여 만든 편집기이다</li><li>편집 시 다양한 색상을 이용하여 가시성을 높일 수 있다.</li><li>패턴 검색시 하이라이트 기능을 제공하여 빠른 검색을 가능하게 해준다</li><li>ex모드에서 히스토리 기능을 제공한다</li><li>확장된 정규 표현식 문법과 강력한 문법 강조 기능을 갖는다</li></ul></li><li>gedit<ul><li>gnom 데스크톱 환경으로 개발된 자유 소프트웨어 텍스트 편집기이다</li><li>마이크로소프트, 윈도, 맥OS X에서도 사용할 수 있다.</li><li>UTF-8과 호환하며 텍스트 문서를 편집하는 용도에 중점을 두었다.</li><li>X-윈도우 시스템에 맞춰 개발되었다..</li><li>GTK+와 그놈 라이브러리를 이용하여 개발되었다.</li><li>텔넷 접속 시나 텍스트 기반 콘솔 창에서는 사용할 수 없다.</li></ul></li></ul><h2 id="소프트웨어-프로그램-설치"><a href="#소프트웨어-프로그램-설치" class="headerlink" title="소프트웨어 프로그램 설치"></a>소프트웨어 프로그램 설치</h2><h3 id="계열"><a href="#계열" class="headerlink" title="계열"></a>계열</h3><ul><li>데미안 계열<ul><li>배포 업체 : debian, ubunto, xandors,lispire</li><li>패키지 툴 : dpkg, apt-get, optitude</li></ul></li><li>레드햇 계열<ul><li>배포 업체 : fedora, centos,RHEL,openSUSE, mandirva</li><li>패키지 툴 : rpm, yum</li></ul></li></ul><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ul><li>rpm<ul><li>레드햇 사에서 만들어낸 패키지 관리 툴</li><li>새로운 패키지를 설치하거나 업그레이드, 삭제 시 사용한다</li><li>windows의 setup.exe와 유사하게 만든 프로그램이다</li><li>레드햇 계열의 패키지 파일 확장명은 *.rpm이다</li></ul></li><li>yum<ul><li>네트워크를 통해 기존 rpm 패키지 파일의 업데이트 자동 수행, 새로운 패키지 설치 밎 제거를 수행한다</li><li>RPM의 의존성 문제를 해결하기 위한 유틸리티이다.</li><li>인터넷을 기반으로 설치하므로 네트워크가 정상적으로 연결된 상태여야만 한다.</li><li>YUM은 페도라 22버전 이후부터 YUM의 문제점을 보안한 DNF로 전환되고 있다.</li></ul></li><li>dpkg<ul><li>데비안의 저레벨 패키지 관리 툴이다</li><li>deb 패키지의 설치, 삭제, 정보 제공을 위해 사용된다</li><li>확장자 deb 파일은 데비안 패키지 파일이다.</li><li>패키지 설치 및 제거 시 RPM과 같은 의존성 문제를 일으킨다</li><li>dpkg -s 패키지는 지정된 패키지에 대한 자세한 정보를 나타낸다</li></ul></li><li>apt-get<ul><li>데미안 리눅스에서 소프트웨어 설치와 제거를 위한 패키지 관리 유틸리티</li><li>패키지 관련 정보를 확인하거나 패키지 설치 시 발생할 수 있는 의존성과 충돌 문제를 해결하기 위해 &#x2F;etc&#x2F;apt&#x2F;source.list 파일을 참조한다</li></ul></li></ul><h2 id="소스-파일-설치"><a href="#소스-파일-설치" class="headerlink" title="소스 파일 설치"></a>소스 파일 설치</h2><h3 id="파일-아카이브와-압축"><a href="#파일-아카이브와-압축" class="headerlink" title="파일 아카이브와 압축"></a>파일 아카이브와 압축</h3><h4 id="파일-아카이브"><a href="#파일-아카이브" class="headerlink" title="파일 아카이브"></a>파일 아카이브</h4><ul><li>아카이브는 다수 개의 파일이나 디렉터리를 하나의 파일로 묶는 것이다</li><li>아카이브 파일은 다른 시스템으로 다수 개의 파일을 한 번에 전송하거나 파일 백업용으로 사용한다</li></ul><h4 id="파일-압축과-해제"><a href="#파일-압축과-해제" class="headerlink" title="파일 압축과 해제"></a>파일 압축과 해제</h4><ul><li>대표적인 파일 압축 명은 compress, gzip, bzip2, xz가 있다.</li><li>일반적으로 많이 사용되는 압축 명령어는 gzip과 bzip2이다</li><li>압축률이 가장 낮은 것은 명령어 compress이며, 압축률이 가장 높은 것은 명령어 xz이다</li></ul><h3 id="소스-코드-설치"><a href="#소스-코드-설치" class="headerlink" title="소스 코드 설치"></a>소스 코드 설치</h3><ul><li>소스 코드를 압축 해제 후 컴파일 순서에 따라 프로그램을 설치한다</li><li>컴파일 순서는 설치 파일의 환경설정, 컴파일, 파일 설치이다</li></ul><ol><li>환경설정 : .&#x2F;configure 프로그램 설치 과정에서 필요로 하는 환경파일 makefile 생성</li><li>컴파일 : make makefile을 기반으로 소스 파일을 컴파일</li><li>파일 설치 : make install 컴파일 된 실행 파일을 지정된 속성으로 지정된 디렉터리에 설치</li></ol><h2 id="주변-장치-연결-및-설정"><a href="#주변-장치-연결-및-설정" class="headerlink" title="주변 장치 연결 및 설정"></a>주변 장치 연결 및 설정</h2><h3 id="프린터-인쇄-시스템-설치-및-설정"><a href="#프린터-인쇄-시스템-설치-및-설정" class="headerlink" title="프린터 인쇄 시스템 설치 및 설정"></a>프린터 인쇄 시스템 설치 및 설정</h3><ul><li>LPRng<ul><li>리눅스 초기에 사용되었던 인쇄 시스템</li><li>버클리 프린링 시스템으로 BSD 계열 유닉스에서 사용하기 위해 계발 되었다.</li><li>라인 프린터 데몬 프로토콜을 사용하여 프린터 스폴링과 네트워크 프린터 서버를 지원한다</li><li>LPRng 설정 파일은 &#x2F;etc&#x2F;printcap 이다.</li></ul></li><li>CPUS<ul><li>애플이 개발한 오픈 소스 프린팅 시스템이다</li><li>유닉스 계열 운영체제의 시스템을 프린터 서버로 사용가능하게 해준다</li><li>맼킨토시나 윈도우 등 시중에 시판되는 대부분의 프린트를 지원한다</li><li>HTTP 기반의 IPP(Internet Printing Protocol)를 사용하여 프린터를 웹 기반으로 제어한다</li><li>CPUS 설정 파일은 &#x2F;etc&#x2F;cpus이다.</li><li>사용자 및 호스트 기반의 인증을 제공한다</li><li>CPUS 관련 파일은 cpusd.conf, printer.conf, classes.conf, cpused 등이 있다.</li></ul></li><li>프린터 설정<ul><li>일반적으로 x-windows 상에서 프린터 설정 도구로 프린터를 설치한다.</li><li>로컬 접속으로 프린터를 직접 연결할 수 있다.</li><li>네트워크 프린터를 설정할 경우 5 가지 방법을 제공하고 있다.</li></ul></li></ul><h3 id="사운드-카드-설치-및-설정"><a href="#사운드-카드-설치-및-설정" class="headerlink" title="사운드 카드 설치 및 설정"></a>사운드 카드 설치 및 설정</h3><h4 id="OSS-open-sound-system"><a href="#OSS-open-sound-system" class="headerlink" title="OSS(open sound system)"></a>OSS(open sound system)</h4><ul><li>리눅스 및 유닉스 계열 운영체제에서 사운드를 만들고 캡쳐하는 인터페이스이다</li><li>표준 유닉스 장치 시스템 콜에 기반을 둔 것이다</li><li>현재 리눅스 커뮤니티에서는 ALSA로 대체 되었다.</li></ul><h4 id="ALSA-Advanced-Linux-Sound-Architecture"><a href="#ALSA-Advanced-Linux-Sound-Architecture" class="headerlink" title="ALSA(Advanced Linux Sound Architecture)"></a>ALSA(Advanced Linux Sound Architecture)</h4><ul><li>사운드 카드용 장치 드라이버를 제공하기 위한 리눅스 커널 요소</li><li>GPL 및 LGPL 라이선스 기반으로 배포 되고 있다.</li><li>사운드 카드를 자동으로 구성하고 시스템에 여러 개의 사운드 장치를 관리하는 것이 목적이다</li><li>OSS의 지원을 받아서 하드웨어 기반 미디합성, 다중 채널 하드웨어 믹싱, 전이중 통신, 다중 프로세서와의 조화, 스레드 안정장치 드라이브 등의 기능을 지원한다</li><li>연결 설정 파일은 &#x2F;etc&#x2F;asound.state이다</li></ul><h3 id="스캐너-설치-및-설정"><a href="#스캐너-설치-및-설정" class="headerlink" title="스캐너 설치 및 설정"></a>스캐너 설치 및 설정</h3><h4 id="SANE-Scanner-Access-Now-Easy"><a href="#SANE-Scanner-Access-Now-Easy" class="headerlink" title="SANE(Scanner Access Now Easy)"></a>SANE(Scanner Access Now Easy)</h4><ul><li>평판 스캐너, 핸드 스캐너, 비디오 캠 등 이미지 관련 하드웨어를 제어하는 api이다.</li><li>GPL 라이선스 리눅스 및 유닉스 계열, OS2, windows 지원한다</li></ul><h4 id="XSANE-X-based-interface-for-the-SANE"><a href="#XSANE-X-based-interface-for-the-SANE" class="headerlink" title="XSANE(X based interface for the SANE)"></a>XSANE(X based interface for the SANE)</h4><ul><li>SANE 스캐너 인터페이스를 이용하여 X-windows 기반의 스캐너 프로그램이다</li><li>스캐너, 디지털 카메라, 디지털 캠 등 다양한 장치에서 사용이 가능하다</li><li>스캔 작업뿐만 아니라 캡쳐한 이미지에 수정 작업을 할 수 있다.</li><li>GPL 라이선스, 리눅스 및 유닉스 계열, OS2, Windows도 지원한다</li></ul><h2 id="주변-장치-활용"><a href="#주변-장치-활용" class="headerlink" title="주변 장치 활용"></a>주변 장치 활용</h2><h3 id="프린터-설치-및-설정"><a href="#프린터-설치-및-설정" class="headerlink" title="프린터 설치 및 설정"></a>프린터 설치 및 설정</h3><ul><li>BSD 계열 프린터 명령어들<ul><li>lpr<ul><li>프린터 작업을 요청한다</li></ul></li><li>lpq<ul><li>프린터 큐에 있는 작업 목록을 출력한다</li></ul></li><li>lprm<ul><li>프린터 큐에 대기 중인 작업을 삭제한다</li><li>취소할 프린트 작업 번호를 입력한다</li></ul></li><li>lpc<ul><li>라인 프린터 컨트롤 프로그램</li></ul></li></ul></li><li>System V 계열 프린터 명령어들<ul><li>lp<ul><li>프린터 작업 요청(명령어 lpr과 유사한 기능)을 한다.</li></ul></li><li>lpstat<ul><li>프린터 큐의 상태를 확인한다</li></ul></li><li>cancel<ul><li>프린트 작업을 취소한다</li><li>취소할 요청 ID를 lpstat으로 확인 후 삭제한다</li></ul></li></ul></li></ul><h2 id="사운드-카드-관련-명령어"><a href="#사운드-카드-관련-명령어" class="headerlink" title="사운드 카드 관련 명령어"></a>사운드 카드 관련 명령어</h2><ul><li>alsactl<ul><li>사운드 카드를 제어한다</li></ul></li><li>alsamixer<ul><li>커서 라이브러리 기반의 오디오 프로그램이다</li></ul></li><li>cdparanoia<ul><li>오디오 cd로부터 음악 파일을 추출시 사용가능하다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>리눅스 마스터 일반</title>
      <link href="/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%EC%9D%BC%EB%B0%98/"/>
      <url>/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%EC%9D%BC%EB%B0%98/</url>
      
        <content type="html"><![CDATA[<h1 id="어쩌다-하게-됬는가"><a href="#어쩌다-하게-됬는가" class="headerlink" title="어쩌다 하게 됬는가?"></a>어쩌다 하게 됬는가?</h1><p>2월부터 준비하던 기사 시험이 2번인가? 미뤄지다가 그대로 4월 말이 되어 취소되서 공부한게 날라가버렸다.<br>그래서 뭐라도 해야겠다는 생각에 일단 리눅스 마스터가 떠올라서 기간을 봤더니 아쉽게도 2급 밖에 볼 수 없어서 이거라도 준비해야겠다란 생각에 준비하게 됬다.</p><h1 id="Linux-Master-요약"><a href="#Linux-Master-요약" class="headerlink" title="Linux Master 요약"></a>Linux Master 요약</h1><h2 id="리눅스의-개요"><a href="#리눅스의-개요" class="headerlink" title="리눅스의 개요"></a>리눅스의 개요</h2><h3 id="리눅스의-특징-및-장단점"><a href="#리눅스의-특징-및-장단점" class="headerlink" title="리눅스의 특징 및 장단점"></a>리눅스의 특징 및 장단점</h3><pre><code>* 오픈 소스* 멀티 유저 멀티테스킹 운영체제이다* 다중 스레드를 지원하는 네트워크 운영체제* 여러 종류의 파일 시스템을 지원하는 운영체제</code></pre><h3 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h3><pre><code>* 리눅스는 유닉스와 완벽 호환 가능* 리눅스는 pc용 운영체제보다 안정적* 하드웨어 기능을 효과적으로 사용 가능* 공개 운영체제이기 때문에 문제 발생시 기술지원 받기 어렵다</code></pre><h3 id="리눅스-디렉터리-종류와-특징"><a href="#리눅스-디렉터리-종류와-특징" class="headerlink" title="리눅스 디렉터리 종류와 특징"></a>리눅스 디렉터리 종류와 특징</h3><ul><li>&#x2F;<ul><li>최상위 디렉터리, 루트 디렉터리</li><li>모든 디렉터리의 출발점, 다른 시스템과의 연결점</li></ul></li><li>&#x2F;boot<ul><li>부트 디렉터리로 부팅 시 커널 이미지의 부팅 정보 저장 파일</li></ul></li><li>&#x2F;proc<ul><li>시스템 정보 디렉터리</li><li>커널 기능 제어</li><li>현제 실행되는 프로세스 및 장치,하드웨어 정보 저장</li></ul></li><li>&#x2F;lib<ul><li>공유 라이브러리 디렉터리</li><li>커널 모듈 파일들과 프로그램 시행을 지원해 주는 라이브러리 저장</li></ul></li><li>&#x2F;bin<ul><li>기본적인 명령어가 저장된 디렉터리</li><li>root 사용자와 일반 사용자가 함께 사용할 수 있는 명령어의 디렉터리</li></ul></li><li>&#x2F;dev<ul><li>시스템 디바이스 파일들을 저장하는 디렉터리</li><li>하드디스크 장치 파일, C-ROM 장치 파일 같은 파일 저장</li></ul></li><li>&#x2F;etc<ul><li>시스템 환경 설정 파일 저장 디렉터리</li></ul></li><li>&#x2F;root<ul><li>시스템 관리자용 홈 디렉터리</li></ul></li><li>&#x2F;sbin<ul><li>관리자용 시스템 표준 명 및 시스템 관리와 관련된 실행 명령어 저장</li></ul></li><li>&#x2F;usr<ul><li>사용자 디렉터리</li><li>사용자 데이터나 애플리케이션 저장</li></ul></li><li>&#x2F;home<ul><li>사용자 계정 디렉터리</li><li>계정들의 홈 디렉터리 위치</li></ul></li><li>&#x2F;var<ul><li>가변 자료 저장 디렉터리</li><li>로그 파일이나 메일 데이터 저장</li></ul></li><li>&#x2F;tmp<ul><li>임시 파일 저장</li><li>모든 사용자에 대해서 읽기와 쓰기 허용</li><li>시티키 비트 설정으로 파일의 소유자만이 자신의 소유 파일을 지울 수 있음</li></ul></li><li>&#x2F;mnt<ul><li>파일 시스템을 일시적으로 마운트 할 때 사용</li></ul></li><li>&#x2F;lost+found<ul><li>결함이 있는 파일에 대한 정보가 저장되는 디렉터리</li></ul></li></ul><h3 id="리눅스-배포판"><a href="#리눅스-배포판" class="headerlink" title="리눅스 배포판"></a>리눅스 배포판</h3><ul><li>슬렉웨어 리눅스<ul><li>배포판 가운데 가장 먼저 대중화된 배포판</li></ul></li><li>데비안<ul><li>데비안 프로젝트에서 만들어 배포하는 공개 운영체제</li><li>GNU의 공식적인 후원을 받고 있는 유일한 배포판</li></ul></li><li>우분투<ul><li>데비안 리눅스에 기초한 운영체제</li></ul></li><li>레드햇<ul><li>레드햇사가 개발하던 리눅스 배포판</li></ul></li><li>페도라<ul><li>리눅스 커널에 기반한 운영체제와 레드햇의 후원과 개발 공동체의 지원 아래 개발된 배포판</li></ul></li><li>CentosOS<ul><li>업스트림 소스인 레드햇 엔터프라이즈 리눅스와 완벽하게 호환되는 무료 기업용 컴퓨팅 운영체제</li></ul></li><li>수세<ul><li>독일에서 출시된 배포판</li><li>유럽에서 인기를 누리고 있다.</li></ul></li></ul><h2 id="리눅스-라이센스"><a href="#리눅스-라이센스" class="headerlink" title="리눅스 라이센스"></a>리눅스 라이센스</h2><ul><li>GNU<ul><li>GNU는 유닉스가 아니다</li><li>GNU GPL<ul><li>GPL은 자유 소프트웨어 재단에서 만든 FREE 소프트웨어 라이센스</li></ul></li><li>GNU LGP<ul><li>LGPL은 GPL 보다 훨씬 완화된 조건의 공개 소프트웨어 라이센스</li><li>LGPL 라이센스 프로그램의 경우 프로그램 소스코드를 공개하지 않아도 된다</li></ul></li></ul></li><li>BSD 라이센스<ul><li>버클리 대학 자유 소프트웨어 저작권의 한 가지이다.</li></ul></li><li>아파치 라이센스<ul><li>아파치 소프트웨어 재단에서 자체적으로 만든 소프트웨어 라이센스 규정</li></ul></li><li>MIT 라이센스<ul><li>BSD 라이센스를 기초로 작성된 BSD 계열 라이센스 중의 하나</li></ul></li><li>MPL<ul><li>소스코드와 실행파일의 저작권을 분리했다.</li></ul></li><li>자유 소프트웨어 재단(FSF)</li><li>오픈 소스 소프트웨어<ul><li>FSF 대신 1998년 부터 오픈 소스 소프트웨어라는 단어 사용</li></ul></li></ul><h2 id="기본-설치-및-유형"><a href="#기본-설치-및-유형" class="headerlink" title="기본 설치 및 유형"></a>기본 설치 및 유형</h2><h3 id="리눅스-설치-개요"><a href="#리눅스-설치-개요" class="headerlink" title="리눅스 설치 개요"></a>리눅스 설치 개요</h3><ul><li>리눅스 배포판마다 설치환경과 설치 과정이 다르다<ul><li>패키지에 따라 데스크탑형, 서버형, 사용자 정의형으로 구분</li></ul></li><li>멀티 부팅 시스템을 만든다면, 현재 운영체제의 배포 미디어를 가지고 있어야한다.</li><li>부팅 드라이브를 다시 파티션하는 경우<ul><li>운영체제의 부트로드 재설치 가능성 존재</li><li>운영체제 전체를 해당 파티션에 다시 설치해야 할 수 도 있음</li></ul></li></ul><h3 id="리눅스-설치를-위한-하드웨어-정보-파악"><a href="#리눅스-설치를-위한-하드웨어-정보-파악" class="headerlink" title="리눅스 설치를 위한 하드웨어 정보 파악"></a>리눅스 설치를 위한 하드웨어 정보 파악</h3><ul><li>하드웨어 정보</li><li>하드웨어 호환성</li><li>네트워크 설정</li></ul><h2 id="파티션"><a href="#파티션" class="headerlink" title="파티션"></a>파티션</h2><h3 id="파티션이란"><a href="#파티션이란" class="headerlink" title="파티션이란?"></a>파티션이란?</h3><ul><li>파티션이란, 하나의 물리적 디스크를 여러 개의 논리적인 디스크로 분할하는 것</li><li>파티션은 주 파티션, 확장 파티션, 논리 파티션, 스왑 파티션(?)으로 구분한다</li></ul><h3 id="파티션의-종류"><a href="#파티션의-종류" class="headerlink" title="파티션의 종류"></a>파티션의 종류</h3><ol><li>주 파티션<ul><li>부팅 가능한 기본 파티션</li><li>하나의 하드 디스크에 최대 4개의 주 파티션 분할 가능</li><li>4개 이상으로 파티션을 사용해야 할 때<ul><li>하나의 확장 파티션을 설정하여 확장 파티션 안에 여러 개의 논리 파티션을 분할</li></ul></li></ul></li><li>확장 파티션<ul><li>주 파티션 내에 생성, 하나의 물리적 디스크에 1개만 생성</li><li>파티션 번호는 1~4번이 할당</li><li>데이터 저장 영역을 위한 것이 아니라 논리 파티션 생성</li></ul></li><li>논리 파티션<ul><li>확장 파티션 안에 생성되는 파티션</li><li>논리 파티션은 12개 이상 생성하지 않는 것을 권고</li><li>5번 이후의 번호가 붙여짐</li></ul></li><li>스왑 파티션<ul><li>하드 디스크의 일부를 메모리처럼 사용하는 영역</li><li>주 파티션 또는 노리 파티션에 생성</li><li>프로그램 실행시 부족한 메모리 용량을 하드디스크로 대신 하는것</li><li>리눅스 설치시 반드시 설치되어야 하는 영역</li><li>스왑 영역의 크기는 메모리의 2배를 설정하도록 권고</li></ul></li></ol><h3 id="디스크와-장치명"><a href="#디스크와-장치명" class="headerlink" title="디스크와 장치명"></a>디스크와 장치명</h3><ul><li>분할된 파티션은 디스크의 장치 파일명 뒤에 숫자를 붙인다</li><li>리눅스에서 파티션을 만들고 마운트할 때 지정된 디바이스명을 사용한다</li></ul><h3 id="파일-시스템"><a href="#파일-시스템" class="headerlink" title="파일 시스템"></a>파일 시스템</h3><ul><li>운영체제가 파일을 시스템의 디스크 파티션사아에 구현하는 방식</li><li>일정한 규칙을 가지고 파일을 저장하도록 규칙 방식을 제시</li><li>파티션에 파일 시스템이 없으면, 파일 시스템 생성을 거쳐야 사용 가능</li><li>리눅스는 고유 파일 시스템 외에 다양한 파일 시스템을 지원하고 있다.</li></ul><h3 id="LVM-Logical-Volumn-Manager"><a href="#LVM-Logical-Volumn-Manager" class="headerlink" title="LVM(Logical Volumn Manager)"></a>LVM(Logical Volumn Manager)</h3><ul><li>여러 개의 하드 디스크를 합쳐서 사용하는 기술로 한 개의 파일 시스템을 사용한다.</li><li>작은 용량의 하드디스크 여러 개를 큰 용량의 하나의 하드 디스크 처럼 사용</li><li>서버를 운영하며 대용량의 별도 저장 공간이 필요할 때 활용</li><li>다수의 디스크를 묶어 사용함으로써 파티션의 크기를 줄이거나 늘릴 수 있다.</li></ul><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><ul><li>RAID는 복수 배열 독립 디스크의 약자이다.</li><li>여러 개의 물리적 디스크를 하나의 논리적 디스크로 인식하여 작동하게 하는 기술</li><li>여러 개의 하드디스크에 일부 중복된 데이터를 나눠서 저장하는 기술</li><li>하드웨어 RAID, 소프트웨어 RAID로 나뉜다.</li><li>데이터를 저장하는 다양한 방법이 존재, 이 방법들을 레벨이라고 한다.</li><li>각 레벨의 장점을 합친 RAID 구성으로 대표적으로 RAID 0+1과 RAID 1+0이 있다.</li></ul><h3 id="파티션-분할"><a href="#파티션-분할" class="headerlink" title="파티션 분할"></a>파티션 분할</h3><ul><li>fdisk<ul><li>파티션 테이블을 관리하는 명령</li><li>디스크 파티션을 생성 수정 삭제 할 수 있는 일종의 유틸리티</li></ul></li></ul><h2 id="부트-매니저"><a href="#부트-매니저" class="headerlink" title="부트 매니저"></a>부트 매니저</h2><h3 id="부트로드"><a href="#부트로드" class="headerlink" title="부트로드"></a>부트로드</h3><ul><li>부트스크랩 로드의 준말<ul><li>디스크나 플래시에 저장된 운영체제를 읽어 주기억장치에 적재해 주는 프로그램</li></ul></li><li>운영체제 시작전 미리 실행<ul><li>커널의 정상 작동을 위한 모든 작업을 마무리하고 최종적으로 운영체제를 시동시키기 위한 프로그램</li></ul></li><li>임베디드 시스템 부트로더<ul><li>pc의 bios와 os loader의 기능을 수행하는 프로그램</li><li>시스템 부팅할 때 가장 먼저 수행된다.</li></ul></li><li>운영체제 실행에 필요한 환경 설정 및 운영체제 이미지를 메모리에 복사</li><li>부트매니저라고 부르기도 함<ul><li>크기는 512바이트</li><li>하드디스크의 첫번째 세거인 MBR에 위치</li></ul></li><li>주 파티션마다 부트섹터가 할당된다</li><li>분할된 주 파티션들은 자신의 부트 레코드를 MBR에 기록하여 실행</li><li>한 컴퓨터에 다수의 운영체제가 설치되어 있는 경우 작업 운영체제를 선택하여 부팅할 수 있게한다.</li></ul><h3 id="런레벨"><a href="#런레벨" class="headerlink" title="런레벨"></a>런레벨</h3><ul><li>런레벨에 따라 작동하는 서비스를 조정 가능</li><li>런레벨은 0 ~ 6까치 총 7가지</li><li>리눅스 가동시 특정 모드의 레벨을 default로 하고 싶은 경우<ul><li>&#x2F;etc&#x2F;inittab에서 설정</li><li>&#x2F;etc&#x2F;inittab 파일 형식은 ‘코드 런레벨:행동:명령어’</li></ul></li><li>현재 실행되는 런레벨을 확인하는 명령어는 runlevel</li></ul><h3 id="로그인과-로그아웃"><a href="#로그인과-로그아웃" class="headerlink" title="로그인과 로그아웃"></a>로그인과 로그아웃</h3><h4 id="로그인"><a href="#로그인" class="headerlink" title="로그인"></a>로그인</h4><ul><li>리눅스는 x윈도우상에서의 로그인&#x2F;로그아웃과 콘솔상에서의 로그인&#x2F;로그아웃이 있음</li><li>로그인 과정<ol><li>입력한 패스워드와 파일 &#x2F;etc&#x2F;passwd 필드 비교</li><li>셀 설정 파일 실행</li><li>로그인 쉘 실행</li></ol></li></ul><h4 id="로그아웃"><a href="#로그아웃" class="headerlink" title="로그아웃"></a>로그아웃</h4><ul><li>로그아웃은 logout, exit 또는 조합키 Ctrl+D</li><li>관리자는 일정시간 동안 작업을 수행하지 않는 모든 사용자들을 강제로 로그아웃할 수 있다.</li></ul><h2 id="디렉터리-및-파일"><a href="#디렉터리-및-파일" class="headerlink" title="디렉터리 및 파일"></a>디렉터리 및 파일</h2><h3 id="리다이렉션과-정규-표현식"><a href="#리다이렉션과-정규-표현식" class="headerlink" title="리다이렉션과 정규 표현식"></a>리다이렉션과 정규 표현식</h3><h4 id="리다이렉션"><a href="#리다이렉션" class="headerlink" title="리다이렉션"></a>리다이렉션</h4><ul><li>표준 입력과 표준 출력의 방향을 재지정하는 것</li><li>표준 입력&#x2F;출력&#x2F;에러가 화면이 아닌 파일로 대체<ul><li>모니터로 출력이 파일로 재지정</li></ul></li><li>표준 입력 장치는 키보드, 표준 출력 장치는 모니터,표준 에러 장치는 모니터</li></ul><h4 id="정규퓨현식"><a href="#정규퓨현식" class="headerlink" title="정규퓨현식"></a>정규퓨현식</h4><ul><li>^ : 라인의 첫 글자</li><li>$ : 라인의 끝 글자</li><li><strong>.</strong> : 한 글자</li><li><strong>*</strong> : * 기호 바로 이전의 글자는 정규 표현식이 0 회 이상 반복</li><li>[] : 대체 글자 목록을 []에 나열</li><li>대체 못할 글자 목록을 [^]에 나열</li><li><strong>+</strong> : + 기호 바로 이전 글자나 정규 표현식이 1회 이상 반복</li><li>? : ? 기호 바로 이전 글자나 정규 표현식이 없거나 1회만 존재</li><li>() : 부분 정규 표현식의 시작과 끝을 표시</li><li><strong>|</strong> : | 로 구분된 단어들 중 최소 하나 존재</li><li>{m,n} : {} 기호 바로 이전 글자나 정규 표현식이 m개 이상 n개 이하 반복</li></ul><h4 id="파이프"><a href="#파이프" class="headerlink" title="파이프"></a>파이프</h4><ul><li><p>둘 이상의 명령을 함께 묶어 출력 결과를 다른 프로그램이 입력으로 전환하는 기능</p></li><li><p>현재 명령의 표준 출력을 다음 명령의 표준 입력으로 사용하는 것이다.</p></li><li><p>명령어와 명령어의 연결 <strong>|</strong> 기호를 사용한다.</p><ul><li>명령어1의 출력결과는 명령어2의 입력으로 처리된다.</li></ul></li><li><p>더 이상 처리할 명령어가 없으면 표준 출력 장치인 화면으로 출력한다.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>리눅스 마스터 2급 (활용)</title>
      <link href="/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%ED%99%9C%EC%9A%A9/"/>
      <url>/2022/03/10/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0_%ED%99%9C%EC%9A%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="x-windows-개념-및-사용법"><a href="#x-windows-개념-및-사용법" class="headerlink" title="x-windows 개념 및 사용법"></a>x-windows 개념 및 사용법</h2><h3 id="X-window의-특징과-구성-요소"><a href="#X-window의-특징과-구성-요소" class="headerlink" title="X-window의 특징과 구성 요소"></a>X-window의 특징과 구성 요소</h3><h4 id="개념과-특징"><a href="#개념과-특징" class="headerlink" title="개념과 특징"></a>개념과 특징</h4><ul><li>리눅스 환경의 각종 애플리케이션과 유틸리티에 대해 그래픽 사용자 인터페이스를 제공한다</li><li>플랫폼과 독립적으로 작동하는 그래픽 시스템</li><li>x-윈도우sms x11,X, X Windows System이라 한다</li><li>네트워크 기반의 그래픽 환경을 지원한다</li><li>이기종 시스템 사이에서도 사용 가능하다</li><li>스크롤바, 아이콘, 색상 등 그래픽 환경 자원들이 특정 형태로 정의되어 있지 않다</li><li>디스플레이 장치에 의존적이지 않으며 원하는 인터페이스를 만들 수 윘다.</li><li>x-윈도우는 네트워크 프로토콜 기반의 클라이언트&#x2F;서버 시스템이다</li><li>서버 프로그램과 클라이언트 프로그램으로 나누어 작동한다</li><li>서버는 클라이언트들의 디스플레이에 관한 저근 허용, 클라이언트 간의 자원 공유, 네트워크 메시지 전달, 클라이언트와 입출력 기기와의 중계를 담당</li><li>클라이언트는 애플리케이션으로 X 서버가 제공하는 기능들을 이용한다</li><li>오픈 데스크톱 환경으로 KDE, GNMOE, XFCE 등이 있다</li></ul><h4 id="구성-요소의-종류"><a href="#구성-요소의-종류" class="headerlink" title="구성 요소의 종류"></a>구성 요소의 종류</h4><ul><li>Xprotocol</li><li>Xlib</li><li>XCB</li><li>Xtoolkit</li><li>XFree86</li><li>XF86Config</li></ul><h3 id="x-윈도우-설정과-실행"><a href="#x-윈도우-설정과-실행" class="headerlink" title="x-윈도우 설정과 실행"></a>x-윈도우 설정과 실행</h3><ul><li>파일 &#x2F;etc&#x2F;inittab<ul><li>init 프로세스가 읽는 파일로, init 프로세스가 무엇을 해야 할 것인가를 결정한다</li><li>리눅스 사용 환경을 초기화한다</li></ul></li><li>x-window 실행<ul><li>그래픽 환경이 아닌 터미널 윈도우로 로그인한 경우에는 몇 개의 프로그램을 실행해야한다</li><li>터미널 윈도우의 명령어 프롬프트 상에서 다음 명령어를 실행시켜야한다</li><li>startx는 X-윈도우를 실행하는 스크립트로 시스템 환경을 초기화하고 xinit을 호출한다</li><li>startx 실행 시 인자값을 xinit에 전달하는 옵션은 ‘–’ 이다.</li></ul></li><li>환경 변수 DISPLAY<ul><li>환경 변수는 프로세스가 컴퓨터에 동작하는 방식에 영향을 주는 동적인 값이다</li><li>쉘에서 정의 되고 실행하는 동안 프로그램에 필요한 변수이다</li><li>환경 변수 DISAPLY는 현재 X-윈도우 Display 위치를 지정할 수 있다.</li><li>형식 : export DISPLAY&#x3D;IP 주소: 디스플레이 번호. 스크린 번호</li></ul></li></ul><h3 id="윈도우-매니저와-데스크톱-환경"><a href="#윈도우-매니저와-데스크톱-환경" class="headerlink" title="윈도우 매니저와 데스크톱 환경"></a>윈도우 매니저와 데스크톱 환경</h3><h4 id="윈도우-매니저"><a href="#윈도우-매니저" class="headerlink" title="윈도우 매니저"></a>윈도우 매니저</h4><ul><li>윈도우 매니저는 X-windows 상에서 창의 배치와 표현을 담당하는 시스템 프로그램이다</li><li>창 열기와 닫기, 창의 생성 위치, 창 크기 조정, 창의 외양과 테두리를 변화시킬 수 있다.</li><li>라이브러리는 Xlib와 XCB를 사용한다</li><li>윈도우 매니저의 대표적인 종류로는 fvwm, twm, mw, windowsMaker, AfterStep 등이 있다.</li></ul><h4 id="데스크톱-환경"><a href="#데스크톱-환경" class="headerlink" title="데스크톱 환경"></a>데스크톱 환경</h4><ul><li>gui 사용자에게 제공하는 인터페이스 스타일로 데스크톱 관리자라고도 한다</li><li>윈도우 매니저, 파일 관리자, 도움말 제어판 등 다양한 도구를 제고앟는 패키지 형태의 프로그램이다</li><li>아이콘, 창, 도구모음, 폴더, 배경화면, 데스크톱 위젯도 제공한다</li><li>드로그 앤 드롭과 프로세스 간의 통보 기능을 지원한다</li><li>대표적인 데스크톱 환경에는 KDE, GNOME, LXDE, Xfce 등이 있다.</li></ul><h4 id="디스플레이-매니저"><a href="#디스플레이-매니저" class="headerlink" title="디스플레이 매니저"></a>디스플레이 매니저</h4><ul><li>X window system 상에서 작동하는 프로그램이다</li><li>디스플레이 매니저 종류들로는 XDM, GDM, KDM 등이 있다.</li><li>로컬 또는 리모트 컴퓨터의 X server의 접속과 세션 시작을 담당한다</li><li>사용자에게 그래픽 로그인 화면을 띄워주고 아이디와 패스워드를 입력받아 인증을 진행하고 인증이 정상적으로 완료되면 세션을 시작한다</li></ul><h2 id="X-윈도우-활용"><a href="#X-윈도우-활용" class="headerlink" title="X-윈도우 활용"></a>X-윈도우 활용</h2><h3 id="원격지에서-X-클라이언트-이용"><a href="#원격지에서-X-클라이언트-이용" class="headerlink" title="원격지에서 X 클라이언트 이용"></a>원격지에서 X 클라이언트 이용</h3><ul><li>xhost<ul><li>명령어 xhost는 X 서버에 접속 할 수 있는 클라이언트를 지정하거나 해제</li><li>X 서버에게 디스플레이를 요청 시 해당 요청에 대해 허용 여부를 호스트 단위로 제어한다</li><li>xhost [+ - ][ip | 도메인 명]</li><li>환경 변수 DISPLAY로 X 서버 프로그램이 실행될 때 표시되는 클라이언트 주소를 지정한다</li></ul></li><li>xauth<ul><li>.Xauthority 파일의 쿠키 내용을 추가, 삭제, 리스트를 출력하는 유틸리티</li><li>xhost가 호스트 기반 인증 방식을 사용하기 위해 필요한 유틸리티라면 xauth는 MMC 방식의 인증 방식을 사용하기 위한 필수 유틸리티이다</li><li>원격지에서 저속하는 X클라이언트를 허가할 때 IP 주소나 호스트명이 아닌 X-윈도우 실행 시에 생성되는 키 값으로 인증할 때 사용한다</li><li>사용자 인증 기반을 지원하기 위해 각 사용자에게 네트워크화 된 홈 디렉터리에 파일 $HOME&#x2F;.Xauthority에 대해 읽기 및 쓰기 권한이 있어야한다.</li></ul></li></ul><h3 id="X-윈도우-응용-프로그램"><a href="#X-윈도우-응용-프로그램" class="headerlink" title="X-윈도우 응용 프로그램"></a>X-윈도우 응용 프로그램</h3><h4 id="오피스"><a href="#오피스" class="headerlink" title="오피스"></a>오피스</h4><ul><li>libreoffice<ul><li>오피스 프로그램 패키지</li></ul></li><li>gedit<ul><li>텍스트 편집 프로그램</li></ul></li><li>kwrite<ul><li>KDE 기반의 텍스트 편집기</li></ul></li></ul><h4 id="그래픽"><a href="#그래픽" class="headerlink" title="그래픽"></a>그래픽</h4><ul><li>GIMP<ul><li>이미지 편집 프로그램</li></ul></li><li>ImageMagick<ul><li>이미지 생성 및 편집을 지원하는 프로그램</li></ul></li><li>eog<ul><li>GNOM의 이미지 뷰어 프로그램</li></ul></li><li>kolourpaint<ul><li>ubuntu 이미지 편집 프로그램</li></ul></li><li>gThumb<ul><li>GNOME 데스크톱 이미지 뷰어 프로그램</li></ul></li><li>gwenview<ul><li>KDE의 기본 이미지 뷰어</li></ul></li></ul><h4 id="멀티미디어"><a href="#멀티미디어" class="headerlink" title="멀티미디어"></a>멀티미디어</h4><ul><li>Totem<ul><li>GNOM 기반의 사운드 및 비디오 재생 프로그램</li></ul></li><li>RYTHMBOX<ul><li>통합형 음악 관리 프로그램</li></ul></li><li>CHEESE<ul><li>GNOME 기반의 카메라 동영상 프로그램</li></ul></li></ul><h4 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h4><ul><li>Eclipse<ul><li>통합 개발환경으로 자바를 비롯한 다양한 언어를 지원</li></ul></li></ul><h4 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h4><ul><li>Dolphine<ul><li>KDE용 파일 관리자</li></ul></li><li>KSnapshot<ul><li>스크린샷 프로그램</li></ul></li></ul><h2 id="인터넷-활용"><a href="#인터넷-활용" class="headerlink" title="인터넷 활용"></a>인터넷 활용</h2><h3 id="네트워크-분류"><a href="#네트워크-분류" class="headerlink" title="네트워크 분류"></a>네트워크 분류</h3><ul><li>lan(local area network)<ul><li>근거리 통신망을 연결하는 네트워크</li><li>학교나 회사 등 가까운 지역을 묶는 소규모 네트워크</li></ul></li><li>man(metropolice area network)<ul><li>도시권 통신망을 연결하는 네트워크</li><li>LAN과 WAN의 중간크기이다</li></ul></li><li>wan(wide area network)<ul><li>국가, 대륙 등과 같이 넓은 지역을 연결하는 프로그램</li><li>거리의 제한은 없으나 다양한 경로를 경유해 도달하므로 속도가 느리고 전송 에러율도 높다</li></ul></li><li>san(storage area network)<ul><li>스토리지를 위해 고안된 스토리지 전용 고속 네트워크</li><li>파이버 채널을 이용하여 구성되는 저장장치 네트워크</li><li>호스트 컴퓨터의 종류에 구애받지 않고 별도의 연결된 저장장치 사이에 대용량의 데이터를 전송시킬 수 있는 고속 네트워크</li><li>서버가 클라이언트로부터 받은 파일 I&#x2F;O 요청을 직접 블록 I&#x2F;O로 전환하여 SAN에 연결된 스토리지로 저장한다</li></ul></li></ul><h3 id="네트워크의-개요"><a href="#네트워크의-개요" class="headerlink" title="네트워크의 개요"></a>네트워크의 개요</h3><ul><li><p>LAN 토폴로지</p><ul><li>토폴로지는 호스트 및 장비들의 물리적인 배치 형태이다</li><li>토폴로지는 성형 망형 버스형 링형 트리형 등이 있다</li></ul></li><li><p>성형</p><ul><li>중앙 컴퓨터에 여러 대의 컴퓨터가 허브 또는 스위치와 같은 장비로 연결</li><li>중앙 집중식 형태로 네트워크 확장에 용이</li><li>고속의 대규모 네트워크에 적합</li><li>관리하는 중앙 컴퓨터 고장시 전체 네트워크 사용 불가능</li></ul></li><li><p>망형</p><ul><li>모든 노드가 서로 일대일로 연결된 형태</li><li>대량의 데이터를 송수신할 경우 적합</li><li>장애 발생 시 다른 시스템에 영향이 적고 우회할 수 있는 경로가 존재하여 가장 신뢰성이 높은 방식</li><li>회선 구축 비용이 많이 듬</li></ul></li><li><p>버스형</p><ul><li>하나의 통신회선에 여러 컴퓨터를 연결해서 전송</li><li>연결된 컴퓨터 수에 따라 네트워크 성능이 변동</li><li>단말기 추가 및 제거가 용이하며 설치 비용이 저렴</li><li>노드 수 증가시 트래픽 증가로 병목현상 발생, 네트워크 성능 저하 초래</li><li>문제가 발생한 노드의 위치를 파악하기 어려움</li></ul></li><li><p>링형</p><ul><li>각 노드가 좌우의 인접한 노드와 연결되어 원형을 이룬 형태</li><li>앞의 컴퓨터로부터 수신한 내용을 다음 컴퓨터로 재전송하는 방법</li><li>토큰 패싱이라는 방법을 통해 데이터 전송</li><li>고속 네트워크로 자주 네트워크 환경이 바뀌지 안하느 ㄴ경우 구성</li><li>분산제어와 검사 및 회복이 가능</li><li>네트워크 전송상의 충돌이 없고 노드 숫자가 증가하더라도 망 성능의 저하가 저음</li><li>논리적인 순환형 토폴로지로 하나의 노드 장애가 전체 토폴로지에 여향</li><li>노드의 추가 및 삭제가 용이하지 않음</li></ul></li><li><p>트리형</p><ul><li>버스형과 성형 토폴로지의 확장 형태</li><li>백본과 같은 공통 배선에 적절한 분기장치를 사용하여 링크를 덧붙여 나갈 수 있는 구조</li><li>트래픽 양 증가 시 병목 현상의 가능성 증대</li></ul></li><li><p>매체 접근 제어 방식</p><ul><li>CSMA&#x2F;CD<ul><li>단말기가 전송로의 신호 유무를 조사하고 다른 단말기가 신호를 송출하는지 확인</li></ul></li><li>토큰 패싱<ul><li>토큰의 흐름에 의해 전송 순서가 결정된다</li><li>토큰 패싱은 free token과 busy token을 이용하여 매체 접근을 제어한다</li></ul></li></ul></li></ul><h2 id="네트워크-장비"><a href="#네트워크-장비" class="headerlink" title="네트워크 장비"></a>네트워크 장비</h2><ul><li>케이블<ul><li>보호 외피나 외장 안에 두 개 이상의 전선이나 광섬유로 묶여 있는 것</li><li>TP 케이블, 동축 케이블, 광섬유 케이블 등을 사용할 수 있다.</li></ul></li><li>리피터<ul><li>신호의 재생 및 증폭기능을 수행하여 물리적인 거리를 확장 시킴</li></ul></li><li>허브<ul><li>신호를 노드에 전달해주는 장비이다</li><li>네트워크 확장, 다른 허브와의 상호 연결, 신호의 증폭 등의 기능을 제공한다</li></ul></li><li>LAN 카드<ul><li>네트워크에 접속할 수 있도록 컴퓨터 내에 설치되는 확장 카드이다</li><li>전기신호로부터 데이터를 송신하고 변환하며, 데이터를 전기신호로 변환하여 송신한다</li><li>MAC 주소를 이용하여 데이터의 수신 여부를 판별한다</li></ul></li><li>브릿지<ul><li>모든 수신 프레임을 일단 버퍼에 저장하고, 주소에 따라 목적지 포트로 프레임을 전달하는 장비이다</li><li>큰 네트워크를 단일 네트워크 상의 트래픽 감소 등과 같은 작고 관리하기 쉬운 Segment로 나눌 필요가 있을 때 사용한다</li><li>전기적으로 신호의 재생 및 패킷의 송수신 어드레스를 분석하여 패킷의 통과 여부를 판정하는 필터링을 작용한다</li></ul></li><li>스위치<ul><li>브릿지와 비슷한 기능을 갖는 장비이다</li><li>소프트웨엉 기반인 처리 방식으로 브릿지보다 빠르게 데이터를 전송한다</li><li>맥 주소 테이블을 기반으로 프레임 전송</li></ul></li><li>라우터<ul><li>OSI 모델의 물리 계층, 데이터 링크 계층, 네트워크 계층의 기능을 지원하는 장치이다</li><li>서로 다른 통신망과 프로토콜을 사용하는 네트워크 간의 통신을 가능하게 한다</li><li>LAN을 연결시켜주는 망 연동 장치로서 통신망에서 정보를 전송하기 위해 경로를 설정하는 역할을 제공하는 핵심적인 통신장비이다</li><li>목적지로 향하는 최적의 경로 설정 데이터를 목적지까지 전달하는 기능을 수행한다</li></ul></li><li>게이트 웨이<ul><li>서로 다른 형태의 네트워크를 상호 접속하는 장치이다</li><li>서로 다른 통신망이나 프로토콜을 사용하는 네트워크 간의 통신을 가능하게 하는 장비를 통칭한다</li><li>데이터 포맷 등 두 개의 시스템 사이에서 중계자 역할을 수행한다</li></ul></li><li>UTP 케이블링<ul><li>다이렉트 케이블</li><li>크로스오버 케이블</li></ul></li></ul><h2 id="프로토콜-개요와-기능"><a href="#프로토콜-개요와-기능" class="headerlink" title="프로토콜 개요와 기능"></a>프로토콜 개요와 기능</h2><h3 id="OSI7-모델과-TCP-x2F-IP-모델"><a href="#OSI7-모델과-TCP-x2F-IP-모델" class="headerlink" title="OSI7 모델과 TCP&#x2F;IP 모델"></a>OSI7 모델과 TCP&#x2F;IP 모델</h3><table><thead><tr><th>OSI7 모델</th><th>기능</th><th>TCP&#x2F;IP 모델</th></tr></thead><tbody><tr><td>7. 응용 계층</td><td>사용자에게 다양한ㅇ 네트워크 서비스를 제공하기 위해 User Interface를 제공, UI로 데이터를 생성</td><td>응용계층</td></tr><tr><td>6. 표현 계층</td><td>부호화, 압축, 암호화 기능</td><td>응용계층</td></tr><tr><td>5. 세션 계층</td><td>종단 간 애플리케이션들의 연결 설정, 유지, 해제</td><td>응용계층</td></tr><tr><td>4. 전송 계층</td><td>종단 간 연결, 응용 계층 사이에 논리적인 통로 제공</td><td>전송 계층</td></tr><tr><td>3. 네트워크 계층</td><td>논리적인 주소를 사용, 경로 관리, 최적 경로 설정</td><td>인터넷층</td></tr><tr><td>2. 데이터 링크 계층</td><td>데이터 전송을 위한 형식 결정, 데이터 전송을 위하여 Media에 접근하는 방법 제공, 오류 검출 기능 제공</td><td>네트워크 인터페이스 층</td></tr><tr><td>1. 물리 계층</td><td>물리적인 연결, 전기적, 기계적, 기능적 절차적인 수단제공</td><td>네트워크 인터페이스 층</td></tr></tbody></table><hr><h3 id="계층-별-프로토콜"><a href="#계층-별-프로토콜" class="headerlink" title="계층 별 프로토콜"></a>계층 별 프로토콜</h3><ul><li>프로토콜은 특정 통신 기능을 수행하기 위한 규약이다<ul><li>이것은 두 노드 사이의 정보 교환시 발생하는 통신상의 에러를 피하기 위하여 합리적인 통제를 한다</li></ul></li><li>프로토콜 구성요소는 형식, 의미, 순서이다<ul><li>형식 : 데이터 포맷, 부호화 및 신호 레벨 등</li><li>의미 : 특정 패턴을 어떻게 해석하고, 어떤 동작을 할 것인가 결정</li><li>순서 : 속도 일치 및 순서 제어등</li></ul></li><li>인터넷&#x2F;네트워크 계층 프로토콜<ul><li>IP,ICMP,IGMP,ARPRARP</li></ul></li><li>전송 계층 프로토콜<ul><li>TCP,UDP</li></ul></li><li>응용 계층 프로토콜<ul><li>SMTP, POP , Telnet, SSH, FTP,HTTP, SNMP, TFTP, DHCP</li></ul></li></ul><h3 id="IP-주소와-도메인"><a href="#IP-주소와-도메인" class="headerlink" title="IP 주소와 도메인"></a>IP 주소와 도메인</h3><ul><li>IPv4 주소 체계<ul><li>4 개의 옥텟으로 구성된다</li><li>각 옥탯은 8비트이므로 IPv4는 총 32비트이다</li><li>클래스 E는 240~255 사이의 대역에 있으며 IP 주소 부족을 위해 예약해 놓은 것이다</li><li>IP 주소는 네트워크 ID와 호스트 ID로 구성되어 있다.</li><li>서브넷 마스크는 네트워크 부분과 호스트 부분을 구분해주는 값이다<ul><li>이것은 효율적인 네트워크 분리를 가능하게 한다</li></ul></li></ul></li><li>서브넷팅<ul><li>서브넷은 특정 네트워크를 여러 개의 네트워크, 브로드캐스트 도메인을 나누는 것이다</li><li>IP주소의 부족 현상을 해소하기 위한 방안이다</li><li>서브넷팅은 디폴트 서브넷 마스크를 기준으로 해서 네트워크 ID 비트 수를 늘리고 호스트 ID 비트 수를 줄이는 것이다. 이 때 기준에서 늘어난 네트워크 ID 비트는 서브넷 ID라 부른다</li></ul></li><li>IPv6<br><img src="https://user-images.githubusercontent.com/37897508/81026050-c2fef380-8eb3-11ea-9f0a-1903c6ea8d60.png" alt="IPv6"></li></ul><h2 id="인터넷-서비스의-종류"><a href="#인터넷-서비스의-종류" class="headerlink" title="인터넷 서비스의 종류"></a>인터넷 서비스의 종류</h2><h3 id="WWW-서비스"><a href="#WWW-서비스" class="headerlink" title="WWW 서비스"></a>WWW 서비스</h3><ul><li>프로토콜 HTTP를 기반으로 한 멀티미디어와 하이퍼텍스트를 통한한 정보 검색 시스템이다</li><li>다양한 그래픽 유저 인터페이스를 사용하는 것이 가능하다</li><li>WWW 서비스는 분산 클라이언트 - 서버 모델을 기반으로 한다</li><li>표준 웹 프로토콜(HTTP,XML,SOAP,WSDL,UDDI)를 기본으로 하여 서로 다른 개발 환경과 운영 체제에서도 상호 통신이 가능하다</li></ul><h3 id="메일-서비스"><a href="#메일-서비스" class="headerlink" title="메일 서비스"></a>메일 서비스</h3><ul><li>전자 메일 시스템은 컴퓨터 사용자끼리 편지를 주고받는 서비스이며 MTA,MUA,MDA로 구성된다</li><li>메일 클라이언트에 송신은 SMTP, 수신은 POP3 또는 IMAP4를 이용한다</li><li>메일을 보내거나 메일 서버 간의 메시지 교환은 SMTP 프로토콜을 사용하고, 메일 서버에 도착한 메일을 컴퓨터에서 확인할 때에는 POP3와 IMAP을 사용한다</li><li>MIME은 멀티미디어 전자우편을 위한 표준으로 멀티미디어 데이터를 ASCII 형식으로 변환할 필요 없이 인터넷 전자 우편으로 송신하기 위한 SMTP의 확장 규격이다</li></ul><h3 id="FTP-서비스"><a href="#FTP-서비스" class="headerlink" title="FTP 서비스"></a>FTP 서비스</h3><ul><li>FTP(File Transafer Protocal)은 TCP&#x2F;IP에 의해 제공되는 호스트 간의 파일 복사를 위한 프로토콜이다</li><li>FTP의 통신 모드는 패시브 모드와 액티브 모드로 구분한다</li><li>FTP는 20번(일반 데이터 전송용)과 21번(제어 데이터 전송용) 포트 번호를 사용한다</li></ul><h3 id="DNS-Domain-Name-System-tjqltm"><a href="#DNS-Domain-Name-System-tjqltm" class="headerlink" title="DNS(Domain Name System) tjqltm"></a>DNS(Domain Name System) tjqltm</h3><ul><li>호스트 이름을 기반으로 IP 주소를 변환하거나 IP주소를 기반으로 호스트 이름을 변환시켜 주는 프로토콜이다</li><li>DNS에서는 도메인 명을 분산된 트리 형태의 계층적 구조로 관리한다</li></ul><h3 id="Telnet과-SSH-서비스"><a href="#Telnet과-SSH-서비스" class="headerlink" title="Telnet과 SSH 서비스"></a>Telnet과 SSH 서비스</h3><ul><li>네트워크 상에 있는 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령 실행 파일 복사 등을 제공하는 서비스이다</li><li>Telnet과 ssh는 사용자가 서버에 접속하여 서버 관리, 파일 편집 등을 text 모드 환경에서 시스템 명령을 실행하고 결과를 화면을 통해 볼 수 있다.</li><li>Telnet은 서버와 주고받는 정보를 byte 스트림 형식으로 전송하고 , ssh는 DES, RSA 등의 암호화 기법을 사용해서 전송한다 따라서 Telnet 보다 ssh가 안전한 데이터 전송을 보장한다</li><li>ssh는 암호화 뿐만 아니라 압축 기술도 제공한다. 암호화를 통해서 늘어난 데이터의 크기를 압축하여 사용자와 서버가송수신하는 것을 가능하게 한다</li></ul><h3 id="NFS-Network-File-System"><a href="#NFS-Network-File-System" class="headerlink" title="NFS(Network File System)"></a>NFS(Network File System)</h3><ul><li>네트워크 기반에 다른 시스템과 파일 시스템을 공유하기 위한 클라이언트&#x2F; 서버 프로그램이다</li><li>1984년 썬 마이크로 시스템즈 사에서 개발하였다.</li><li>원격지에 있는 리눅스 서버의 특정 디렉터리를 로컬 시스템의 하위 디렉터리처럼 사용할 수 있다.</li><li>NFS는 portmap이 먼저 수행되어 있어야만 NFS 서비스가 실행된다.<ul><li>portmap은 NIS,NFS 등 RPC(remote procedure call) 연결에 관여하는 데몬이다</li></ul></li><li>NFS서비스는 nfsd,rpc.mounted.rpc,statd,rpc.rockd,rpc.rquotad 데몬들이 구동된다</li></ul><h3 id="RPC-Remote-Procedure-Call"><a href="#RPC-Remote-Procedure-Call" class="headerlink" title="RPC(Remote Procedure Call)"></a>RPC(Remote Procedure Call)</h3><ul><li>동적으로 서비스와 포트를 연결할 때 사용하는 방법이다</li><li>기본적으로 포트와 서비스가 정적으로 구성 될 때는 &#x2F;etc&#x2F;services 파일을 참조하지만 동적으로 할당받아 사용할 때는 RPC인 rpcbind를 이용한다</li></ul><h2 id="인터넷-서비스-설정"><a href="#인터넷-서비스-설정" class="headerlink" title="인터넷 서비스 설정"></a>인터넷 서비스 설정</h2><h3 id="네트워크-인터페이스-설정"><a href="#네트워크-인터페이스-설정" class="headerlink" title="네트워크 인터페이스 설정"></a>네트워크 인터페이스 설정</h3><ul><li>리눅스는 다양한 네트워크를 지원한다</li><li>일반적으로 네트워크 인터페이스는 자동으로 인식되지만 자동으로 인식되지 않을 경우 수동으로 설정해야 한다</li><li>네트워크 인터페이스 수동 설정 방법은 컴파일된 인터페이스 모듈을 커널에 적재하는 것이다</li></ul><h3 id="네트워크-설정-파일들"><a href="#네트워크-설정-파일들" class="headerlink" title="네트워크 설정 파일들"></a>네트워크 설정 파일들</h3><ul><li>&#x2F;etc&#x2F;sysconfig&#x2F;network : 네트워크의 기본 정보가 설정되어 있는 파일</li><li>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ethX : 지정된 네트워크 인터페이스의 네트워크 환경 설정 정보가 저장된다</li><li>&#x2F;etc&#x2F;resolv.conf : 기본적으로 사용할 도메인 명과 네임 서버를 설정한다</li><li>&#x2F;etc&#x2F;hosts : IP 주소와 도메인 주소를 1:1로 등록하여 도메인에 대한 IP 주소를 조회하도록 한다</li><li>&#x2F;etc&#x2F;host.conf : DNS 서비스를 제공할 때 먼저 이 파일을 검사하여 파일의 설정에 따라 서비스 한다</li></ul><h3 id="네트워크-설정"><a href="#네트워크-설정" class="headerlink" title="네트워크 설정"></a>네트워크 설정</h3><ul><li>IP 주소 설정<ul><li>네트워크 설정 파일로 주소 설정<ul><li>&#x2F;etc&#x2F;sysconfig&#x2F;network 또는 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ethX로 IP 주소를 설정한다</li></ul></li><li>명령어를 이용한 주소 설정<ul><li>ifconfig를 이용하여 IP 주소를 할당한다</li></ul></li><li>유틸리티를 이용한 주소 설정<ul><li>netconfig, system-config-network, redhat-config-network 등의 다양한 유틸리티를 이용하여 주소를 설정</li></ul></li></ul></li><li>라우팅 테이블 설정 및 관리<ul><li>라우팅이란 송신 패킷이 목적지까지 전송할 수 있도록 경로를 설정하는 작업이다</li><li>송신 패킷은 라우팅 테이블에 목적지 경로 정보가 있다면 해당 경로로 패킷을 전송한다</li><li>명령어 route는 라우팅 테이블을 설정하거나 확인한다</li><li>목적지 경로가 라우팅 테이블에 없다면 디폴트 게이트웨이로 트래픽을 전송할 수 있게 라우팅 테이블을 설정할 수 있다.</li></ul></li></ul><h3 id="네트워크-관련-명령어"><a href="#네트워크-관련-명령어" class="headerlink" title="네트워크 관련 명령어"></a>네트워크 관련 명령어</h3><ul><li>TCP&#x2F;IP 주소 설정 정보 확인 : ifconfig, nslookup</li><li>네트워크 경로 상태 확인 : ping, traceroute</li><li>네트워크 연결 상태 확인 : netstat</li><li>라우팅 테이블 확인 : route</li><li>NIC 상태 확인 : ethtool, mii-tool, arp</li></ul><h2 id="기술-동향"><a href="#기술-동향" class="headerlink" title="기술 동향"></a>기술 동향</h2><h3 id="리눅스-동향"><a href="#리눅스-동향" class="headerlink" title="리눅스 동향"></a>리눅스 동향</h3><p>초기 리눅스는 주로 서버로 이용되었지만 현재는 크게 서버, 데스크톱 및 개발, 임베디드 분야로 나눌 수 있다.</p><h3 id="리눅스-관련-기술"><a href="#리눅스-관련-기술" class="headerlink" title="리눅스 관련 기술"></a>리눅스 관련 기술</h3><ul><li>클러스터링<ul><li>여러 개의 시스템이 하나의 거대한 시스템으로 보이게 만드는 기술이다</li><li>여러 개의 컴퓨터를 네트워크를 통해 연결하여 하나의 컴퓨터처럼 동작하도록 제작한 시스템</li><li>클러스터 노드와 클러스터 관리자로 구성된다</li><li>고계산용 클러스터, 부하분산 클러스터, 고가용성 클러스터 등이 있다.</li></ul></li><li>임베디드 시스템<ul><li>컴퓨터의 하드웨어 제어인 프로세스, 메모리 입출력장치와 하드웨어를 제어하는 소프트웨어가 조합되어 특정한 목적을 수행하는 시스템</li><li>미리 정해진 특정한 기능을 수행하도록 프로그램이 내장되어 있는 시스템이다</li><li>하드웨어와 소프트웨어를 포함하는 특정한 응용시스템이다</li><li>개인 휴대 정보 단말, 지리 정보 시스템, 정보 가전, 게임 기기 등의 시스템을 통칭한다</li><li>하드웨어로는 프로세서&#x2F;컨트롤러, 메모리, I&#x2F;O 장치, 네트워크 장치, 센서 등이다</li><li>소프트웨어로는 운영체제, 시스템 S&#x2F;W, 응용 S&#x2F;W 이다</li><li>실시간 처리를 지원한다</li><li>소형 경량 및 저전력을 지원한다</li></ul></li></ul><h2 id="활용-기술"><a href="#활용-기술" class="headerlink" title="활용 기술"></a>활용 기술</h2><h3 id="리눅스-서버-분야"><a href="#리눅스-서버-분야" class="headerlink" title="리눅스 서버 분야"></a>리눅스 서버 분야</h3><ul><li><p>서버 가상화</p><ul><li>서버를 구성하는 모든 자원의 가상화를 의미</li><li>하나의 물리적 서버 호스트에서 여러 개의 서버 운영체제를 게스트로 실행 할 수 있게 해주는 소프트웨어 아키텍처이다</li><li>서버들을 하나의 서버로 통합하여 가상환경을 구동시킴으로써 물리서버 및 공간을 절감한다</li><li>서버 자원 통합 운영으로 하드웨어 가용성을 증가시킨다</li><li>손쉬운 이중화 구성과 유연한 자원 할당으로 시스템 가용성과 안정성을 확보한다</li><li>통합 구축, 공동 활용, 유지 관리, 전력 및 관리 비용 등 중복 투자 방비 및 예산을 절감</li></ul></li><li><p>클라우드 컴퓨팅</p><ul><li>공유 구성이 가능한 컴퓨팅 리소스의 통합으로 어디서나 간편하게 요청에 따라 네트워크를 통해 접근하는 것을 가능하게 한다</li><li>사업자와 직접 상호 작용하지 않고 사용자의 개별 관리 화면을 통해 서비스를 이용할 수 있다.</li><li>사업자의 커퓨팅 리소스를 여러 사용자가 공유하는 형태로 이용한다</li><li>필요에 따라 필요한 만큼의 스케일 업과 스케일 다운이 가능하다<ul><li>Iaas(infrastructure as a service) : 서버나 스토리지 같은 하드웨어 자원 만을 임대해 주는 클라우드 서비스</li><li>Paas(Platform as a Service) : 소프트웨어 서비스를 개발하기 위한 플랫폼을 제공하는 클라우드 서비스</li></ul></li><li>사설 클라우드, 공유 클라우드, 하이브리드 클라우드 모델이 있다.</li><li>빅데이터<ul><li>기존 데이터베이스 관리 도구의 데이터 수집, 저장, 관리, 분석 역량을 넘어서는 데이터이다</li><li>다양한 종류의 대규모 데이터로부터 저렴한 비용으로 가치를 추출하고 데이터의 빠른 수집 발굴 분석을 지원할 수 있도록 고안된 차세대 기술 및 아키텍쳐이다</li><li>볼륨 속도 다양성의 3대 요소가 있다</li></ul></li></ul></li></ul><h3 id="임베디드-시스템"><a href="#임베디드-시스템" class="headerlink" title="임베디드 시스템"></a>임베디드 시스템</h3><ul><li>모바일<ul><li>스마트폰의 os란 스마트폰을 구성하고 있는 하드웨어 부품을 효율적으로 관리 및 구동하게 하며, 사용자와의 편리한 의사소통을 위해 만들어진 다양한 프로그램들이 구동 될 수 있도록 하는 소프트웨어 플랫폼이다</li><li>대표적으로 ios와 안드로이드가 있다.</li><li>리눅스 기반의 공개형 운영체제로 마에모, 모블린, 미고, 리모 , 타이벤, ios가 있다</li></ul></li><li>스마트 tv<ul><li>텔레비전에 인터넷 접속 기능이 결합되어, 각종 애플리케이션을 설치하여 tv방송 시청이외의 다양한 기능을 활용할 수 있는 다기능 tv이다</li><li>인터넷 tv 또는 커넥티드 tv라고도 불린다</li></ul></li><li>IVI(In Vehicle Infotainment)<ul><li>인포테인먼트란 정보와 오락의 합성어로 정보전달에 오라성을 가미한 시스템이다</li><li>내비게이션이나 계기판, AV 시스템, DMB, MP3, 오디오 및 외부 기기와의 연결까지 가능한 통합적인 차량 내부 시스템을 포함한다</li><li>GENIVI 표준 플랫폼 기반의 인포테인먼트 시스템이다</li><li>운전자 편의성 및 안정성을 증대시킨다</li><li>GENVI(GENEVA In Vehicle Infortainment)는 오픈 소스 기반 플랫폼 얼라이언스로 차량 멀티미디어 플랫폼 표준화 활동이다</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>링커와 로더</title>
      <link href="/2022/03/10/%EB%A7%81%EC%BB%A4%EC%99%80%EB%A1%9C%EB%8D%94/"/>
      <url>/2022/03/10/%EB%A7%81%EC%BB%A4%EC%99%80%EB%A1%9C%EB%8D%94/</url>
      
        <content type="html"><![CDATA[<h1 id="링커-linker-linkage-editor"><a href="#링커-linker-linkage-editor" class="headerlink" title="링커(linker, linkage editor)"></a>링커(linker, linkage editor)</h1><p>링커란, 목적 프로그램들과 라이브러리 또 다른 실행 프로그램(로드 모듈) 등을 연결해 실행 가능한 로드 모듈을 만드는 소프트웨어이다</p><ul><li>링커에 의해 수행되는 작업을 링킹이라 한다</li></ul><h1 id="로더란"><a href="#로더란" class="headerlink" title="로더란?"></a>로더란?</h1><ul><li>컴퓨터 내부로 정보를 들여오거나 로드 모듈을 디스크 등의 보조기억장치로부터 주기억장치에 적재하는 시스템 소프트웨어</li></ul><h2 id="로더의-기능"><a href="#로더의-기능" class="headerlink" title="로더의 기능"></a>로더의 기능</h2><ul><li>할당<ul><li>기억 장치내에 실행프로그램을 옮겨 놓을 공간 확보</li></ul></li><li>연결<ul><li>부 프로그램 호출시 그 부프로그램이 할당된 기억장소의 시작 주소를 호출한 부분에 등록하여 연결하는 기능<ul><li>약간 느낌이 매크로 프로세서 느낌아니냐?</li></ul></li></ul></li><li>재배치<ul><li>보조기억장치에 저장된 프로그램이 사용하는 각 주소들을 할당된 기억장소의 실제 주소로 배치시키는 기능</li></ul></li><li>적재<ul><li>실행 프로그램을 할당된 기억공간에 실재로 옮기는 기능</li></ul></li></ul><h2 id="로더의-종류"><a href="#로더의-종류" class="headerlink" title="로더의 종류"></a>로더의 종류</h2><ul><li>compile and go 로더<ul><li>별도의 로더 없이 언어 번역 프로그램이 로더의 기능까지 수행하는 방식</li><li>연결 기능은 수행하지 않지만 나머지 기능을 언어 번역 프로그램이 담당</li></ul></li><li>절대 로더<ul><li>목적 프로그램을 기억장소에 적재시키는 기능만 수행하는 로더</li><li>할당 및 연결 작업은 프로그래머가 프로그램 작성시 수행, 재배치는 컴파일러가 담당</li></ul></li><li>직접 연결 로더<ul><li>일반 적인기능의 로더</li><li>로더의 4가지를 모두 수행</li></ul></li><li>동적 적재 로더<ul><li>필요시 일부분만 적재하는 것으로 호출시 적재라고도 한다</li><li>Load-On-Call</li><li>ㅍ로그램의 크기가 주기억장치의 크기보다 큰 경우에 유리한 방법</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>매크로와 매크로프로세서</title>
      <link href="/2022/03/10/%EB%A7%A4%ED%81%AC%EB%A1%9C%EC%99%80%EB%A7%A4%ED%81%AC%EB%A1%9C%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C/"/>
      <url>/2022/03/10/%EB%A7%A4%ED%81%AC%EB%A1%9C%EC%99%80%EB%A7%A4%ED%81%AC%EB%A1%9C%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="매크로란"><a href="#매크로란" class="headerlink" title="매크로란?"></a>매크로란?</h1><p>반복되는 코드를 줄위기 위해 반복되는 코드를 정의 후 필요할 때마다 불러다 사용하는 것</p><p>[^1]: 매크로는 프로그램 최상단에 먼저 선언되기 때문에 프로그램 내에서 매크로 코드를 확인 할 수 있다 그래서 개방형이라 하는거야</p><ul><li>일종의 부 프로그램으로 개방 서브루틴[^1]이라고도 한다</li><li>매크로 정의 내에 또 다른 매크로를 정의할 수 있다</li><li>사용자의 반복적인 코드 입력을 줄인다</li></ul><h2 id="매크로-프로세서"><a href="#매크로-프로세서" class="headerlink" title="매크로 프로세서"></a>매크로 프로세서</h2><ul><li>원시 프로그램에 존재하는 매크로 호출 부분에 매크로 프로그램을 삽입하여 확장된 원시 프로그램을 생성하는 시스템 소프트웨어</li><li>내가 이해한게 맞다면 매크로 프로세서의 용도는 목적프로그램을 생성할 때 매크로 번역을 위함이야<ul><li>원시 프로그램에 매크로를 썼고 그걸 번역해야하잖아. 간단해 원시프로그램을 풀이한거야, 매크로를 함수로 생각해보자 그냥 함수를 불러 사용하고 로그까지 남겨놓는거야 그러면 다음에는 그 로그를 따라가면 되잖아</li></ul></li></ul><h3 id="처리과정"><a href="#처리과정" class="headerlink" title="처리과정"></a>처리과정</h3><ol><li>매크로 정의 인식</li><li>매크로 정의 저장</li><li>매크로 호출 인식</li><li>매크로 확장과 매개 변수 치환</li></ol>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>스키마</title>
      <link href="/2022/03/10/%EC%8A%A4%ED%82%A4%EB%A7%88/"/>
      <url>/2022/03/10/%EC%8A%A4%ED%82%A4%EB%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="스키마"><a href="#스키마" class="headerlink" title="스키마"></a>스키마</h1><ul><li>데이터 베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 메타데이터의 집합</li><li>개체, 속성, 관계 및 데이터 조작 시 데이터 값들이 갖는 제약 조건 등에 관해 전반적으로 정의</li></ul><h2 id="스키마의-특징"><a href="#스키마의-특징" class="headerlink" title="스키마의 특징"></a>스키마의 특징</h2><ul><li>Data Dictionary(메타 데이터)에 저장</li><li>현실 세계의 특정한 한 부분의 표현으로 특정 데이터 모델을 이용해서 만들어진다</li><li>시간에 따라 불변</li><li>데이터의 구조적 특성을 의ㅣ</li><li>인스턴스에 의해 규정</li></ul><h2 id="스키마의-3계층"><a href="#스키마의-3계층" class="headerlink" title="스키마의 3계층"></a>스키마의 3계층</h2><ul><li>외부 스키마 &#x3D; 서브 스키마 &#x3D; 사용자 뷰<ul><li>데이터 베이스의 논리적 구조를 정의</li><li>하나의 데이터 베이스에 여러 개의 외부 스키마가 존재 할 수 있음</li><li>일반 사용자는 SQL을 이용하여 DB에 접근 가능</li><li>응용 프로그래머는 언어를 사용하여 DB에 접근</li></ul></li><li>개념 스키마 &#x3D; 전체적인 뷰<ul><li>전체적인 논리적 구조</li><li>개체 간의 관계와 제약 조건을 나타냄</li><li>데이터베이스의 접근 권한, 보안 및 무결성 규칙에 관한 명세를 정의</li><li>단순 스키마라고도함<ul><li>데이터 베이스를 정의했다. 데이터베이스 파일에 저장되는 형태를 말한다</li></ul></li><li>DBA에 의해서 구성된다</li></ul></li><li>내부 스키마 &#x3D; 저장 스키마<ul><li>물리적 저장장치의 입장에서 본 데이터베이스 구조로, 물리적인 저장장치와 밀접한 계층</li><li>시스템 프로그래머나 시스템 설계자가 보는 관점의 스키마</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>뷰와 시스템카탈로그(실기)</title>
      <link href="/2022/03/10/%EB%B7%B0%EC%99%80%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EA%B8%B0/"/>
      <url>/2022/03/10/%EB%B7%B0%EC%99%80%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8-%EC%8B%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><ul><li>하나 이상의 테이블로부터 유도되어 만들어진 가상 테이블</li><li>처리과정 중의 중간 내용이나 기본 테이블 중 일부 내용을 검색해 보여주거나 별도로 관리할 때 사용하는 임시 테이블</li><li>실제로 물리적으로 기억공간을 차지하지 않음</li><li>논리적 독립성을 제공함</li><li>데이터 접근제어로 보안성을 향상시킴</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 뷰_이름[(뷰_속성이름)]</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> 기본테이블의 속성_이름</span><br><span class="line"><span class="keyword">FROM</span> 기본테이블_이름</span><br><span class="line">[<span class="keyword">WHERE</span> 조건]</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><ul><li>AS SELECT<ul><li>생략할 경우 기본 테이블과 같은 이름을 가짐</li></ul></li><li>FROM<ul><li>뷰를 만들기 위한 기본 테이블 이름 기입</li></ul></li><li>WITH CHECK OPTION<ul><li>연산 시 WHERE 절의 조건에 맞지 않으면 실행 되지 않도록 할 때 사용하는 옵션</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 뷰_이름 [Restrict<span class="operator">|</span>CASCADE]</span><br></pre></td></tr></table></figure><h2 id="System-Catalog"><a href="#System-Catalog" class="headerlink" title="System Catalog"></a>System Catalog</h2><ul><li>데이터베이스에 저장되어 있는 개체들에 대한 정보와 정보들 간의 관계를 저장한 것</li><li>작은 데이터 베이스</li><li>데이터 사전이라고도 한다</li><li>시스템 카탈로그에 저장된 데이터를 메타 데이터(Meta Data)라고 한다.</li><li>일반 테이블과 같이 시스템 테이블로 구성된다</li><li>일반 사용자는 시스템 카탈로그의 내용을 검색할 수 있지만 시스템 카탈로그의 내용을 삽입 삭제 갱신 등은 불가능하다</li><li>사용자가 sql 문을 실행하면 시스템에 의해 자동적으로 이루어진다</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘_실기</title>
      <link href="/2022/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8B%A4%EA%B8%B0/"/>
      <url>/2022/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8B%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>C도 그렇고 JAVA도 그렇고 흐름도와 코드 출력 값 적는건데 거의 순차적으로 진행되는거라 부담은 없었다. 오히려 중간 중간 오랜만에 봐서 헷갈리는 함수들을 외워야했다.</li><li>이 글은 돌아다니면서 공부할 때 사용하기 위해 일종의 요약집 느낌으로 쓰려고 한다.<ul><li>일단 내 기준 아는 건 안 적을 생각이다 거의..?</li></ul></li></ul><h2 id="공부-시작해봅시다"><a href="#공부-시작해봅시다" class="headerlink" title="공부 시작해봅시다!"></a>공부 시작해봅시다!</h2><p><img src="https://user-images.githubusercontent.com/37897508/87425640-fb8c1d80-c618-11ea-9854-efeacc1dc689.jpg" alt="CI125_22"></p><ul><li><p>흐름도는 기본적으로 알고 들어가야한다.</p></li><li><p>흐름도의 반복문에서 [반복 N1,N2,1]이면 N1 ~ N2까지 1씩 증가하겠다는 의미</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알고리즘과 소프트웨어개발(실기)</title>
      <link href="/2022/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C/"/>
      <url>/2022/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="소프트웨어-생명주기"><a href="#소프트웨어-생명주기" class="headerlink" title="소프트웨어 생명주기"></a>소프트웨어 생명주기</h2><ul><li><p>알고리즘 설계는 소프트웨어 설계 단계에 해당한다</p></li><li><p>프로그래밍 언어를 선택하여 알고리즘에 대해 코딩하는 것은 소프트웨어 구현 단계</p></li><li><p>소프트웨어 생명주기 단계</p><ol><li>개발 타당성 검토</li><li>개발 계획 수립</li><li>요구사항 분석</li><li>소프트웨어 설계</li><li>소프트웨어 구현</li><li>테스트</li><li>운용</li><li>유지보수</li></ol></li></ul><h2 id="소프트웨어-관리"><a href="#소프트웨어-관리" class="headerlink" title="소프트웨어 관리"></a>소프트웨어 관리</h2><ul><li>요구 관리<ul><li>고객 요구를 정확하게 추출 및 문서화</li><li>고객과 개발자가 상호 동의하는 과정에 대한 관리</li></ul></li><li>형상 관리<ul><li>소프트웨어 개발 및 유지보수 과정 중 발생하는 산출물들을 시간 흐름에 따라 시스템 형상을 만들어 가는 것</li><li>소프트웨어 버전을 체계적으로 관리</li></ul></li><li>유지 관리<ul><li>소프트웨어 개발 후 고객이 사용하는 과정 중 변경 사항이 발생할 경우 소프트웨어를 수정하는 것</li><li>고객이 소프트웨어를 지속적으로 잘 사용하도록함</li></ul></li><li>품질 관리<ul><li>개발된 소프트웨어가 원래의 개발 목적에 부합하며 요구를 만족하는지 검증</li></ul></li></ul><h2 id="소프트웨어-품질-관리"><a href="#소프트웨어-품질-관리" class="headerlink" title="소프트웨어 품질 관리"></a>소프트웨어 품질 관리</h2><ul><li>기능성(funcionality)<ul><li>고객이 요구하는 기능을 소프트웨어가 충분히 제공하고 있는가</li><li>제공하는 기능이 표준을 잘 지키며 보안이 잘 이루어지는가</li></ul></li><li>사용성(usability)<ul><li>소프트웨어를 고객이 사용하기에 어렵지 않은가</li><li>사용자 인터페이스에 일관성이 있고 기능 확장과 축소가 용이한가</li></ul></li><li>신뢰성(reliability)<ul><li>소프트웨어를 운용할 때 크고 작은 오류가 발생하지 않는가</li><li>오류 발생에서 즉시 회복할 수 있고 서비스 중단이 일어나지 않는가</li></ul></li><li>유지보수성(maintainability)<ul><li>소프트웨어 운영환경이 일부 변경되어도 지속적인 운영이 가능한가</li><li>소프트웨어 업그레이드가 꾸준히 제공되는가</li></ul></li><li>이식성(portability)<ul><li>기존 시스템에서 제거하여 다른 시스템으로 옮기는 것이 용이한가</li><li>시스템 환경을 바꾸어도 소프트웨어는 여전히 운용될 수 있는가</li></ul></li><li>효율성(efficiency)<ul><li>소프트웨어가 소비하는 컴퓨팅 자원이 효율적인가</li><li>소프트웨어의 반응시간이 고객의 예쌍보다 느리지 않은가</li></ul></li></ul><h2 id="알고리즘의-효율성"><a href="#알고리즘의-효율성" class="headerlink" title="알고리즘의 효율성"></a>알고리즘의 효율성</h2><ul><li>공간 효율성<ul><li>알고리즘을 실행하는 동안 알고리즘이 필요로 하는 메모리 공간(컴퓨팅 자원)의 효율성을 말한다</li><li>고정공간(알고리즘이 기본적으로 소모하는 공간) + 가변공간(알고리즘 실행 후 입출력 크기에 따라 추가로 늘어가는 공간)</li></ul></li><li>시간 효율성<ul><li>알고리즘 실행 후 종료까지 걸리는 시간의 효율성</li><li>번역 시간 + 실행시간</li></ul></li><li>빅오(Big O) 표기법</li></ul><h2 id="소프트웨어-아키텍처"><a href="#소프트웨어-아키텍처" class="headerlink" title="소프트웨어 아키텍처"></a>소프트웨어 아키텍처</h2><ul><li>개발하려는 소프트웨어의 전체 골격에 대한 논리적 구조</li><li>전체 소프트웨어에 앞으로 적용할 원칙들의 총집합체</li><li>소프트웨어 아키텍처는 어플리케이션 개발 모델이라 불림</li><li>MVC, C&#x2F;S, 다층 구조, 저장소 ㅗ구조가 있다.</li></ul><h3 id="MVC-구조"><a href="#MVC-구조" class="headerlink" title="MVC 구조"></a>MVC 구조</h3><ul><li>어플리케이션을 Model, View, Controller로 구분함</li><li>사용자 인터페이스와 비즈니스 로직을 상호 분리하여 개발하는 구조</li></ul><ul><li><p>Model</p><ul><li>자신의 상태가 바뀔 때 마다 컨트롤러와 뷰에게 알려준다</li></ul></li><li><p>View</p><ul><li>모델로부터 정보를 얻어 와서 사용자에게 출력물을 보여줌</li></ul></li><li><p>Controller</p><ul><li>모델과 뷰에게 명령을 보낼 수 잇음</li><li>모델의 경우 모델의 상태가 바뀜</li><li>뷰의 경우 모델에 의한 뷰 표시 방법은 변경할 수 있음</li></ul></li><li><p>gui를 사용하는 어플리케이션 개발 모델에서 많이 사용</p></li><li><p>사용자 인터페이스와 비즈니스 논리를 상호 독립적 구성요소로 변경할 수 잇는 장점을 제공</p></li></ul><h3 id="C-x2F-S-구조"><a href="#C-x2F-S-구조" class="headerlink" title="C&#x2F;S 구조"></a>C&#x2F;S 구조</h3><ul><li>서비스를 요구하는 클라이언트</li><li>서비스를 제공하는 서버</li><li>C&#x2F;S 구조는 네트워크 기반의 분산 소프트웨어 아키텍처에 주로 적용도니다</li><li>웹브라이저가 클라이언트, 웹 서버가 서버에 해당</li><li>클라이언트는 사용자 요청 수용에 중점</li><li>서버는 발생한 요청에 대한 결과물 생성, 사용자 데이터 공유, 네트워크 서비스 제공 담당</li></ul><h3 id="다층-구조"><a href="#다층-구조" class="headerlink" title="다층 구조"></a>다층 구조</h3><ul><li>C&#x2F;S 구조의 단점을 극복하기 위함</li><li>클라이언트 : 최상위 계층, 서버 : 최하위 계층 사이에 비즈니스 로직을 전담하는 중간계층을 둠<ul><li>비즈니스 로직을 완전히 분리</li></ul></li><li>중간 계층은 데이터베이스 서버의 다단계처리를 지원</li><li>다른 어플리케이션 프로그램 실행</li><li>클라이언트의 다양한 요구에 대한 분산 처리</li></ul><ul><li>보통은 3-계층<ul><li>프레젠테이션 계층</li><li>비즈니스 로직 계층</li><li>데이터 계층</li></ul></li></ul><h3 id="저장소-구조"><a href="#저장소-구조" class="headerlink" title="저장소 구조"></a>저장소 구조</h3><ul><li>소프트웨어 아키텍처가 다수의 서브 시스템들로 구성되어 있을 때 특정한 서브 시스템에 공유 저장소를 두는 것<ul><li>공유 저장소를 통해 데이터를 공유하며 효율적으로 관리하고 서비스를 제공하는 구조</li></ul></li><li>저장소 구조는 일종의 수동형 데이터 집중화 구조<ul><li>이와 비교되는 능동형 데이터 집중화 구조로 블랙보드 구조가 있음</li><li>블랙보드 구조는 데이터 보관하는 서브 시스템 내에 보관된 데이터에 변동이 생기면 이와 관련있는 다른 서브 시스템들에게 변경 사실을 알려주는 구조이다</li></ul></li></ul><h2 id="객체지향-설계"><a href="#객체지향-설계" class="headerlink" title="객체지향 설계"></a>객체지향 설계</h2><ul><li>객체<ul><li>현실 세계에 독립적으로 존재하는 사물 또는 대상</li></ul></li><li>속성<ul><li>객체가 가지고 있는 특징이나 성질</li></ul></li><li>클래스<ul><li>같은 속성을 갖는 객체들의 집합</li><li>클래스 고유 속성과 연산을 가짐</li></ul></li><li>분류화<ul><li>비슷한 객체들을 묶어내는 작업</li></ul></li><li>캡슐화<ul><li>정보 은닉</li><li>객체의 상세 내용을 객체 외부에 숨기고 필요한 사항만을 인터페이스를 통해 보여줌</li></ul></li><li>추상화<ul><li>객체가 어떤 기능을 수행할 것인지에 관함</li><li>중요 속성이나 연산만 추출하고 복잡한 내부는 감추는 작업</li><li>Ex. Student.genID</li></ul></li><li>일반화<ul><li>같은 속성을 가지는 유사한 클래스들을 분류하여 새로운 클래스를 정의하는 작업</li></ul></li><li>상속<ul><li>상위 클래스의 속성과 연산을 하위클래스에 물려주는 것</li><li>단일 상속 vs 다중 상속</li><li>반복 상속 vs 선택적 상속</li><li>상위 클래스에 public protected가 선언된건만 상속 가능</li></ul></li><li>다형성<ul><li>여러 클래스에 공통으로 가지고 있는 동일한 이름의 연산이 각 클래스에 따라 다르게 동작하는 것</li><li>동일한 이름의 연산을 다른 목적으로 사용할 수 있게 해준다</li><li>오버로딩<ul><li>상위 클래스의 연산과 다른 매개변수 개수와 형태를 추가하여 연산을 다중 정의하는 다형성</li></ul></li><li>오버라이딩<ul><li>상위클래스의 연산을 하위클래스에서 다시 정의하는 다형성</li></ul></li></ul></li><li>동적 바인딩<ul><li>실행시간에 하위클래스의 객체 타입에 따라서 하위 클래스의 적합한 동작이 자동으로 정해지는 것</li><li>오버라이딩 다형성을 지원<ul><li>오버로딩 다형성은 컴파일 시간에 분류되어 처리된다</li></ul></li><li>소프트웨어 디자인 패턴<ul><li>소프트웨어를 설계할 때 특정 상황에서 자주 사용하는 패턴 또는 반복되는 솔루션을 일정한 양식으로 형식화 한것</li><li>소프트웨어의 설계와 품질을 향상시키고 소프트웨어 재사용 가능성을 높임</li></ul></li><li>리팩토링<ul><li>소프트웨어의 수행 결과를 그대로 유지하면서도 소프트웨어를 구성하는 내부 코드의 구조를 재조정하는 행위</li><li>버그 발생 가능성 최소화하기 위함</li><li>일종의 유지보수</li></ul></li></ul></li></ul><h2 id="SOSLD-객체지향-설계의-5대-원칙"><a href="#SOSLD-객체지향-설계의-5대-원칙" class="headerlink" title="SOSLD 객체지향 설계의 5대 원칙"></a>SOSLD 객체지향 설계의 5대 원칙</h2><ul><li>Single responsibility<ul><li>하나의 클래스는 하나의 책임을 갖는다</li><li>클래스나 모듈은 한 가지 기능만을 가짐<ul><li>이를 변경하려는 이유도 한가지이어야한다</li></ul></li></ul></li><li>Open closed priciple<ul><li>소프트웨어의 각 요소는 확장에 열려있고 변경에는 닫혀 있어야한다</li><li>변경이 필요한 경우 기존 코드를 수정하지 말고 상속과 확장을 활용하여 변경한다</li></ul></li><li>Liskov substituion<ul><li>서브 타입(subclass, 파생 타입)은 기반타입(super 클래스)으로 교환할 수 있도록 설계뙤어야한다</li><li>상속은 다형성을 통하여 확장성을 극대화하려는 목적으로 사용해야한다</li></ul></li><li>Inteface segregation<ul><li>필요한 메서드만 인터페이스로 제공하고 사용하지 않는 메서드와는 연결관계를 제공하지 말아야한다</li><li>범용 통합 인터페이스보다는 특정 클라이언트를 위하여 구체적인 인터페이스를 여러 개 만드는 것이 더 낫다.</li></ul></li><li>Dependency inversion<ul><li>구체적인 클래스에 의존하지 말고 추상화된 것에 의존하여 설계</li><li>상위 모듈이 하위모듈에 의존적이면 하위모듈의 변경에 상위모듈은 영향을 받게 됨</li><li>상위 모듈은 하위 모듈에 의존하지 않도록 하고 모두 별도의 추상황에 의존하돍한다</li></ul></li></ul><h2 id="소프트웨어-테스트-기법"><a href="#소프트웨어-테스트-기법" class="headerlink" title="소프트웨어 테스트 기법"></a>소프트웨어 테스트 기법</h2>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>어셈블리어와 어셈블러</title>
      <link href="/2022/03/10/%EC%96%B4%EC%85%88%EB%B8%94%EB%A6%AC%EC%96%B4%EC%99%80%EC%96%B4%EC%85%88%EB%B8%94%EB%9F%AC/"/>
      <url>/2022/03/10/%EC%96%B4%EC%85%88%EB%B8%94%EB%A6%AC%EC%96%B4%EC%99%80%EC%96%B4%EC%85%88%EB%B8%94%EB%9F%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="어셈블리어"><a href="#어셈블리어" class="headerlink" title="어셈블리어"></a>어셈블리어</h1><p>어셈블리어는 기계어와 기호를 1 대 1 대응시켜 코드화한 기호 언어이다.</p><ul><li>어셈블 : 원시 프로그램을 목적 프로그램으로 바꾼다</li><li>사용자가 프로그램을 쉽게 읽고 이해할 수 있음</li><li>프로그램에 기호화된 명령 및 주소를 사용한다</li><li>CPU 마다 사용되는 어셈블리어가 다를 수 있다</li></ul><h2 id="어셈블리어-명령"><a href="#어셈블리어-명령" class="headerlink" title="어셈블리어 명령"></a>어셈블리어 명령</h2><ul><li>의사 명령(어셈블러 명령)<ul><li>원시 프로그램을 어셈블할 때 어셈블러가 해야 할 동작을 지시하는 명령</li><li>프로그램의 시작과 끝을 나타내는 것, 변수를 위한 기억장소를 확보하는 것, 매크로를 정의하거나 호출하는 것</li></ul></li><li>실행 명령<ul><li>데이터를 처리하는 명령</li></ul></li></ul><h2 id="어셈블리어의-명령어-형식"><a href="#어셈블리어의-명령어-형식" class="headerlink" title="어셈블리어의 명령어 형식"></a>어셈블리어의 명령어 형식</h2><ul><li>Label<ul><li>데이터를 기억할 기억 장소, 분기할 위치, 기호 상수 등에 대한 기호를 기술하는 부분</li></ul></li><li>OP<ul><li>명령어를 기술하는 부분</li><li>OP-CODE</li></ul></li><li>Operand<ul><li>피연사자가 기술 된다</li></ul></li></ul><h1 id="어셈블러와-어셈블-과정"><a href="#어셈블러와-어셈블-과정" class="headerlink" title="어셈블러와 어셈블 과정"></a>어셈블러와 어셈블 과정</h1><p>어셈블 과정은 2 단계로 나누어서 수행된다. 2 개의 Pass를 사용하면 기호를 정의하기 전에 사용할 수 있는 프로그램 작업이 용이하다</p><ul><li>첫 번째 Pass에서 프로그램을 한 번 읽기 때문에 두 번째 Pass에서 기호 정의전에 프로그램을 사용할 수 있다.</li></ul><h2 id="Table의-종류-및-구성"><a href="#Table의-종류-및-구성" class="headerlink" title="Table의 종류 및 구성"></a>Table의 종류 및 구성</h2><ul><li>기계 명령어 테이블<ul><li>어셈블리어의 실행 명령에 대응하는 기계어에 대한 정보를 가지고 있는 테이블</li></ul></li><li>의사 명령어 테이블<ul><li>의사 명령과 그 명령을 처리하는 실행 루틴의 주소를 가지고 있는 테이블</li></ul></li><li>기호 테이블<ul><li>원시 프로그램의 Label 부분에 있는 기호들을 모두 차례로 저장하는 테이블</li></ul></li><li>리터럴 테이블<ul><li>원시 프로그램의 operand 부분의 literal을 차례로 저장하는 테이블</li></ul></li></ul><h2 id="Pass-단계에-따른-하는-일"><a href="#Pass-단계에-따른-하는-일" class="headerlink" title="Pass 단계에 따른 하는 일"></a>Pass 단계에 따른 하는 일</h2><h3 id="Pass-1"><a href="#Pass-1" class="headerlink" title="Pass 1"></a>Pass 1</h3><ul><li>기호와 리터럴 정의</li><li>기계 명령어의 길이 정의</li><li>위치 계수기 관리</li><li>기호들의 값을 ST에 기억</li><li>해당하는 의사 명령어 처리</li></ul><h3 id="Pass-2"><a href="#Pass-2" class="headerlink" title="Pass 2"></a>Pass 2</h3><ul><li>기호 번지에 대한 상대 번지를 생성하고 목적 프로그램 생성</li><li>기계 명령어 생성</li><li>ST에서 기호들의 값을 찾음</li><li>의사 명령어 처리</li><li>리터럴 발생</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>시스템 소프트웨어의 개념과 구성</title>
      <link href="/2022/03/10/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EC%9D%98%EA%B0%9C%EB%85%90%EA%B3%BC%EA%B5%AC%EC%84%B1/"/>
      <url>/2022/03/10/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EC%9D%98%EA%B0%9C%EB%85%90%EA%B3%BC%EA%B5%AC%EC%84%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="시스템-소프트웨어란"><a href="#시스템-소프트웨어란" class="headerlink" title="시스템 소프트웨어란?"></a>시스템 소프트웨어란?</h1><ul><li>시스템 전체를 작동시키는 프로그램<ul><li>프로그램을 제어장치에 적재시키거나 인터럽트 관리, 장치 관리, 언어 번역 등의 기능을 담당</li></ul></li><li>OS, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리, 정렬&#x2F;합병 프로그램, 로더 등</li></ul><h1 id="시스템-소프트웨어의-구성"><a href="#시스템-소프트웨어의-구성" class="headerlink" title="시스템 소프트웨어의 구성"></a>시스템 소프트웨어의 구성</h1><ul><li>제어 프로그램<ul><li>감시 프로그램</li><li>작업제어 프로그램<ul><li>Job Scheduler, Master Scheduler(shell 같은거)</li></ul></li><li>자료 관리 프로그램<ul><li>주 기억장치와 보조 기억 장치 사이에서 일하는 프로그램</li></ul></li></ul></li><li>처리 프로그램<ul><li>언어 번역 프로그램<ul><li>컴파일러, 어셈블러, 컴파일러</li></ul></li><li>서비스 프로그램<ul><li>연결 편집기, 링커</li><li>정렬&#x2F;합병 프로그램</li><li>라이브러리안</li><li>유틸리티 프로그램</li></ul></li><li>문제 프로그램</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>업무 프로세스(실기)</title>
      <link href="/2022/03/10/%EC%97%85%EB%AC%B4%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/"/>
      <url>/2022/03/10/%EC%97%85%EB%AC%B4%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="경영-관리-운용-관련-용어"><a href="#경영-관리-운용-관련-용어" class="headerlink" title="경영, 관리, 운용 관련 용어"></a>경영, 관리, 운용 관련 용어</h2><ul><li>정보 기술 아키텍처(ITA)<ul><li>Information Technology Architecture</li><li>정보 시스템에 대한 요구사항 충족, 정보 시스템의 구성요소를 분석하고, 이들 간의 관계를 구조적으로 정리한 체계</li><li>즉 업무 처리 효율을 높이기 위해 각 업무와 업무에 필요한 정보들을 관리하는 것</li><li>ITA 구성요소<ul><li>전사적 구조(Enterprise Architcture)<ul><li>업무와 관리 프로세스 및 정보 기술 간의 관계를 나타내는 것</li><li>관계가 핵심</li></ul></li><li>기술 참조 모델(Technical Reference Model)<ul><li>조직의 업무에 필요한 정보 서비스를 식별, 설명하는 것</li><li>전사적 구조의 모든 부분에 고려됨</li></ul></li><li>표준 프로파일<ul><li>기술 참조 모델에 기재된 서비스를 지원하기 위한 정보 기술 표준들을 의미</li></ul></li></ul></li></ul></li><li>업무 재설계(BPR)<ul><li>Business Process Reengineering</li><li>경영혁신기법의 하나, 기업의 활동 및 업무의 전반적인 흐름을 근본적으로 분석,재설계,재구성하는 것을 의미</li><li>마이클 해머의 업무 재설계 : 대상 프로세스 선정 - 프로세스 이해 - 프로세스 재설계 - 프로세스의 미래 모습 전달</li><li>등장 배경 : 정보기술과 컴퓨터 통신의 발달</li><li>3C의 변화 : 고객, 경쟁, 변화</li><li>BPR의 성공조건 : 경역혁신을 위한 목적, 업무, 정보가 필요</li></ul></li><li>비즈니스 프로세스 관리<ul><li>Business Process Management</li><li>기업 내외의 업무프로세스를 가시화, 업무 수행 인원과 관련된 사람과 시스템을 프로세스에 맞게 변화, 그 프로세스 최적화를 위해 변화 관리 및 시스템구현 기법을 말한다</li><li>BPR - BPM : BPR 후 지속적인 BPM이 필요하다</li></ul></li><li>전사적 자원 관리(Enterprise Resource Planning)<ul><li>경영 혁신 기법의 하나, 기업의 체질 및 구조와 경영 방식 등을 근본적으로 재설계</li><li>모든 기업 경영 방식을 하나로 통합하여 기업의 생산성을 극대화</li><li>기업의 경쟁력 향상시켜 주는 통합 정보 시스템</li><li>ERP 특징<ul><li>통합 시스템&#x2F; 통합 데이터베이스</li><li>단기간의 도입과 개발</li><li>개방형 시스템</li><li>다국적, 다언어 지원</li><li>BPR 지원</li></ul></li></ul></li><li>기업 애플리케이션 통합(Enterprise Application Integration)<ul><li>기업 내 상호 연관된 모든 애플리케이션을 유기적으로 연동하여 필요한 정보를 통합, 관리, 사용할 수 있는 환경</li><li>기업에서 운영하는 서로 다른 애플리케이션을 통합하여 업무 효율성을 높이는 것</li></ul></li><li>전략적 기업 경영(SEM)<ul><li>전략 중심형 조직을 구축하여 실행하는 경영 프로세스와 시스템으로 운영</li><li>SEM의 구성요소<ul><li>VBM<ul><li>기업의 가장 근복이 되는 목적을 최고의 경제적 가치를 창조하는데 둠</li><li>가치 중심 경영</li></ul></li><li>ABC&#x2F;ABMA<ul><li>비즈니스를 업무 활동 단위로 세분해서 각 업무 활동 단위 마다 소요 경비를 수치화하는 방법</li><li>완가 관리체계를 실 활동에 근거하여 좀 더 정확한 원가를 측정</li></ul></li><li>BSC(balance score card)<ul><li>재무 지표에 미래의 경쟁력 향상을 위한 지표를 추가</li><li>기업의 성과관리를 단순한 재무적 관점의 평가가 아닌 핵심적인 관점들을 균형 있게 측정, 관리하여 상호 인과관계까지 관리하는 것</li></ul></li></ul></li></ul></li><li>핵심 성공 요인(Critical Success Factors)<ul><li>MIT에서 개발한 전략 정보 시스템(SIS)의 실현을 위한 기법의 한가지</li><li>성공에 필요한 요인을 찾아내어 경영상 중요한 정보를 결정하는 것</li></ul></li><li>MOT(Moment of Truth)<ul><li>피하려해도 피할 수 없는 수간</li><li>고객이 직,간접적으로 기업의 한부분과 접촉하는 시점에 기업에 대한 인상을 받는 순간을 의미</li><li>이를 활요한 마케팅을 MOT 마케팅이라고 한다</li></ul></li><li>VOC(Voice of Customer)<ul><li>고객의 소리</li><li>고객의 의견 뿐만아니라 고객과의 의사소통도 포함</li></ul></li></ul><h2 id="여러-가지-분석-기법"><a href="#여러-가지-분석-기법" class="headerlink" title="여러 가지 분석 기법"></a>여러 가지 분석 기법</h2><ul><li><p>AS-IS 기법</p><ul><li>현재의 업무 프로세스를 분석하는 것</li><li>프로세스 목록 작성 - 프로세스 체계도 작성 - 프로세스 정의서 작성</li><li><strong>TO-BE 기법</strong><ul><li>현행 업무 프로세스를 분석하는 것</li><li>수행할 미래에 구현하고자 하는 업무 프로ㅔ스를 정의하는 분석</li></ul></li></ul></li><li><p>5-FORCE 분석</p><ul><li>마이클 포터에 의해 제안된 산업 분석 도구</li><li>기업의 산업 환경을 분석하는 도구</li></ul><ol><li>기존 기업들 간의 경쟁</li><li>잠재적 진입자의 위협</li><li>대체 상품의 위협</li><li>구매자들의 교섭력</li><li>공급자들의 교섭력</li></ol></li><li><p>7S 분석</p><ul><li>전략 정책 수립 시 기업의 내부 역량과 전체적인 기업의 문화 등을 분석하기 위한 기법</li></ul></li></ul><ol><li>Shared Value (공유 가치)</li><li>Strategy(전략)</li><li>Structure(구조)</li><li>System(제도 절차) </li><li>Style(스타일)</li><li>Skill(관리 기술)</li></ol><ul><li><p>SWOT 분석</p><ul><li>strength, weekness, opportunity, threat 요인을 분석하여 이를 토대로 전략 수정</li><li>그냥 상반되는 개념들로 2 * 2 표를 그려 기업 내부 환경 요소 분석</li></ul></li><li><p>6 시그마</p><ul><li>기업에서 전략적으로 완벽에 가까운 제품과 서비스를 개발, 제공하기 위해 등장한 품직혁신과 고객만족을 위한 통계정 21세기형 기업 경역 전략</li><li>모토로라 품질혁신 운동으로 시작된 이후 알려짐</li></ul><ol><li>측정</li><li>분석</li><li>향상</li><li>관리</li></ol><ul><li>품질 개선을 위해 모든 구성원이 참여하는 것은 물론 모든 프로세스의 질을 향상시키고, 업무 비용을 획기적으로 절감하여 경쟁력을 향상시키는 것</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>운영체제 개요</title>
      <link href="/2022/03/10/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B0%9C%EC%9A%94/"/>
      <url>/2022/03/10/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B0%9C%EC%9A%94/</url>
      
        <content type="html"><![CDATA[<h1 id="운영체제의-개념"><a href="#운영체제의-개념" class="headerlink" title="운영체제의 개념"></a>운영체제의 개념</h1><h2 id="운영체제의-정의"><a href="#운영체제의-정의" class="headerlink" title="운영체제의 정의"></a>운영체제의 정의</h2><ul><li>시스템 자원 효율적 관리, 여러 프로그램의 모임</li><li>사용자와 하드웨어 간의 인터페이스로 동작하는 시스템 소프트웨어의 일종</li></ul><h2 id="운영-체제의-목적-성능-평가의-기준"><a href="#운영-체제의-목적-성능-평가의-기준" class="headerlink" title="운영 체제의 목적(성능 평가의 기준)"></a>운영 체제의 목적(성능 평가의 기준)</h2><ul><li>처리능력(Throughput) : 일정 시간 내에 시스템이 처리하는 일의 양</li><li>반환 시간(turn around time) : 시스템에 작업을 의뢰한 시간부터 처리 완료까지 걸리는 시간</li><li>사용 가능도(availablility) : 시스템의 자원을 필요할 때 즉시 사용할 수 있는가</li><li>신뢰도(reliablity) : 시스템이 주어진 문제를 정확하게 해결하는 정도</li></ul><h2 id="운영체제의-기능"><a href="#운영체제의-기능" class="headerlink" title="운영체제의 기능"></a>운영체제의 기능</h2><ul><li>프로세서, 주 기억장치, 보조 기억장치 등의 자원 관리</li><li>자원의 스케줄링</li><li>사용자와 시스템간의 인터페이스 제공</li><li>시스템의 각종 하드웨어와 네트워크 관리 및 제어</li><li>데이터 관리, 데이터 및 자원의 공유 기능 제공</li><li>시스템 오류 검사 및 복구</li><li>자원 보호 기능 제공</li><li>입 출력에 대한 보조 기능</li><li>가상 계산기 기능</li></ul><h2 id="운영체제의-주요-자원-관리"><a href="#운영체제의-주요-자원-관리" class="headerlink" title="운영체제의 주요 자원 관리"></a>운영체제의 주요 자원 관리</h2><ul><li>프로세스 관리<ul><li>프로세스 스케줄링 및 동기화 관리 담당</li><li>프로세스 생성과 제거,시작과 정지, 메시지 전달 등의 기능 담당</li></ul></li><li>기억장치 관리<ul><li>프로세스에게 메모리 할당 및 회수 관리 담당</li></ul></li><li>주변 장치 관리<ul><li>입 출력장치 스케줄링 및 전반적인 관리 당당</li></ul></li><li>파일 관리<ul><li>파일의 생성과 삭제 변경 유지 등의 관리 담당</li></ul></li></ul><h2 id="운영체제의-종류"><a href="#운영체제의-종류" class="headerlink" title="운영체제의 종류"></a>운영체제의 종류</h2><ul><li>단일 처리 시스템 : DOS, 나머지는 다중 처리 시스템</li><li>개인용과 서버용 정도가 있다</li></ul><h1 id="운영체제의-운용-기법"><a href="#운영체제의-운용-기법" class="headerlink" title="운영체제의 운용 기법"></a>운영체제의 운용 기법</h1><h2 id="일괄-처리-시스템"><a href="#일괄-처리-시스템" class="headerlink" title="일괄 처리 시스템"></a>일괄 처리 시스템</h2><ul><li>초기 컴퓨터 시스템에 사용</li><li>일괄 처리를 위해 JCL( job control language)를 제공해야함</li><li>컴퓨터 시스템을 효율적으로 사용 가능</li><li>반환시간이 늦지만 하나의 작업이 모든 작업을 독점하므로 cpu 유휴시간이 줄어든다.</li><li>급여 계산, 지불 계산, 연말 계산 등의 업무에 사용</li></ul><h2 id="다중-프로그래밍-시스템"><a href="#다중-프로그래밍-시스템" class="headerlink" title="다중 프로그래밍 시스템"></a>다중 프로그래밍 시스템</h2><ul><li>하나의 cpu와 주기억 장치를 이용, 여러 프로그램을 돌린다</li><li>하나의 주기억장치에 두 개 이상의 프로그램을 기억시켜 놓고, 하나의 cpu와 대화하며 동시 처리</li><li>cpu 사용률과 처리량이 증가</li></ul><h2 id="시분할-시스템-time-sharing-system-round-robin-방식"><a href="#시분할-시스템-time-sharing-system-round-robin-방식" class="headerlink" title="시분할 시스템(time sharing system)(round robin 방식)"></a>시분할 시스템(time sharing system)(round robin 방식)</h2><ul><li>사용자가 여러명인 시스템에서 컴퓨터가 사용자들의 프로그램을 번갈아 가며 처리</li><li>일괄 처리 형태에서의 사용자 대기 시간을 줄이기 위한 것</li><li>cpu 전체 사용량을 작은 작업 시간량으로 나누어서 그 시간량 동안만 번갈아가면서 cpu를 할당하여 각 작업을 처리</li><li>다중 프로그래밍 방식과 결합하여 모든 작업이 동시에 진행되는 것처럼 대화식 처리 가능</li><li>시스템 전체 효율은 좋아지나 사용자 입장에서는 반응 속도가 느릴 수 있음</li><li>각 작업에 대한 응답 시간을 최소한으로 줄이는 것을 목적으로 한다.</li></ul><h2 id="다중-처리-시스템"><a href="#다중-처리-시스템" class="headerlink" title="다중 처리 시스템"></a>다중 처리 시스템</h2><ul><li>여러 개의 cpu와 하나의 주 기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식</li><li>여러 cpu는 하나의 메모리를 공유하며 단일 운영 체제에 의해 관리된다.</li><li>프로그램 처리 속도는 빠르지만 자원 공유에 대한 문제를 해결해야한다.</li></ul><h2 id="실시간-처리-시스템"><a href="#실시간-처리-시스템" class="headerlink" title="실시간 처리 시스템"></a>실시간 처리 시스템</h2><ul><li>데이터 발생, 또는 데이터 처리 요구가 있는 즉시 처리하여 결과를 산출 하는 방식</li><li>처리 시간이 단축되고 처리비용이 절감된다.</li><li>시간에 제한을 두고해야하는 업무에 적용됨( 우주선 은행 레이더 추적기 핵물리학 실험 은행의 온라인 업무)</li></ul><h2 id="다중-모드-처리"><a href="#다중-모드-처리" class="headerlink" title="다중 모드 처리"></a>다중 모드 처리</h2><ul><li>여러 모드를 섞어 쓰는 모드</li></ul><h2 id="분산-처리-시스템"><a href="#분산-처리-시스템" class="headerlink" title="분산 처리 시스템"></a>분산 처리 시스템</h2><ul><li>여러 개의 컴퓨터를 통신 회선으로 연결하여 하나의 작업을 처리하는 방식</li><li>각 단말장치나 컴퓨터 시스템은 고유의 운영체제와 cpu, 메모리를 가지고 있음</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>운영체제</title>
      <link href="/2022/03/10/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98%EA%B0%9C%EB%85%90/"/>
      <url>/2022/03/10/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98%EA%B0%9C%EB%85%90/</url>
      
        <content type="html"><![CDATA[<h1 id="운영체제란"><a href="#운영체제란" class="headerlink" title="운영체제란?"></a>운영체제란?</h1><ul><li>OS(Operating System)</li><li>컴퓨터 사용자와 하드웨어간의 인터페이스</li><li>여러 프로그램 모음집 또는 그 모임의 자원들의 효율적인 관리를 목적으로한 프로그램</li></ul><h2 id="운영체제의-목표"><a href="#운영체제의-목표" class="headerlink" title="운영체제의 목표"></a>운영체제의 목표</h2><ul><li>처리능력 향상<ul><li>일정 시간 내에 시스템이 처리하는 일의 양</li><li>일 잘하냐?</li></ul></li><li>반환 시간<ul><li>시스템에 작업을 의뢰한 시간부터 처리가 완료 될 때까지 걸린 시간</li><li>빠릿하냐</li></ul></li><li>사용 가능도<ul><li>자원이 필요할 때 즉시 사용 가능하냐</li><li>여유 있냐? 효율성이 목적이지</li></ul></li><li>신뢰도<ul><li>시스템이 주어진 문제를 정확하게 해결하는 정도</li><li>믿을만하냐?</li></ul></li></ul><h2 id="운영체제의-기능"><a href="#운영체제의-기능" class="headerlink" title="운영체제의 기능"></a>운영체제의 기능</h2><p><strong>운영체제 정의와 상이한데 전체적으로는 시스템 관리 기능이라는 틀안에서 움직인다</strong></p><ul><li>자원의 스케줄링</li><li>사용자와 시스템간의 인터페이스</li><li>하드웨어와 네트워크를 관리 및 제어</li><li>데이터와 자원 관리 및 공유</li><li>시스템 오류 검사 및 복구</li><li>자원 보호 기능</li><li>입.출력에 대한 보조 기능</li><li>VM<ul><li>VM 나온건 조곰 뜬금포 같은데?</li></ul></li></ul><h2 id="운영체제의-종류"><a href="#운영체제의-종류" class="headerlink" title="운영체제의 종류"></a>운영체제의 종류</h2><ul><li>단일 작업 시스템<ul><li>DOS</li></ul></li><li>다중 작업 처리 시스템<ul><li>Window, linux, Unix</li></ul></li></ul><h1 id="운영체제의-운용-기법"><a href="#운영체제의-운용-기법" class="headerlink" title="운영체제의 운용 기법"></a>운영체제의 운용 기법</h1><h2 id="일괄-처리-시스템"><a href="#일괄-처리-시스템" class="headerlink" title="일괄 처리 시스템"></a>일괄 처리 시스템</h2><p>[^1]: CPU 유휴시간이란 CPU가 농땡이 피우는 시간, CPU가 작업을 하지 않고 쉬는 시간</p><ul><li>초기 컴퓨터 시스템에서 사용된 형태</li><li>일정량, 일정 기간 동안 데이터를 모아 한꺼번에 처리하는 방식</li><li>일괄 처리를 위해 Job Control Language 제공해야한다</li><li>컴퓨터 시스템을 효율적으로 사용할 수 있다</li><li>반환시간이 늦지만 CPU 유휴 시간[^1]이 줄어듬<ul><li>당연한게 쉴 틈이 어딨어 일해야지</li></ul></li><li>급여 계산, 지불 계산, 연말 결산 등의 업무에 사용된다</li><li>Batch 처리에 용이하다</li></ul><h2 id="다중-프로그래밍-시스템"><a href="#다중-프로그래밍-시스템" class="headerlink" title="다중 프로그래밍 시스템"></a>다중 프로그래밍 시스템</h2><p>느낌이라면 옛날에 CPU 하나 달린 노트북 쓰는 느낌이지</p><ul><li>하나의 CPU와 주기억장치로 여러개 프로그램 동시에 처리하는 방식<ul><li>주 기억장치가 하나 이상의 프로그램을 기억하고 있어야함</li></ul></li><li>CPU 사용률과 처리량이 증가</li></ul><h2 id="시분할-시스템"><a href="#시분할-시스템" class="headerlink" title="시분할 시스템"></a>시분할 시스템</h2><ul><li>Round Robin System , Time Sharing System<ul><li>이름 값하는 시스템이지, 오래 기다리게 하기 싫으니까 적당히 기다리면서 일처리하자 이런거야</li></ul></li><li>여러 명의 사용자가 사용하는 시스템에서 컴퓨터가 사용자들의 프로그램을 돌아가면서 처리해주는 방식</li><li>일괄 처리 형태에서 사용자 대기 시간을 줄이기 위한 것이다</li><li>여러 사용자가 동시에 각자의 단말장치를 토앟여 동시에 운영체제와 대화하면서 각자의 프로그램을 실행한다<ul><li>리눅스 마스터에서 봤었나 초기 리눅스가 이러지 않았나?</li></ul></li><li>다중 프로그래밍 방식과 결합하여 대화식 처리가 가능하다</li><li>시스템 전체 효율은 좋아지지만 사용자 입장에서는 반응 속도가 느려짐</li><li>각 작업의 응답 시간을 최소한으로 줄이는 것을 목적으로 한다</li></ul><h2 id="다중-처리-시스템"><a href="#다중-처리-시스템" class="headerlink" title="다중 처리 시스템"></a>다중 처리 시스템</h2><ul><li>여러 개의 CPU와 하나의 주기억 장치를 이용하여 여러 프로그램을 동시에 처리하는 방식</li><li>안정성과 신뢰성이 높다<ul><li>CPU 하나가 고장나도 다른 친구가 대신할 수 있거든</li></ul></li><li>여러 CPU는 하나의 메모리를 공유하며 단일 운영체제에 의해 관리</li><li>프로그램 처리 속도는 빠르지만 자원 공유에 대한 문제점을 해야한다</li></ul><h2 id="실시간-처리-시스템"><a href="#실시간-처리-시스템" class="headerlink" title="실시간 처리 시스템"></a>실시간 처리 시스템</h2><ul><li>데이터 발생 즉시, 또는 데이터 처리 요구가 있는 즉시 처리하여 결과를 산출하는 방식</li><li>처리 시간 단축 및 처리 비용 절감</li><li>시간에 제한을 두고 수행도어야 하는 작업에 용이하다</li></ul><h2 id="다중-모드-처리"><a href="#다중-모드-처리" class="headerlink" title="다중 모드 처리"></a>다중 모드 처리</h2><ul><li>여러 모드를 섞어 쓰는 것이다</li></ul><h2 id="분산-처리-시스템"><a href="#분산-처리-시스템" class="headerlink" title="분산 처리 시스템"></a>분산 처리 시스템</h2><ul><li>여거 개의 컴퓨터를 통신 회선으로 연결하여 하나의 작업을 처리하는 방식이다</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조</title>
      <link href="/2022/03/10/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
      <url>/2022/03/10/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="자료-구조의-개념"><a href="#자료-구조의-개념" class="headerlink" title="자료 구조의 개념"></a>자료 구조의 개념</h1><h2 id="자료-구조의-정의"><a href="#자료-구조의-정의" class="headerlink" title="자료 구조의 정의"></a>자료 구조의 정의</h2><ul><li>자료의 표현과 그것과 고나련된 연산</li><li>일련의 자료들을 조직하고 구조화</li><li>어떠한 자료 구조에서도 필요한 모든 연산들을 처리하는 것이 가능</li><li>자료 구조에 따라 프로그램 실행시간이 달라진다.</li></ul><h2 id="자료-구조의-이용"><a href="#자료-구조의-이용" class="headerlink" title="자료 구조의 이용"></a>자료 구조의 이용</h2><ul><li>정렬 : 기억 장치 내의 자료를 일정한 순서에 의해 나열하는 것</li><li>검색 : 기억장치 내의 자료를 찾는 것</li><li>파일 편성 : 자료를 기억 매체에 저장할 때의 파일 구조</li><li>인덱스 : 파일에서 특정 자료를 빠르게 찾기 위한 색인표</li></ul><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><h2 id="스택의-개념"><a href="#스택의-개념" class="headerlink" title="스택의 개념"></a>스택의 개념</h2><ul><li><p>LIFO &#x3D; 후입 선출 방식</p></li><li><p>TOP</p><ul><li>STACK으로 할당된 기억 공간에 가장 마지막으로 삽입된 자료가 기억된 위치를 가리키는 요소</li><li>STACK 포인터라고 하기도 함</li></ul></li><li><p>BOTTOM</p><ul><li>스택의 가장 밑바닥</li></ul></li></ul><h2 id="스택의-응용-분야"><a href="#스택의-응용-분야" class="headerlink" title="스택의 응용 분야"></a>스택의 응용 분야</h2><ul><li>부 프로그램 호출 시 복귀주소를 저장할 때</li><li>함수 호출의 순서 제어</li><li>인터럽트가 발생하여 복귀주소를 저장할 때</li><li>후위 표기법으로 표현된 수식을 연산 할 때</li><li>0 주소 지정방식 명령어의 자료 저장소</li><li>재귀 프로그램의 순서 제어</li><li>컴파일러를 이용한 언어 번역 시</li></ul><h1 id="QUE-와-DEQUE"><a href="#QUE-와-DEQUE" class="headerlink" title="QUE 와 DEQUE"></a>QUE 와 DEQUE</h1><h2 id="QUE"><a href="#QUE" class="headerlink" title="QUE"></a>QUE</h2><ul><li><p>선형 리스트의 한쪽에서는 삽입, 다른 한쪽에는 삭제 작업이 이루어지도록 구성한 자료구조</p></li><li><p>FIFO 방식</p></li><li><p>시작과 끝을 표시하는 두 개의 포인터가 있다.</p></li><li><p>Front 포인터</p><ul><li>가장 먼저 삽입 되는 자료의 기억 공간을 가리킴</li><li>삭제 잡업을 할 때 사용</li></ul></li><li><p>REAR 포인터</p><ul><li>가장 마지막에 삽입된 자료의 기억 장소를 가리키는 포인터</li><li>삽입 작업을 할 때 사용</li></ul></li><li><p>큐 응용</p><ul><li>대기 행렬 처리</li><li>운영체제의 작업 스케줄링</li></ul></li></ul><h2 id="DEQUE"><a href="#DEQUE" class="headerlink" title="DEQUE"></a>DEQUE</h2><ul><li><p>삽입과 삭제가 리스트의 양쪽 끝에서 모두 발생할 수 있는 자료 구조</p></li><li><p>stack과 queue의 장점만 따서 구성한것이다.</p></li><li><p>입력 제한 데크 : scroll</p></li><li><p>출력 제한 데크 : shelf</p></li></ul><h1 id="트리-tree"><a href="#트리-tree" class="headerlink" title="트리(tree)"></a>트리(tree)</h1><h2 id="트리의-정의"><a href="#트리의-정의" class="headerlink" title="트리의 정의"></a>트리의 정의</h2><ul><li>트리는 정점(node)와 선분(branch)를 이용하여 사이클을 이루지 않도록 구성한 graph의 특수한 형태이다</li></ul><h2 id="트리-관련-용어"><a href="#트리-관련-용어" class="headerlink" title="트리 관련 용어"></a>트리 관련 용어</h2><ul><li>node : 트리의 기본 요소로서 자료 항목과 다른 항목에 대한 가지를 합친 것</li><li>root node : 트리 맨 위에 있는 노드</li><li>degree : 각 노드에 뻗어나온 가지의 수</li><li>단말 노드(termianl node) : 자식이 없는 노드</li></ul><h1 id="이진-트리의-운행법"><a href="#이진-트리의-운행법" class="headerlink" title="이진 트리의 운행법"></a>이진 트리의 운행법</h1><h2 id="트리의-운행범"><a href="#트리의-운행범" class="headerlink" title="트리의 운행범"></a>트리의 운행범</h2><ul><li>Pre order : root - left -right</li><li>In order : left - order - right</li><li>Post order : left - right - root</li></ul><h2 id="수식의-표기법"><a href="#수식의-표기법" class="headerlink" title="수식의 표기법"></a>수식의 표기법</h2><ul><li>전위 표기</li><li>후위 표기</li><li>중위 표기 : 우린 보통 중위 표기</li></ul><h2 id="스레드-이진-트리"><a href="#스레드-이진-트리" class="headerlink" title="스레드 이진 트리"></a>스레드 이진 트리</h2><ul><li><p>이진트리에서 발생하는 null 링크를 트리 운행에 필요한 다른 노드의 포인터로 사용하도록 고안된 트리</p></li><li><p>어떻게 사용하는가?</p><ul><li>어떤 노드의 왼쪽이 nil일 경우, 그 노드 직전에 검사된 노드를 가리키는 포인터로 사용</li><li>어떤 노드의 오른쪽이 nil일 경우, 그 노드의 직후에 검사될 노드를 가리키는 포인터로 사용</li></ul></li><li><p>해당 노드의 직전, 직후 노드는 트리의 운행법에 따라 방문한 노드의 순서대로 결정한다.</p></li></ul><h1 id="그래프"><a href="#그래프" class="headerlink" title="그래프"></a>그래프</h1><h2 id="그래프의-정의"><a href="#그래프의-정의" class="headerlink" title="그래프의 정의"></a>그래프의 정의</h2><ul><li>그래프 G는 정점과 간선의 두 집합으로 이루어진다.</li><li>간선의 방향성 유무에 따라 방향 그래프와 무방향 그래프로 구분된다.</li><li>tree는 사이클이 없는 그래프이다.</li></ul><h2 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h2><ul><li>Loop : 한 정점에서 그 자신에 이어지는 간선 loop</li><li>차수(degree)<ul><li>무방향 그래프 : 한 정점에 여결된 간선의 수</li><li>방향 그래프 : 진입 차수 + 진출 차수</li></ul></li></ul><ul><li>경로<ul><li>경로 길이 : 경로 상에 있는 간선들의 수</li><li>단순 경로 : 같은 간선을 두번 이상 지나지 않는 경로</li><li>기본 경로 : 같은 정점을 두번 이상 지나지 않는 경로</li><li>사이클 : 같은 정점에서 시작과 끝이 이루어지는 경로</li><li>최대 사이클 : 사이클을 이루는 경로 중 최대 경로 길이</li></ul></li></ul><h1 id="내부-정렬"><a href="#내부-정렬" class="headerlink" title="내부 정렬"></a>내부 정렬</h1><h2 id="삽입-정렬"><a href="#삽입-정렬" class="headerlink" title="삽입 정렬"></a>삽입 정렬</h2><ul><li>순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬</li><li>평균 최악 모두 수행 시간 복잡도는 O(n^2)</li></ul><h2 id="쉘-정렬"><a href="#쉘-정렬" class="headerlink" title="쉘 정렬"></a>쉘 정렬</h2><ul><li>삽입 정렬을 확장한 개념</li><li>입력 파일이 부분적으로 정렬되어 있는 경우에 유리</li><li>평균 수행 복잡도는 n^1.5, 최악의 수행 시간 복잡도는 n^2</li></ul><h2 id="선택-정렬"><a href="#선택-정렬" class="headerlink" title="선택 정렬"></a>선택 정렬</h2><ul><li>n개의 레코드 중에서 최소값을 찾아 첫 번째 레코드 위치에 두고 나머지 (n-1)개중에 앞의 행위를 반복함</li><li>평균과 최악 모두 수행시간 복잡도는 n^2</li></ul><h2 id="버블-정렬"><a href="#버블-정렬" class="headerlink" title="버블 정렬"></a>버블 정렬</h2><ul><li>주어진 파일에서 인접한 두개의 레코드 키값을 비교하여 그 크기에 따라 레코드 위치를 서로 교환하는 정렬 방식</li><li>계속 정렬 여부를 플래그 비트로 결정</li><li>평균과 최악 모두 수행 시간 복잡도는 n^2</li></ul><h2 id="퀵-정렬"><a href="#퀵-정렬" class="headerlink" title="퀵 정렬"></a>퀵 정렬</h2><ul><li>위치에는 관계없이 임의의 키를 분할 원소로 사용할 수 있다.</li><li>정렬 방식 중 가장 빠른 방식이다</li><li>분할과 정복을 통해 자료를 정렬한다.</li><li>평균 수행 시간 복잡도는 nlog2n이고 최악의 수행시간 복잡도는 n^2</li></ul><h2 id="힙-정렬"><a href="#힙-정렬" class="headerlink" title="힙 정렬"></a>힙 정렬</h2><ul><li>전이진 트리를 이용한 정렬 방식이다.</li><li>평균과 최악 모두 시간 복잡도는 nlog2n이다.</li></ul><h2 id="2-way-합병-정렬"><a href="#2-way-합병-정렬" class="headerlink" title="2-way 합병 정렬"></a>2-way 합병 정렬</h2><ul><li>이미 정렬되어 있는 두 개의 파일을 한 개의 파일로 합병하는 정렬 방식이다.</li><li>평균과 최악 모두 시간 복잡도는 nlog2n</li></ul><h2 id="기수-정렬"><a href="#기수-정렬" class="headerlink" title="기수 정렬"></a>기수 정렬</h2><ul><li>기수 정렬은 queue를 이용하여 자릿수별로 정렬하는 방식이다.</li><li>평균과 최악 모두 시간 복잡도는 dn이다.</li></ul><h1 id="검색-해싱"><a href="#검색-해싱" class="headerlink" title="검색 - 해싱"></a>검색 - 해싱</h1><h2 id="해싱의-개요"><a href="#해싱의-개요" class="headerlink" title="해싱의 개요"></a>해싱의 개요</h2><ul><li>DAM(직접 접근) 파일을 구성할 때 사용되며 접근 속도는 빠르나 기억공간이 많이 요구된다.</li><li>다른 방식에 비해 검색 속도가 가장 빠르다</li><li>삽입 삭제 작업의 빈도가 많을 때 유리한 방식이다.</li><li>키 - 주소 변환 방법이라고도 한다.</li></ul><h2 id="해싱-관련-용어"><a href="#해싱-관련-용어" class="headerlink" title="해싱 관련 용어"></a>해싱 관련 용어</h2><ul><li>Hash table : 레코드를 한 개 이상 보관할 수 있는 bucket들로 구성된 기억공간, 보조기억장치, 주기억장치에 구성할 수 있다.</li><li>버킷 : 하나의 주소를 갖는 파일의 한 구역을 의미, 버킷의 크기는 같은 주소에 포함 될 수 있는 레코드의 수를 의미</li><li>slot : 한 개의 레코드를 저장할 수 있는 공간으로 n개의 슬롯이 모여 하나의 버킷 형성</li><li>Collision(충돌 현상) : 서로 다른 두 개 이상의 레코드가 같은 주소를 갖는 현상</li><li>Synonym : 충돌로 인해 같은 home address를 갖는 레코드들의 집합이다</li><li>Overflow : 계산된 home address의 bucket 내에 저장할 기억공간이 없는 상태</li></ul><h2 id="해싱-함수"><a href="#해싱-함수" class="headerlink" title="해싱 함수"></a>해싱 함수</h2><ul><li><p>K : KEY ,Q &#x3D; Prime</p></li><li><p>제산법</p><ul><li>레코드 키를 해시표의 크기보다 큰 수 중에서 가장 작은 소수로 나눈 나머지를 홈 주소로 삼는 방식</li><li>h(K) &#x3D; K mod Q</li></ul></li><li><p>제곱법</p><ul><li>레코드 키 값을 제곱한 후 그 중간 부분의 값을 홈 주소로 삼는 방식</li></ul></li><li><p>폴딩법</p><ul><li>레코드 키 값을 여러 부분으로 나눈 후 각 부분의 값을 더하거나 XOR한 값을 홈 주소로 삼는 방식이다.</li></ul></li><li><p>기수 변환법</p><ul><li>키 숫자의 진수를 다른 진수로 변환시켜 주소 크기를 초과한 높은 자릴수는 절단하고 이를 다시 주소범위에 맞게 조정하는 방법이다.</li></ul></li><li><p>대수적 코딩</p><ul><li>키 값을 이루고 있는 각 자리의 비트 수를 한 다항식의 계수로 간주 하고 이 다항식을 해시표의 크기에 의해 정의된 다항식으로 나누어 얻은 나머지 다항식의 계수를 홈주소로 삼는 방식이다.</li></ul></li><li><p>계수 분석법</p><ul><li>계수 분석법은 키 값을 이루는 숫자의 분포를 분석하여 비교적 고른 자리를 필요한만큼 택해서 홈 주소로 삼는 방식이다.</li></ul></li></ul><h2 id="Overflow-해결-방법"><a href="#Overflow-해결-방법" class="headerlink" title="Overflow 해결 방법"></a>Overflow 해결 방법</h2><ul><li>개방 주소법(open addressing)<ul><li>선형 방법이라고도 하는데, collision이 발생했을 때 순차적으로 다음 빈 버킷을 찾아 저장하는 방법</li></ul></li><li>폐쇄 주소법(close addressing)<ul><li>Overflow된 레코드들을 별도의 overflow 영역에 저장하고 chain으로 홈버킷에 연결</li><li>direct chaining<ul><li>해시표 내의 <strong>빈 자리</strong> 에 overflow 레코드를 보관</li></ul></li><li>indirect chaining<ul><li>해시표와는 별도의 기억 공간에 overflow 레코드를 보관한다.</li></ul></li></ul></li><li>재해싱<ul><li>collision이 발생하면 새로운 해싱 함수로 새로운 홈 주소를 구하는 방식</li></ul></li></ul><h1 id="파일-편성"><a href="#파일-편성" class="headerlink" title="파일 편성"></a>파일 편성</h1><h2 id="순차-파일-sequential-file-x3D-순서-파일"><a href="#순차-파일-sequential-file-x3D-순서-파일" class="headerlink" title="순차 파일 (sequential file) &#x3D; 순서 파일"></a>순차 파일 (sequential file) &#x3D; 순서 파일</h2><ul><li><p>입력되는 데이터들을 논리적 순서에 따라 물리적 연속 공간에 순차적으로 기록하는 방식</p><ul><li>순차접근이 가능한 자기테이프에서 사용한다.</li><li>변동사항이 크지 않고 기간별로 일괄 처리를 주로 하는 경우에 적합</li></ul></li><li><p>순차 파일의 장점</p><ul><li>기록 밀도가 높아 기억공간을 효율적으로 사용</li><li>매체 변환이 쉬워 어떠한 매체에도 적용할 수 있다.</li><li>레코드가 키 순서대로 편성되어 취급이 용이하다</li><li>레코드를 기록할 때 <strong>사용한 키</strong> 순서대로 레코드를 처리하는 경우 다른 편성법 보다 처리 속도가 빠르다</li></ul></li><li><p>순차 파일의 단점</p><ul><li>파일에 새로운 레코드를 삽입,삭제하는 경우 파일 재구성을 위해 전체를 복사해야하므로 시간이 많이 소요</li><li>데이터 검색시 처음부터 순차적으로 검색하기 때문에 검색 효율이 낮고, 시간 및 응답 시간이 느림</li></ul></li></ul><h2 id="색인-순차-파일-indexed-sequential-file"><a href="#색인-순차-파일-indexed-sequential-file" class="headerlink" title="색인 순차 파일(indexed sequential file)"></a>색인 순차 파일(indexed sequential file)</h2><ul><li>순차 처리와 랜덤 처리가 모두 가능한 레코드들을 키값 순으로 정렬시켜 기록하고, 레코드의 키 항목만을 모은 색인을 구성하여 편성하는 방식<ul><li>색인을 이용한 순차적인 접근 방법을 제공하여 ISAM(index sequential access method)이라고 함</li><li>레코드를 참조할 때 색인을 탐색한 후 색인이 가리키는 포인터(주소)를 사용하여 직접 참조할 수 있다.</li><li>일반적으로 자기 디스크에 많이 사용되며, 자기 테이프에서는 사용할 수 없다.</li></ul></li></ul><h3 id="색인-순차-파일의-구성"><a href="#색인-순차-파일의-구성" class="headerlink" title="색인 순차 파일의 구성"></a>색인 순차 파일의 구성</h3><ul><li><p>색인 순차 파일은 기본구역, 색인 구역, 오버플로 구역으로 구성</p></li><li><p>기본 구역</p><ul><li>실제 레코드들을 기록하는 부분으로 각 레코드는 <strong>키 값</strong> 순으로 저장</li></ul></li><li><p>색인 구역</p><ul><li>기본 구역에 있는 레코드들의 위치를 찾아가는 색인이 기록되는 부분으로 트랙 색인 구역, 실린더 색인 구역, 마스터 색인 구역이 있다.</li></ul><table><thead><tr><th>색인 구역</th><th>기능</th></tr></thead><tbody><tr><td>트랙 색인 구역</td><td>기본 구역의 한 트랙 상에 기록되어 있는 데이터 레코드 중의 최대 키 값과 주소가 기록되는 색인으로, 한 실린더당 하나씩 만들어진다.</td></tr><tr><td></td><td>처리할 레코드가 실제로 어느 트랙에 기록되어 있는지 판별할 수 있게 함</td></tr><tr><td>실린더 색인 구역</td><td>각 트랙 색인의 최대키 값과 해당 레코드가 기록된 실린더의 정보가 기록되는 색인, 한 파일당 하나씩 만들어진다.</td></tr><tr><td>마스터 색인 구역</td><td>실린더 색인 구역의 정보가 많을 경우 그것을 일정한 크기의 블록으로 구성하는데, 이때 해당 레코드가 어느 실린더 색인 구역에 기록되어 있는지를 기록하는 색인</td></tr></tbody></table></li><li><p>오버플로 구역</p><ul><li>기본 구역에 빈 공간이 없어 새 레코드가 삽입 불가할 때 대비하여 예비적으로 확보해둔 부분</li></ul><table><thead><tr><th>오버플로 구역</th><th>기능</th></tr></thead><tbody><tr><td>실린더 오버플로 구역</td><td>각 실린더마다 만들어지는 오버플로 구역,해당 실린더의 오버플로 내용을 기록</td></tr><tr><td>독립 오버플로 구역</td><td>실린더 오버플로 구역에서 데이터를 더이상 기록 할 수 없을 때를 대비하는 구역</td></tr></tbody></table></li><li><p>색인 순차 파일의 장점</p><ul><li>융통성</li><li>효율적인 검색 가능, 레코드의 삽입 삭제 갱신이 용이</li><li>레코드를 추가 및 삽입하는 경우, 파일 전체를 복사할 필요가 없음</li></ul></li><li><p>색인 순차 파일의 단점</p><ul><li>색인 구역과 오버플로 구역을 구성하기 위한 추가 기억공간이 필요</li><li>파일 사용 중 오버플로 레코드가 많아지면 파일을 재편성해야한다.</li><li>파일이 정렬되어 있어야 하므로 추가 삭제가 많으면 효율이 떨어짐</li><li>색인을 이용하여 액세스 하기 때문에 액세스 시간이 랜덤 편성 파일보다 느리다.</li></ul></li></ul><h2 id="VSAM-파일"><a href="#VSAM-파일" class="headerlink" title="VSAM 파일"></a>VSAM 파일</h2><ul><li>VSAM : Virtual storage access method ,동적 인덱스 방법을 이용한 색인 순차 파일</li><li>제어 구간, 제어 구역, 순차 세트 , 인덱스 세트로 구성</li></ul><table><thead><tr><th>이름</th><th>기능</th></tr></thead><tbody><tr><td>제어 구간</td><td>데이터 레코드가 저장되는 부분</td></tr><tr><td>제어 구역</td><td>몇 개의 제어 구간을 모아 놓은 것</td></tr><tr><td>순차 세트</td><td>제어 구역에 대한 인덱스를 저장한 것</td></tr><tr><td>안덱스 세트</td><td>순차 세트의 상위 인덱스</td></tr></tbody></table><ul><li>기본 구역과 오버플로 구역을 구분하지 않음</li><li>레코드를 삭제하면 그 공간을 재사용할 수 있다.</li><li>제어 구간에 가변 길이 레코드를 쉽게 수용할 수 있다.</li></ul><h2 id="직접-파일-direct-file-random-file"><a href="#직접-파일-direct-file-random-file" class="headerlink" title="직접 파일(direct file, random file)"></a>직접 파일(direct file, random file)</h2><ul><li><p>DAM파일이라고도 불림</p></li><li><p>레코드에 특정 기준으로 키 할당, 해시 함수를 이용하여 키에 대한 보조기억장치의 물리적 상대 레코드 주소를 계싼한 후 해당하는 주소에 레코드를 저장</p></li><li><p>레코드는 해시 함수에 의해 계산된 물리적 주소를 통해 접근</p></li><li><p>임의 접근이 가능한 자기 디스크나 자기드럼을 사용</p></li><li><p>직접 파일의 장점</p><ul><li>직접 접근 기억장치(DASD)의 물리적 주소를 통하여 파일의 각 레코드에 직접 접근하거나 기록할 수 있으며 접근 및 기록의 순서에는 제약이 없다.</li><li>접근 시간이 빠르고 레코드의 삽입, 삭제, 갱신이 용이</li><li>어떤 레코드라도 평균 접근 시간 내에 검색이 가능하다.</li></ul></li><li><p>직접 파일의 단점</p><ul><li>레코드의 주소 변환과정(HASH)이 필요하며 이 과정으로 시간이 소요 됨</li><li>기억 공간의 효율이 저하될 수 있음</li><li>기억 장치의 물리적 구조에 대한 지식 필요, 프로그래밍 작업이 복잡</li><li>충돌이 발생할 염려가 있으므로, 이를 위한 기억공간의 확보가 필요</li></ul></li></ul><h2 id="역-파일"><a href="#역-파일" class="headerlink" title="역 파일"></a>역 파일</h2><ul><li><p>특정 항목을 여러 개의 색인으로 만들어 항목별 특성에 맞게 작업할수 있도록 한 파일로, 다중 키 파일에 속한다.</p><ul><li>하나 또는 몇 개의 색인값을 결합하여 레코드의 주소를 결정할 수 있다.</li><li>각 응용마다 적합한 색인을 별도로 구현 할 수 있다.</li><li>새로운 레코드를 파일 중간에 삽입하기 쉽고, 검색 속도가 빠르다</li><li>데이터 파일에 접근하지 않아 질의 응답시간이 줄어들고, 처리가 비교적 쉽다.</li><li>질의를 만족하는 레코드 검색 시 한 번씩만 접근하면 된다.</li><li>색인의 각 항목들의 길이가 가변적이다.</li></ul></li></ul><h2 id="다중-리스트-파일"><a href="#다중-리스트-파일" class="headerlink" title="다중 리스트 파일"></a>다중 리스트 파일</h2><ul><li>다중 키 파일의 한 종류로 각 키에 대하여 색인을 만든 다음 각 데이터 레코드들 간에 다 중 리스틀 구축하여 구성한 파일이다.<ul><li>색인은 동일한 키 값을 갖는 데이터 레코드 중 하나의 레코드에 대한 포인터만을 갖고 후속데이터는 포인터로 추적하도록함</li><li>색인의 각 항목들의 길이가 고정적이므로 관리가 용이하며 수정 삭제 전체 검색이 효율적</li></ul></li></ul><h2 id="다중-링-파일"><a href="#다중-링-파일" class="headerlink" title="다중 링 파일"></a>다중 링 파일</h2><ul><li>다중 링 파일은 같은 특성을 가진 레코드들을 일련의 포인터로 연결하여 구성한 것이다.</li><li>같은 항목값을 가진 레코드들을 한꺼번에 처리하는 데 효과적이다.</li><li>기억 장소가 절약되고 자료의 중복성을 배제할 수 있다.</li><li>레코드 형식이 다른 경우에도 처리가 가능하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>정규화(실기)</title>
      <link href="/2022/03/10/%EC%A0%95%EA%B7%9C%ED%99%94-%EC%8B%A4%EA%B8%B0/"/>
      <url>/2022/03/10/%EC%A0%95%EA%B7%9C%ED%99%94-%EC%8B%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="이상"><a href="#이상" class="headerlink" title="이상"></a>이상</h2><ul><li>데이터베이스의 논리적 설계 시 데이터 중복과 종속으로 인해 발생되는 문제점</li><li>이상 현상은 릴레이션 처리하는데 여러 가지 문제를 초래하게 된다.</li><li>이상의 종류에는 삭제 이상 삽입 이상 갱신 이상이 있다.</li></ul><h3 id="삭제-이상"><a href="#삭제-이상" class="headerlink" title="삭제 이상"></a>삭제 이상</h3><ul><li>테이블에서 하나의 자료를 삭제하고자 하는 경우 그 자료가 포함된 튜플이 삭제됨으로 인해 원하지 않은 자료까지 함께 삭제가 이루어져 발생하는 문제점을 말한다</li></ul><h3 id="삽입-이사"><a href="#삽입-이사" class="headerlink" title="삽입 이사"></a>삽입 이사</h3><ul><li>삽입 과정에서 원하지 않는 자료가 삽입됬을 때</li><li>삽입 과정에서 자료가 부족해 삽입이 되지 않아 발생하는 문제점</li></ul><h3 id="갱신-이상"><a href="#갱신-이상" class="headerlink" title="갱신 이상"></a>갱신 이상</h3><ul><li>관계 데이터베이스의 자료를 갱신하는 과정에서 갱신 과정이 정확하지 않거나 일부 튜플만 갱신됬을 때</li><li>정보가 모호해지거나 일관성이 없어지는 현상을 말한다</li></ul><h2 id="함수정-종속"><a href="#함수정-종속" class="headerlink" title="함수정 종속"></a>함수정 종속</h2><ul><li>어떤 릴레이션에서 속성 A , B 가 있을 때<ul><li>A의 값을 알면 B의 값을 알 수 있을 때</li><li>A의 값이 B의 값에 따라 달라질 때</li></ul></li></ul><h3 id="완전-함수-종속"><a href="#완전-함수-종속" class="headerlink" title="완전 함수 종속"></a>완전 함수 종속</h3><ul><li>릴레이션에서 한 속성이 오직 기본 키에만 종속이 되는 경우</li></ul><h3 id="부분-함수-종속"><a href="#부분-함수-종속" class="headerlink" title="부분 함수 종속"></a>부분 함수 종속</h3><ul><li>한 속성이 기본키가 2개 이상 복합 키로 구성된 경우 이 중 일부 속성에 ㅈ오속 되는 경우를 말함</li></ul><h3 id="이행적-함수-종속"><a href="#이행적-함수-종속" class="headerlink" title="이행적 함수 종속"></a>이행적 함수 종속</h3><ul><li>릴레이션에서 속성 A, B, C가 있을 때 A - B - C 이렇게 연속적으로 관계를 알수 있을 때 이행적 함수 종속이라고한다.</li></ul><h2 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h2><ul><li>논리적 설계단계에서 발생할 수 있는 종속으로 인한 이상의 문제 해결을 목적으로함</li><li>속성들 간의 종속 관계를 분석하여 여러 개의 릴레이션으로 분해하는 과정</li></ul><ol><li>제 1정규형<ul><li>한 릴레이션을 구성하는 모든 도메인이 원자값으로만 구성되도록하는 정규형</li></ul></li><li>제 2정규형<ul><li>릴레이션의 모든 속성이 기본키에 완저 함수 종속 되도록 분해하는 과정</li></ul></li><li>제 3정규형<ul><li>이행적 함수 종속 관계를 분해하여 비이행적 함수 종속이 되도록하는 과정</li></ul></li><li>보이스-코드 정규형(BCNF)<ul><li>릴레이션에서 모든 결정자가 후보키가 되도록 하는 과정</li></ul></li><li>제 4정규형<ul><li>다치 종속 관계가 성립되는 경우 분해하는 정규형</li></ul></li><li>제 5정규형<ul><li>릴레이션에 존재하는 조인 종속이 후보키를 통해서만 성립이 되도록하는 정규형</li></ul></li></ol><h2 id="역-정규화"><a href="#역-정규화" class="headerlink" title="역 정규화"></a>역 정규화</h2><ul><li>실제로는 정규화시 성능 저하가 발생할 수 있음(잦음 참조 때문에)</li><li>물리적 데이터 모델링 과정에서 성능을 향상시키기 위해 중복을 허용하고 다시 통합 분할하여 구조를 재조정하는 것을 말한다</li></ul><h3 id="역정규화의-종류"><a href="#역정규화의-종류" class="headerlink" title="역정규화의 종류"></a>역정규화의 종류</h3><h4 id="릴레이션-역정규화"><a href="#릴레이션-역정규화" class="headerlink" title="릴레이션 역정규화"></a>릴레이션 역정규화</h4><ul><li>릴레이션 병합</li><li>릴레이션 분할<ul><li>릴레이션은 스캔 방법으로 검색한다</li><li>수직 분할(속성 분할)</li><li>수평 분할(튜플 분할)</li></ul></li></ul><h4 id="속성-역정규화"><a href="#속성-역정규화" class="headerlink" title="속성 역정규화"></a>속성 역정규화</h4><ul><li>속성추가</li><li>파생속성 추가<ul><li>현재 릴레이션에 없는 속성이지만 작업의 효율을 위해 한 속성으로부터 계산이나 기타 가공에 의해 파생되는 속성</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>정보 시스템</title>
      <link href="/2022/03/10/%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
      <url>/2022/03/10/%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="자료와-정보"><a href="#자료와-정보" class="headerlink" title="자료와 정보"></a>자료와 정보</h2><ul><li>자료 : 현실에서 수집한 자료나 정보로 가공되지 않은 상태</li><li>정보 : 의사 결정에 도움을 줄 수 있는 유용한 형태, 가공 되어 있는 상태</li></ul><h2 id="정보-시스템의-정의"><a href="#정보-시스템의-정의" class="headerlink" title="정보 시스템의 정의"></a>정보 시스템의 정의</h2><ul><li>정보 시스템이란 조직체에 필요한 DATA를 수집, 저장해 두었다가 필요 시에 의사결정에 유용한 정보를 생성하고 분배하는 시스템</li></ul><h2 id="자료-처리-시스템"><a href="#자료-처리-시스템" class="headerlink" title="자료 처리 시스템"></a>자료 처리 시스템</h2><p>정보 시스템이 사용할 자료를 처리하는 정보 시스템의 서브 시스템</p><ul><li>일괄 처리 시스템<ul><li>일정량의 데이터를 모아 한꺼번에 처리한다</li><li>시스템 중심의 자료 처리 방법</li><li>반환 시간이 늦지만 CPU 유휴시간이 작음</li><li>순차 접근 방법을 사용하는 업무에 적합</li><li>단위 시간당 처리하는 작업수가 많아 시스템의 성능은 높아</li><li>트랙잭션당 처리 비용이 적다</li></ul></li><li>온라인 실시간 처리 시스템<ul><li>데이터 발생, 처리 요구가 있는 즉시 처리하여 결과를 산출하도록 하는 방식</li><li>사용자 중심의 처리 방식</li><li>처리 시간이 단축되고 처리 비용이 절감</li><li>시간에 제한을 두고 수행되어야 하는 작업에 사용된다</li></ul></li><li>분산 처리시스템<ul><li>지리적으로 분산되어 있는 여러 대의 컴퓨터를 통신 회선으로 연결하여 논리적으로 하나의 시스템처럼 사용하는 방식</li><li>각 단말마다 고유의 운영체제와 CPU, 메모리를 가지고 있다</li><li>시스템의 구축이나 운영이 복잡한 반면, 신뢰성이 높고 확장이 용이</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>컴파일러와인터프리터</title>
      <link href="/2022/03/10/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/"/>
      <url>/2022/03/10/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="프로그래밍-언어"><a href="#프로그래밍-언어" class="headerlink" title="프로그래밍 언어"></a>프로그래밍 언어</h1><p>컴퓨터와 대화하기 위해 필요한 언어이지 우리가 다른 나라 말 배우는 이유랑 같은 거라 생각한다</p><ul><li>크게 저급 언어, 고급 언어로 나뉘는데 기준이라면 인간과 기계 누구에게 맞춰줘 있냐가 포인트야</li></ul><h2 id="저급-언어"><a href="#저급-언어" class="headerlink" title="저급 언어"></a>저급 언어</h2><ul><li>기계어<ul><li>컴퓨터가 직접 이해할 수 있는 언어</li><li>수행시간이 빠르다</li><li>우리가 흔히 아는 0과 1 방식</li><li>언어의 호환성이 없다</li><li>cpu 내장 명령을 직접 사용하는 것으로 프로그램을 작성하고 이해하기 어렵다<ul><li>기억해봐 micro operation 답답하잖아</li></ul></li></ul></li><li>어셈블리어<ul><li>기계어와 1 : 1로 대응되는 기호로 이루어진 언어</li><li>하드웨어 제어에 주로 사용되며 역시나 언어의 호환성은 없다</li><li>컴퓨터가 직접 이해 못하므로 어셈블러로 기계어로 번역해줘야함</li></ul></li></ul><h2 id="고급-언어"><a href="#고급-언어" class="headerlink" title="고급 언어"></a>고급 언어</h2><ul><li>보통은 컴파일 해야하는 언어들을 의미하지</li><li>인간 친화적이야 <strong>그나마</strong></li><li>하드웨어에 대한 깊은 지식이 없어도 프로그램을 만들 수 있어</li><li>컴파일러나 인터프리터가 필요하다<ul><li>역시나 기계어로 번역하기 위해</li></ul></li></ul><h1 id="컴파일러와-인터프리터"><a href="#컴파일러와-인터프리터" class="headerlink" title="컴파일러와 인터프리터"></a>컴파일러와 인터프리터</h1><p>컴파일러와 인터프리터도 결국은 번역긴데 좀 있어 보이게 말하자면 Source Program을 Object프로그램으로 바꾸는 역할을 해</p><h2 id="컴파일러"><a href="#컴파일러" class="headerlink" title="컴파일러"></a>컴파일러</h2><ul><li>프로그램 전체를 번역한 후 링킹 작업을 통해 컴퓨터에서 실행 가능한 실행 프로그램을 생성한다<ul><li>우리가 흔히 보는 C 언어</li></ul></li><li>번역 과정이 번거럽고 오래 걸리지만 한 번 번역하면 다시 번역하지 않아도 되니까 실행 속도가 빠르다</li></ul><h2 id="인터-프리터"><a href="#인터-프리터" class="headerlink" title="인터 프리터"></a>인터 프리터</h2><p>인터프리터 특징에서 오는 단점이 대부분인거 같아</p><ul><li>한 줄 단위로 프로그램을 번역한다. 프로그램을 실행시킬 때마다 다시 번역한다</li><li>목적 프로그램이 생성되지 않아</li><li>시분할 시스템에 유용하다</li><li>원시 프로그램 변화에 민감하다</li><li>번역 속도는 빠르지만 매번 번역하니까 실행 속도가 느려<ul><li>파이썬으로 서비스 만들어서 돌리면 느리잖아 느낌알지?</li></ul></li><li>cpu 사용 시간의 낭비가 크다</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프로세스 관리</title>
      <link href="/2022/03/10/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B4%80%EB%A6%AC/"/>
      <url>/2022/03/10/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B4%80%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="프로세스-관리"><a href="#프로세스-관리" class="headerlink" title="프로세스 관리"></a>프로세스 관리</h1><h2 id="프로세스의-정의"><a href="#프로세스의-정의" class="headerlink" title="프로세스의 정의"></a>프로세스의 정의</h2><ul><li><p>프로세서에 의해 처리되는 실행중인 프로그램을 의미</p></li><li><p>운영체제에서는 job , task라고 한다.</p></li><li><p>프로세스의 종류</p><ul><li>PCB를 가진 프로그램</li><li>실기억장치에 저장된 프로그램</li><li>프로세서가 할당되는 실체</li><li>프로시저가 활동중인 것</li><li>비동기적 행위를 일으키는 주체</li><li>지정된 결과를 얻기 위한 일련의 계통적 동작</li><li>목적 또는 결과에 따라 발생되는 사건들의 과정</li></ul></li></ul><h2 id="PCB-Process-Control-Block-job-control-block"><a href="#PCB-Process-Control-Block-job-control-block" class="headerlink" title="PCB(Process Control Block)(job control block)"></a>PCB(Process Control Block)(job control block)</h2><ul><li>운영체제가 프로세스에 관한 중요한 정보를 저장해 놓은 곳</li><li>각 프로세스가 생성될 때마다 고유의 pcb가 생성되고, 프로세스가 완료되면 제거된다.</li><li>PCB에 저장된 정보<ul><li>프로세스의 현재 상태</li><li>포인터</li><li>프로세스 고유 식별자</li><li>스케쥴링 및 프로세스의 우선 순위</li><li>CPU 레지스터 정보</li><li>주기억장치 관리 정보</li><li>입출력 상태 정보</li><li>계정 정보</li></ul></li></ul><h2 id="프로세스-상태-전이"><a href="#프로세스-상태-전이" class="headerlink" title="프로세스 상태 전이"></a>프로세스 상태 전이</h2><ul><li>프로세스가 시스템 내에 존재하는 동안 프로세스의 상태가 변하는 것을 의미</li></ul><h3 id="프로세스-상태"><a href="#프로세스-상태" class="headerlink" title="프로세스 상태"></a>프로세스 상태</h3><ul><li>제출(Submit)<ul><li>작업 처리를 위해 사용자가 작업을 시스템에 제출한 상태</li></ul></li><li>접수(Hold)<ul><li>제출된 작업이 디스크(스풀 공간)에 저장된 상태</li></ul></li><li>준비(Ready)<ul><li>프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태</li><li>프로세스는 준비상태 큐(스케쥴링 큐)에서 실행을 준비 중</li><li>접수 상태에서 준비 상태로의 전이는 Job 스케줄러에 의해 수행된다</li><li>준비 리스트에 있는 프로세스는 각각 우선순위가 주어진다.</li></ul></li><li>실행(Run)<ul><li>준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태</li><li>프로세스가 수행 완료전 프로세서 할당시간이 종료되면 프로세는 준비 상태로 전이</li><li>실행중인 프로세스에 I&#x2F;O가 필요하면 실행중인 프로세스는 대기 상태로 전이된다</li><li>준비 상태에서 실행 상태로의 전이는 CPU(프로세서) 스케줄러에 의해 수행된다.</li></ul></li><li>대기,보류,블록<ul><li>I&#x2F;O 처리가 완료 될 때 까지 프로세스가 중단되어 대기하는 상태</li><li>대기 리스트에 있는 프로세스는 우선순위가 주어지지 않는다.</li></ul></li><li>종료<ul><li>프로세서 실행이 완료되고 프로세스 할당이 해제 된 상태</li></ul></li></ul><h3 id="프로세스-상태-전이-관련-용어"><a href="#프로세스-상태-전이-관련-용어" class="headerlink" title="프로세스 상태 전이 관련 용어"></a>프로세스 상태 전이 관련 용어</h3><ul><li>Dispatch<ul><li>준비 상태에서 대기하고 있는 프로세스 중 하나가 프로세서를 할당받아 실행 상태로 전이되는 과정</li></ul></li><li>Wake up<ul><li>I.O 작업이 완료되어 프로세스가 대기 상태에서 준비 상태로 전이 되는 과정</li></ul></li><li>교통량 제어기(Traffic controller)<ul><li>프로세스의 상태에 대한 조사와 통보 담당</li></ul></li></ul><h2 id="스레드"><a href="#스레드" class="headerlink" title="스레드"></a>스레드</h2><ul><li><p>프로세스 내에서의 작업 단위, 여러 작업을 할당받아 실행하는 프로그램의 단위</p><ul><li>단일 스레드 , 멀티 쓰레드</li><li>프로세스의 일부 특성을 갖고 있어 경량 프로세스라 함</li><li>자신 만의 <strong>스택과 레지스터</strong> 를 갖으며 독립된 제어흐름을 갖는다.</li></ul></li><li><p>스레드의 분류</p><ul><li>사용자 수준 : 사용자가 만든 라이브러리를 사용하여 스레드 운용, 속도는 빠르지만 구현이 어려움</li><li>커널 수준 : 운영체제 커널에 의해 운용, 구현은 쉬우나 속도가 느림</li></ul></li><li><p>스레드 사용의 장점</p><ul><li>하나의 프로세스를 여러 개의 스레드로 생성하여 병행성 증진 가능</li><li>하드웨어, 운영체제의 성능과 응용 프로그램의 처리율을 향상시킬 수 있다.</li><li>응용 프로그램의 응답시간을 줄일 수 있음</li><li>실행 환경을 공유시켜 <strong>기억장소 낭비</strong> 가 줄어든다.</li><li>프로세스들 간의 통신이 향상</li><li>스레드는 공통적으로 접근 가능한 기억장치를 통해 효율적으로 통신</li></ul></li></ul><h1 id="스케줄링"><a href="#스케줄링" class="headerlink" title="스케줄링"></a>스케줄링</h1><h2 id="스케줄링의-개요"><a href="#스케줄링의-개요" class="headerlink" title="스케줄링의 개요"></a>스케줄링의 개요</h2><ul><li>프로세스가 생성되어 실행될 때 필요한 자원을 해당 프로세스에게 할당하는 작업</li><li>스케줄링의 종류<ul><li>장기 스케줄링<ul><li>어떤 프로세스가 시스템 자원을 차지할 것인가를 결정, 준비상태 큐로 보내는 작업 의미</li><li>작업 스케줄링(job scheduling), 상위 스케줄링이라고 하며 , 작업 스케줄러에 의해 수행</li></ul></li><li>중기 스케줄링<ul><li>어떤 프로세스들이 cpu를 할당받을 것인지 결정하는 작업</li><li>cpu를 할당받으려는 프로세스가 많을 경우 프로세스를 일시 보류 시킨후 활성화해 시스템 부하 조절</li></ul></li><li>단기 스케줄링<ul><li>프로세스가 실행되기 위해 cpu를 할당받는 시기와 특정 프로세스를 지정하는 작업을 의미</li><li>프로세서 스케줄링, 하위 스케줄링이라고도 함</li><li>프로세서 스케줄링 및 문맥 교환은 프로세서 스케줄러에 의해 수행</li></ul></li></ul></li></ul><h2 id="스케줄링의-목적"><a href="#스케줄링의-목적" class="headerlink" title="스케줄링의 목적"></a>스케줄링의 목적</h2><ol><li>공정성</li><li>처리율 증가</li><li>cpu 이용률 증가</li><li>우선순위 제도</li><li>오버헤드 최소화</li><li>응답 시간 최소화</li><li>반환시간 최소화</li><li>대기시간 최소화</li><li>균형있는 자원의 사용</li><li>무한 연기 회피</li></ol><h2 id="스케줄링-기법"><a href="#스케줄링-기법" class="headerlink" title="스케줄링 기법"></a>스케줄링 기법</h2><ul><li>대기 시간 : 바로 앞 프로세스까지 진행시간으로 계산</li><li>반환 시간 : 프로세스의 대기 시간과 실행 시간의 합</li></ul><h3 id="비선점-스케줄링"><a href="#비선점-스케줄링" class="headerlink" title="비선점 스케줄링"></a>비선점 스케줄링</h3><ul><li>이미 할당된 cpu를 다른 프로세스가 강제로 빼앗을 수 없다.</li><li>프로세스가 cpu를 할당 받으면 해당 프로세스가 완료될 때까지 cpu를 사용한다.</li><li>모든 프로세스에 대한 요구를 공정하게 처리할 수 있다.</li><li>프로세스 응답 시간 예측이 용이하며, 일괄 처리 방식에 적합</li></ul><h3 id="선점-스케줄링"><a href="#선점-스케줄링" class="headerlink" title="선점 스케줄링"></a>선점 스케줄링</h3><ul><li>우선순위 존재</li><li>주로 빠른 응답 시간을 요구하는 대화식 시분할 시스템, 온라인 응용에 사용</li><li>많은 오버헤드를 초래</li><li>선점이 가능하도록 일정 시간 배당에 대한 인터럽트용 타이머 클럭이 필요</li></ul><h1 id="비선점-스케줄링-1"><a href="#비선점-스케줄링-1" class="headerlink" title="비선점 스케줄링"></a>비선점 스케줄링</h1><h2 id="FCFS-First-come-first-service-x3D-FIFO"><a href="#FCFS-First-come-first-service-x3D-FIFO" class="headerlink" title="FCFS(First come first service) &#x3D; FIFO"></a>FCFS(First come first service) &#x3D; FIFO</h2><ul><li>준비 상태 큐에 도착한 순서에 따라 차례로 CPU를 할당하는 기법</li><li>공평성은 유지되나 효율성이 떨어질 수 있음</li></ul><h2 id="SJF-short-job-first-단기-작업-우선"><a href="#SJF-short-job-first-단기-작업-우선" class="headerlink" title="SJF(short job first, 단기 작업 우선)"></a>SJF(short job first, 단기 작업 우선)</h2><ul><li>실행 시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법</li><li>가장 적은 평균 대기 시간을 제공하는 최적 알고리즘</li><li>실행 시간이 긴 프로세스가 실행 시간이 짧은 프로세스에게 할당 순위가 밀려 무기한 연기 상태가 될 수 있다.</li></ul><h2 id="HRN-HIGHEST-RESPONSE-RATIO-NEXT"><a href="#HRN-HIGHEST-RESPONSE-RATIO-NEXT" class="headerlink" title="HRN(HIGHEST RESPONSE-RATIO NEXT)"></a>HRN(HIGHEST RESPONSE-RATIO NEXT)</h2><ul><li>SJF 기법을 보완하기 위한 것으로, 대기 시간과 서비스(실행)시간을 이용하는 기법이다.</li><li>우선순위 계산 공식을 이용해 우선순위를 부여 후 CPU에 할당<ul><li>(대기시간 + 서비스 시간)&#x2F;서비스 시간</li></ul></li></ul><h2 id="기한부-DeadLine"><a href="#기한부-DeadLine" class="headerlink" title="기한부(DeadLine)"></a>기한부(DeadLine)</h2><ul><li>프로세스에게 일정한 시간을 주어 그 시간 안에 프로세스를 완료하도록 하는 기법</li><li>제한 시간 초과시 제거하거나 처음부터 다시 실행 시킴</li><li>시스템은 프로세스에게 할당할 정확한 시간을 추정해야 하며, 사용자는 이를 위해 프로세스에게 정확한 정보를 제공 해야한다.</li><li>여러 프로세스들이 동시에 실행되면 스케줄링이 복잡, 프로세스 실행 시 집중적으로 요구되는 자원 관리에 오버헤드가 발생</li></ul><h2 id="우선순위"><a href="#우선순위" class="headerlink" title="우선순위"></a>우선순위</h2><ul><li>준비 상태 큐에서 기다리는 각 프로세스마다 우선순위를 부여하여 그 중 가장 높은 프로세스에게 먼저 cpu를 할당하는 기법</li><li>우선순위가 동일 할 경우 : FCFS 기법으로 CPU 할당</li><li>우선순위는 외부적, 내부적 요인에 따라 다르게 부여 될 수 있다.</li><li>가장 낮은 순위를 부여받은 프로세스는 무한 연기 또는 기아 상태 발생 가능</li></ul><h1 id="선점-스케줄링-1"><a href="#선점-스케줄링-1" class="headerlink" title="선점 스케줄링"></a>선점 스케줄링</h1><h2 id="SRT-Shortest-remaining-time"><a href="#SRT-Shortest-remaining-time" class="headerlink" title="SRT(Shortest remaining time)"></a>SRT(Shortest remaining time)</h2><ul><li>비선점 스케줄링인 SJF 기법을 선점 형태로 변경한 기법, 선점 SJF라 하기도 함</li><li>현재 실행 중인 프로세스의 남은 시간과 준비 상태 큐에 새로 도착한 프로세스의 실행시간을 비교하여 짧은 시간을 요구하는 프로세스에게 CPU를 할당.<ul><li>시분할 시스템에 유용</li></ul></li><li>준비 상태 큐에 있는 각 프로세스의 실행 시간을 추적하여 보유하고 있어야 하므로 오버헤드가 증가</li></ul><h2 id="RR-round-robin"><a href="#RR-round-robin" class="headerlink" title="RR(round robin)"></a>RR(round robin)</h2><ul><li>시분할 시스템을 위해 고안된 방식으로, FCFS 알고리즘을 선점 형태로 변형한 기법</li><li>FCFS처럼 준비 상태 큐에 먼저 들어온 프로세스가 먼저 CPU할당 받으나 <strong>시간 할당량</strong> 동안에만 실행후 다음 프로세스에게 CPU를 넘겨주고 준비상태 큐 제일 뒤로 이동</li><li>할당 되는 시간이 클 경우 FCFS, 작을 경우 문맥 교환 및 오버헤드가 자주 발생</li></ul><h2 id="다단계-큐"><a href="#다단계-큐" class="headerlink" title="다단계 큐"></a>다단계 큐</h2><ul><li>프로세스를 특정 그룹으로 분류 후 각기 다른 준비 상태 큐를 이용하는 방법</li><li>일반적으로 프로세스 우선순위에 따라 시스템 프로세스 대화형 프로세스, 편집 프로세스, 일괄 처리 프로세스 순으로 우선순위가 높음</li><li>각 준비 상태 큐는 독자적인 스케줄링을 가지고 있고 그룹의 특성에 따라 서로 다른 스케줄링 기법을 사용할 수 있다.</li><li>프로세스가 특정 그룹의 준비상태 큐에 들어갈 경우 다른 준비상태 큐로 이동할 수 없다.</li><li>하위 단계 준비 상태 큐에 있는 프로세스를 실행 중이더라도 상위 단계 준비상태 큐에 프로세스가 들어오면 CPU를 넘겨야한다.</li></ul><h2 id="다단계-피드백-큐"><a href="#다단계-피드백-큐" class="headerlink" title="다단계 피드백 큐"></a>다단계 피드백 큐</h2><ul><li>특정 그룹의 준비상태 큐에 들어간 프로세스가 다른 준비 상태 큐 사이를 이동할 수 있도록 개선한 기법</li><li>각 준비 상태 큐마다 시간 할당량을 부여하여 그 시간 동안 완료하지 못한 프로세스는 다음 단꼐의 준비 상태 큐로 이동</li><li>상위 단계 일수록 우선순위가 높고 시간 할당량이 적다.</li><li>요구 시간이 적은 프로세스, 입 출력 중심의 프로세스, 낮은 우선순위에서 너무 오래 기다린 프로세스를 기준으로 높은 우선순위를 할당</li><li>마지막 단계 큐에서는 작업이 완료될 때까지 RR스케줄링 기법을 사용</li></ul><h1 id="병행-프로세스와-상호배제"><a href="#병행-프로세스와-상호배제" class="headerlink" title="병행 프로세스와 상호배제"></a>병행 프로세스와 상호배제</h1><h2 id="병행-프로세스"><a href="#병행-프로세스" class="headerlink" title="병행 프로세스"></a>병행 프로세스</h2><ul><li>두 개 이상의 프로세스들이 동시에 존재하여 실행 상태에 있는 것을 의미한다.<ul><li>한정된 컴퓨터 하드웨어나 자원으 공유하고, 동시에 작업을 수행하기 위해 사용하는 개념</li><li>여러 프로세스들이 독립적으로 실행되는 것을 독립적 병행 프로세스, 서로 협력하며 동시에 실행되는 것을 협동적 병행 프로세스</li><li>병행 프로세스는 다중 처리 시스템이나 분산 처리 시스템에서 중요한 개념으로 이용</li></ul></li></ul><h2 id="임계-구역"><a href="#임계-구역" class="headerlink" title="임계 구역"></a>임계 구역</h2><ul><li><p>다중 프로그래밍 운영체제에서 여러 개의 프로세스가 공유하는 데이터 및 자원에 대하여 어느 한시점에서는 하나의 프로세스만 자원 또는 데이터를 사용하도록 지정된 공유자원(영역)의미</p></li><li><p>임계 구역의 특징</p><ul><li>하나의 프로세스만 접근 가능</li><li>특정 프로세스가 독정 할 수 없다.</li><li>임계 구역 내에서의 작업은 신속하게!</li><li>임계 구역에 현재 실행되는 프로세스가 없어도 구역 사용을 기다려야함, 약간 허락 받는 느낌</li></ul></li><li><p>임계 구역의 문제를 해결하기 위해서는 상호배제 한계대기 진행 3가지 조건을 충족해야한다.</p></li></ul><h2 id="상호-배제-기법"><a href="#상호-배제-기법" class="headerlink" title="상호 배제 기법"></a>상호 배제 기법</h2><ul><li>특정 프로세스가 공유 자원을 사용하고 있을 경우 다른 프로세스가 해당 공유 자원을 사용하지 못하게 제어</li><li>여러 프로세스가 공유자원을 사용할 때 각 프로세스가 번갈아가며 공유자원을 사용하도록 하는 것, 임계 구역을 유지하는 기법</li><li>상호 배제 기법을 구현하기 위한 방법은 <strong>하드웨어, 소프트웨어적</strong> 구현이 있다.</li></ul><h3 id="소프트웨어적-구현-방법"><a href="#소프트웨어적-구현-방법" class="headerlink" title="소프트웨어적 구현 방법"></a>소프트웨어적 구현 방법</h3><ul><li>두 개의 프로세스 기준 : Decker 알고리즘, Peterson 알고리즘</li><li>여러 개의 프로세스 기준 : Lamport의 빵집 알고리즘</li></ul><h3 id="하드웨어적-구현-방법"><a href="#하드웨어적-구현-방법" class="headerlink" title="하드웨어적 구현 방법"></a>하드웨어적 구현 방법</h3><ul><li>Test_And_Set 기법과 Swap 명령어 기법</li></ul><h2 id="동기화-기법"><a href="#동기화-기법" class="headerlink" title="동기화 기법"></a>동기화 기법</h2><ul><li>두 개이상의 프로세스를 한 시점에서는 동시에 처리할 수 없으므로 <strong>처리 순서를 결정</strong> 하는 것으로 상호 배제의 한 형태이다.</li></ul><h3 id="동기화-구현-방법"><a href="#동기화-구현-방법" class="headerlink" title="동기화 구현 방법"></a>동기화 구현 방법</h3><h4 id="세마포어"><a href="#세마포어" class="headerlink" title="세마포어"></a>세마포어</h4><ul><li>각 프로세스에 제어 신호를 전달하여 순서대로 작업을 수행하도록 하는 기법</li><li>다익스트라가 제안, P와 V라는 두 개의 연산에 의해서는 동기화를 유지시키고 상호 배제의 원리를 보장</li><li>세마포어의 종류<ul><li>이진 세마포어</li><li>산술 세마포어</li></ul></li><li>세마포어에 대한 연산은 처리중에 인터럽트되어서는 안된다</li></ul><h4 id="모니터"><a href="#모니터" class="headerlink" title="모니터"></a>모니터</h4><ul><li>모니터는 동기화를 구현하기 위한 특수 프로그램 기법<ul><li>특정 공유 자원을 프로세스에게 할당하는데 필요한 데이터, 이 데이터를 처리하는 프로시저로 구성</li></ul></li><li>자료 추상화와 정보 은폐의 개념을 기초로 공유자원을 할당하기 위한 병행성 구조로 이루어져있다.</li><li>외부의 프로시저로는 직접 액세스 할 수 없다.</li><li>모니터의 경계에서 상호 배제가 시행된다.</li><li>모니터의 한순간에 하나의 프로세스만 진입하여 자원을 사용할 수 있다.</li><li>모니터에서는 WAIT와 SIGANL 연산이 사용된다</li></ul><h1 id="교착-상태-Deadlockf"><a href="#교착-상태-Deadlockf" class="headerlink" title="교착 상태(Deadlockf)"></a>교착 상태(Deadlockf)</h1><ul><li>상호배제에 의해 나타나는 문제점, 둘 이상의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 잇는 자원을 요구하며 <strong>무한정 기다리는 현상</strong></li></ul><h2 id="교착-상태-발생의-필요-충분-조건"><a href="#교착-상태-발생의-필요-충분-조건" class="headerlink" title="교착 상태 발생의 필요 충분 조건"></a>교착 상태 발생의 필요 충분 조건</h2><ul><li><p>하나라도 충족 되지 않으면 교착상태가 발생하지 않는다.</p></li><li><p>상호 배제 : 한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 한다.</p></li><li><p>점유와 대기 : 최소 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야한다.</p></li><li><p>비선점 : 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없음</p></li><li><p>환형 대기 : 공유 자원과 공유 자원을 사용하기 위해 대기하는 프로세스들이 원형으로 구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는 프로세스의 자원을 요구해야한다.</p></li></ul><h2 id="예방-기법"><a href="#예방-기법" class="headerlink" title="예방 기법"></a>예방 기법</h2><ul><li><p>자원 낭비가 가장 심한 기법</p></li><li><p>상호 배제 부정</p></li><li><p>점유와 대기 부정</p></li><li><p>비선점 부정</p></li><li><p>환형 대기 부정</p></li></ul><h2 id="회피-기법"><a href="#회피-기법" class="headerlink" title="회피 기법"></a>회피 기법</h2><ul><li>주로 은행원 알고리즘이 사용된다</li></ul><h3 id="은행원-알고리즘"><a href="#은행원-알고리즘" class="headerlink" title="은행원 알고리즘"></a>은행원 알고리즘</h3><ul><li>Dijkstra가 제안, 은행에서 모든 고객의 요구가 충족되도록 현금을 할당하는 데서 유래한 기법</li><li>안전상태, 불안정 상태로 구분 : 교착 상태 발생 유무와 프로세스가 완료될 수 있는가</li><li>자원의 양 &#x3D; 사용자(프로세스) 수가 같아야함</li><li>프로세스의 모든 요구를 유한한 시간 안에 할당하는 것을 보장한다.</li><li>대화식 시스템에는 적용 안됨</li></ul><h2 id="발견-기법"><a href="#발견-기법" class="headerlink" title="발견 기법"></a>발견 기법</h2><ul><li>시스템에 교착 상태가 발생했는지 점검</li><li>교착상태 발견 알고리즘과 자원 할당 그래프 등을 사용할 수 있다.</li></ul><h2 id="회복-기법"><a href="#회복-기법" class="headerlink" title="회복 기법"></a>회복 기법</h2><ul><li>프로세스 종료</li><li>자원 선점</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 블로그 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
